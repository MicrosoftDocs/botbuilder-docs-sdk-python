### YamlMime:PythonClass
uid: botbuilder.ai.qna.QnAMaker
name: QnAMaker
fullName: botbuilder.ai.qna.QnAMaker
module: botbuilder.ai.qna
inheritances:
- botbuilder.ai.qna.qnamaker_telemetry_client.QnAMakerTelemetryClient
summary: Class used to query a QnA Maker knowledge base for answers.
constructor:
  syntax: 'QnAMaker(endpoint: botbuilder.ai.qna.qnamaker_endpoint.QnAMakerEndpoint,
    options: botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, http_client:
    aiohttp.client.ClientSession = None, telemetry_client: botbuilder.core.bot_telemetry_client.BotTelemetryClient
    = None, log_personal_information: bool = None)'
methods:
- uid: botbuilder.ai.qna.QnAMaker.call_train
  name: call_train
  summary: Sends feedback to the knowledge base.
  signature: 'call_train(feedback_records: typing.List[botbuilder.ai.qna.models.feedback_record.FeedbackRecord])'
  parameters:
  - name: feedback_records
    description: Feedback records.
    isRequired: true
    types:
    - <xref:typing.List>[<xref:FeedbackRecord>]
- uid: botbuilder.ai.qna.QnAMaker.close
  name: close
  signature: close()
- uid: botbuilder.ai.qna.QnAMaker.fill_qna_event
  name: fill_qna_event
  summary: 'Fills the event properties and metrics for the QnaMessage event for telemetry.



    <xref:botbuilder.core.BotTelemetryClient.track_event> method for the QnAMessage
    event.

    The properties and metrics returned the standard properties logged

    with any properties passed from the <xref:botbuilder.ai.qna.get_answers> method.

    :return: Event properties and metrics for the QnaMessage event for telemetry.

    :rtype: <xref:botbuilder.ai.qna.EventData>

    ------

    EventData'
  signature: 'fill_qna_event(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
    turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)
    -> botbuilder.ai.qna.qnamaker.EventData'
  return:
    description: A tuple of event data properties and metrics that will be sent to
      the
- uid: botbuilder.ai.qna.QnAMaker.get_answers
  name: get_answers
  summary: Generates answers from the knowledge base.
  signature: 'get_answers(context: botbuilder.core.turn_context.TurnContext, options:
    botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, int] = None)
    -> [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>]'
  return:
    description: A list of answers for the user's query, sorted in decreasing order
      of ranking score.
    types:
    - <xref:typing.List>[<xref:QueryResult>]
- uid: botbuilder.ai.qna.QnAMaker.get_answers_raw
  name: get_answers_raw
  summary: Generates raw answers from the knowledge base.
  signature: 'get_answers_raw(context: botbuilder.core.turn_context.TurnContext, options:
    botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, int] = None)
    -> botbuilder.ai.qna.models.query_results.QueryResults'
  return:
    description: A list of answers for the user's query, sorted in decreasing order
      of ranking score.
    types:
    - <xref:botbuilder.ai.qna.QueryResult>
- uid: botbuilder.ai.qna.QnAMaker.get_low_score_variation
  name: get_low_score_variation
  summary: Filters the ambiguous question for active learning.
  signature: 'get_low_score_variation(query_result: botbuilder.ai.qna.models.query_result.QueryResult)
    -> typing.List[botbuilder.ai.qna.models.query_result.QueryResult]'
  parameters:
  - name: query_result
    description: User query output.
    isRequired: true
    types:
    - <xref:botbuilder.ai.qna.QueryResult>
  return:
    description: Filtered array of ambiguous questions.
- uid: botbuilder.ai.qna.QnAMaker.on_qna_result
  name: on_qna_result
  signature: 'on_qna_result(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
    turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)'
