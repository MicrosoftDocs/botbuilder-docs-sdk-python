### YamlMime:PythonClass
uid: botbuilder.ai.qna.utils.generate_answer_utils.GenerateAnswerUtils
name: GenerateAnswerUtils
fullName: botbuilder.ai.qna.utils.generate_answer_utils.GenerateAnswerUtils
module: botbuilder.ai.qna.utils.generate_answer_utils
inheritances:
- builtins.object
summary: 'Helper class for Generate Answer API, which is used to make queries to

  a single QnA Maker knowledge base and return the result.'
constructor:
  syntax: 'GenerateAnswerUtils(telemetry_client: botbuilder.core.bot_telemetry_client.BotTelemetryClient,
    endpoint: botbuilder.ai.qna.qnamaker_endpoint.QnAMakerEndpoint, options: botbuilder.ai.qna.qnamaker_options.QnAMakerOptions,
    http_client: aiohttp.client.ClientSession) -> None'
methods:
- uid: botbuilder.ai.qna.utils.generate_answer_utils.GenerateAnswerUtils.get_answers
  name: get_answers
  signature: 'get_answers(context: botbuilder.core.turn_context.TurnContext, options:
    botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None) -> typing.List[botbuilder.ai.qna.models.query_result.QueryResult]'
  parameters:
  - name: context
    isRequired: true
  - name: options
    defaultValue: None
- uid: botbuilder.ai.qna.utils.generate_answer_utils.GenerateAnswerUtils.get_answers_raw
  name: get_answers_raw
  signature: 'get_answers_raw(context: botbuilder.core.turn_context.TurnContext, options:
    botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None) -> botbuilder.ai.qna.models.query_results.QueryResults'
  parameters:
  - name: context
    isRequired: true
  - name: options
    defaultValue: None
