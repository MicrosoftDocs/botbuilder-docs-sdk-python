### YamlMime:PythonClass
uid: botbuilder.ai.luis.luis_util.LuisUtil
name: LuisUtil
fullName: botbuilder.ai.luis.luis_util.LuisUtil
module: botbuilder.ai.luis.luis_util
summary: Utility functions used to extract and transform data from Luis SDK
constructor:
  syntax: LuisUtil()
methods:
- uid: botbuilder.ai.luis.luis_util.LuisUtil.add_properties
  name: add_properties
  signature: 'static add_properties(luis: LuisResult, result: RecognizerResult) ->
    None'
  parameters:
  - name: luis
    isRequired: true
  - name: result
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.add_property
  name: add_property
  signature: 'static add_property(obj: Dict[str, object], key: str, value: object)
    -> None'
  parameters:
  - name: obj
    isRequired: true
  - name: key
    isRequired: true
  - name: value
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.composite_contains_entity
  name: composite_contains_entity
  signature: 'static composite_contains_entity(composite_entity_metadata: EntityModel,
    entity: EntityModel) -> bool'
  parameters:
  - name: composite_entity_metadata
    isRequired: true
  - name: entity
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.extract_entities_and_metadata
  name: extract_entities_and_metadata
  signature: 'static extract_entities_and_metadata(entities: List[EntityModel], composite_entities:
    List[CompositeEntityModel], verbose: bool) -> Dict[str, object]'
  parameters:
  - name: entities
    isRequired: true
  - name: composite_entities
    isRequired: true
  - name: verbose
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.extract_entity_metadata
  name: extract_entity_metadata
  signature: 'static extract_entity_metadata(entity: EntityModel) -> Dict'
  parameters:
  - name: entity
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.extract_entity_value
  name: extract_entity_value
  signature: 'static extract_entity_value(entity: EntityModel) -> object'
  parameters:
  - name: entity
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.extract_normalized_entity_name
  name: extract_normalized_entity_name
  signature: 'static extract_normalized_entity_name(entity: EntityModel) -> str'
  parameters:
  - name: entity
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.get_intents
  name: get_intents
  signature: 'static get_intents(luis_result: LuisResult) -> Dict[str, IntentScore]'
  parameters:
  - name: luis_result
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.get_user_agent
  name: get_user_agent
  signature: static get_user_agent()
- uid: botbuilder.ai.luis.luis_util.LuisUtil.intent_score_as_dict
  name: intent_score_as_dict
  signature: 'static intent_score_as_dict(intent_score: IntentScore) -> Dict[str,
    float]'
  parameters:
  - name: intent_score
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.luis_result_as_dict
  name: luis_result_as_dict
  signature: 'static luis_result_as_dict(luis_result: LuisResult) -> Dict[str, object]'
  parameters:
  - name: luis_result
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.normalized_intent
  name: normalized_intent
  signature: 'static normalized_intent(intent: str) -> str'
  parameters:
  - name: intent
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.number
  name: number
  signature: 'static number(value: object) -> int | float'
  parameters:
  - name: value
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.populate_composite_entity_model
  name: populate_composite_entity_model
  signature: 'static populate_composite_entity_model(composite_entity: CompositeEntityModel,
    entities: List[EntityModel], entities_and_metadata: Dict, verbose: bool) -> List[EntityModel]'
  parameters:
  - name: composite_entity
    isRequired: true
  - name: entities
    isRequired: true
  - name: entities_and_metadata
    isRequired: true
  - name: verbose
    isRequired: true
- uid: botbuilder.ai.luis.luis_util.LuisUtil.recognizer_result_as_dict
  name: recognizer_result_as_dict
  signature: 'static recognizer_result_as_dict(recognizer_result: RecognizerResult)
    -> Dict[str, object]'
  parameters:
  - name: recognizer_result
    isRequired: true
