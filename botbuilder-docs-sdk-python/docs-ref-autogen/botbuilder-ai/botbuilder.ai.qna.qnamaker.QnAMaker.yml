### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.ai.qna.qnamaker.QnAMaker.call_train
  - botbuilder.ai.qna.qnamaker.QnAMaker.close
  - botbuilder.ai.qna.qnamaker.QnAMaker.fill_qna_event
  - botbuilder.ai.qna.qnamaker.QnAMaker.get_answers
  - botbuilder.ai.qna.qnamaker.QnAMaker.get_answers_raw
  - botbuilder.ai.qna.qnamaker.QnAMaker.get_low_score_variation
  - botbuilder.ai.qna.qnamaker.QnAMaker.on_qna_result
  class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.ai.qna.qnamaker_telemetry_client.QnAMakerTelemetryClient
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: QnAMaker
  source:
    id: QnAMaker
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 30
  summary: Class used to query a QnA Maker knowledge base for answers.
  syntax:
    content: 'QnAMaker(endpoint: botbuilder.ai.qna.qnamaker_endpoint.QnAMakerEndpoint,
      options: botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, http_client:
      aiohttp.client.ClientSession = None, telemetry_client: botbuilder.core.bot_telemetry_client.BotTelemetryClient
      = None, log_personal_information: bool = None)'
  type: class
  uid: botbuilder.ai.qna.qnamaker.QnAMaker
- class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker.call_train
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: 'call_train(feedback_records: typing.List[botbuilder.ai.qna.models.feedback_record.FeedbackRecord])'
  namewithoutparameters: call_train
  source:
    id: call_train
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 132
  summary: Sends feedback to the knowledge base.
  syntax:
    content: 'call_train(feedback_records: typing.List[botbuilder.ai.qna.models.feedback_record.FeedbackRecord])'
    parameters:
    - description: Feedback records.
      id: feedback_records
      isRequired: true
      type:
      - typing.List[FeedbackRecord]
  type: method
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.call_train
- class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker.close
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: close()
  namewithoutparameters: close
  source:
    id: close
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 71
  syntax:
    content: close()
    parameters: []
  type: method
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.close
- class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker.fill_qna_event
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: 'fill_qna_event(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
    turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)
    -> botbuilder.ai.qna.qnamaker.EventData'
  namewithoutparameters: fill_qna_event
  source:
    id: fill_qna_event
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 159
  summary: 'Fills the event properties and metrics for the QnaMessage event for telemetry.



    <xref:botbuilder.core.BotTelemetryClient.track_event> method for the QnAMessage
    event.

    The properties and metrics returned the standard properties logged

    with any properties passed from the <xref:botbuilder.ai.qna.qnamaker.get_answers>
    method.

    :return: Event properties and metrics for the QnaMessage event for telemetry.

    :rtype: <xref:botbuilder.ai.qna.qnamaker.EventData>

    ------

    EventData'
  syntax:
    content: 'fill_qna_event(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
      turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
      typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)
      -> botbuilder.ai.qna.qnamaker.EventData'
    return:
      description: A tuple of event data properties and metrics that will be sent
        to the
  type: method
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.fill_qna_event
- class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: 'get_answers(context: botbuilder.core.turn_context.TurnContext, options: botbuilder.ai.qna.qnamaker_options.QnAMakerOptions
    = None, telemetry_properties: typing.Dict[str, str] = None, telemetry_metrics:
    typing.Dict[str, int] = None) -> [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>]'
  namewithoutparameters: get_answers
  source:
    id: get_answers
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 74
  summary: Generates answers from the knowledge base.
  syntax:
    content: 'get_answers(context: botbuilder.core.turn_context.TurnContext, options:
      botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, telemetry_properties:
      typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, int] = None)
      -> [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>]'
    return:
      description: A list of answers for the user's query, sorted in decreasing order
        of ranking score.
      type:
      - typing.List[QueryResult]
  type: method
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers
- class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers_raw
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: 'get_answers_raw(context: botbuilder.core.turn_context.TurnContext, options:
    botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, int] = None)
    -> botbuilder.ai.qna.models.query_results.QueryResults'
  namewithoutparameters: get_answers_raw
  source:
    id: get_answers_raw
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 93
  summary: Generates raw answers from the knowledge base.
  syntax:
    content: 'get_answers_raw(context: botbuilder.core.turn_context.TurnContext, options:
      botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, telemetry_properties:
      typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, int] = None)
      -> botbuilder.ai.qna.models.query_results.QueryResults'
    return:
      description: A list of answers for the user's query, sorted in decreasing order
        of ranking score.
      type:
      - <xref:botbuilder.ai.qna.qnamaker.QueryResult>
  type: method
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers_raw
- class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker.get_low_score_variation
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: 'get_low_score_variation(query_result: botbuilder.ai.qna.models.query_result.QueryResult)
    -> typing.List[botbuilder.ai.qna.models.query_result.QueryResult]'
  namewithoutparameters: get_low_score_variation
  source:
    id: get_low_score_variation
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 122
  summary: Filters the ambiguous question for active learning.
  syntax:
    content: 'get_low_score_variation(query_result: botbuilder.ai.qna.models.query_result.QueryResult)
      -> typing.List[botbuilder.ai.qna.models.query_result.QueryResult]'
    parameters:
    - description: User query output.
      id: query_result
      isRequired: true
      type:
      - botbuilder.ai.qna.qnamaker.QueryResult
    return:
      description: Filtered array of ambiguous questions.
  type: method
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.get_low_score_variation
- class: botbuilder.ai.qna.qnamaker.QnAMaker
  fullName: botbuilder.ai.qna.qnamaker.QnAMaker.on_qna_result
  langs:
  - python
  module: botbuilder.ai.qna.qnamaker
  name: 'on_qna_result(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
    turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)'
  namewithoutparameters: on_qna_result
  source:
    id: on_qna_result
    path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
    remote:
      branch: master
      path: ./libraries/botbuilder-ai\botbuilder\ai\qna\qnamaker.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 141
  syntax:
    content: 'on_qna_result(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
      turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
      typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)'
  type: method
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.on_qna_result
references:
- fullName: botbuilder.ai.qna.qnamaker.QnAMaker.call_train
  isExternal: false
  name: 'call_train(feedback_records: typing.List[botbuilder.ai.qna.models.feedback_record.FeedbackRecord])'
  parent: botbuilder.ai.qna.qnamaker.QnAMaker
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.call_train
- fullName: botbuilder.ai.qna.qnamaker.QnAMaker.close
  isExternal: false
  name: close()
  parent: botbuilder.ai.qna.qnamaker.QnAMaker
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.close
- fullName: botbuilder.ai.qna.qnamaker.QnAMaker.fill_qna_event
  isExternal: false
  name: 'fill_qna_event(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
    turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)
    -> botbuilder.ai.qna.qnamaker.EventData'
  parent: botbuilder.ai.qna.qnamaker.QnAMaker
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.fill_qna_event
- fullName: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers
  isExternal: false
  name: 'get_answers(context: botbuilder.core.turn_context.TurnContext, options: botbuilder.ai.qna.qnamaker_options.QnAMakerOptions
    = None, telemetry_properties: typing.Dict[str, str] = None, telemetry_metrics:
    typing.Dict[str, int] = None) -> [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>]'
  parent: botbuilder.ai.qna.qnamaker.QnAMaker
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers
- fullName: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers_raw
  isExternal: false
  name: 'get_answers_raw(context: botbuilder.core.turn_context.TurnContext, options:
    botbuilder.ai.qna.qnamaker_options.QnAMakerOptions = None, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, int] = None)
    -> botbuilder.ai.qna.models.query_results.QueryResults'
  parent: botbuilder.ai.qna.qnamaker.QnAMaker
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.get_answers_raw
- fullName: botbuilder.ai.qna.qnamaker.QnAMaker.get_low_score_variation
  isExternal: false
  name: 'get_low_score_variation(query_result: botbuilder.ai.qna.models.query_result.QueryResult)
    -> typing.List[botbuilder.ai.qna.models.query_result.QueryResult]'
  parent: botbuilder.ai.qna.qnamaker.QnAMaker
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.get_low_score_variation
- fullName: botbuilder.ai.qna.qnamaker.QnAMaker.on_qna_result
  isExternal: false
  name: 'on_qna_result(query_results: [<class ''botbuilder.ai.qna.models.query_result.QueryResult''>],
    turn_context: botbuilder.core.turn_context.TurnContext, telemetry_properties:
    typing.Dict[str, str] = None, telemetry_metrics: typing.Dict[str, float] = None)'
  parent: botbuilder.ai.qna.qnamaker.QnAMaker
  uid: botbuilder.ai.qna.qnamaker.QnAMaker.on_qna_result
- fullName: typing.List[FeedbackRecord]
  name: List[FeedbackRecord]
  spec.python:
  - fullName: typing.List
    name: List
    uid: typing.List
  - fullName: '['
    name: '['
  - fullName: FeedbackRecord
    name: FeedbackRecord
    uid: FeedbackRecord
  - fullName: ']'
    name: ']'
  uid: typing.List[FeedbackRecord]
- fullName: typing.List[QueryResult]
  name: List[QueryResult]
  spec.python:
  - fullName: typing.List
    name: List
    uid: typing.List
  - fullName: '['
    name: '['
  - fullName: QueryResult
    name: QueryResult
    uid: QueryResult
  - fullName: ']'
    name: ']'
  uid: typing.List[QueryResult]
