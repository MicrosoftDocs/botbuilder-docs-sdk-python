### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.ShowTypingMiddleware.on_turn
  class: botbuilder.core.ShowTypingMiddleware
  fullName: botbuilder.core.ShowTypingMiddleware
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.middleware_set.Middleware
  langs:
  - python
  module: botbuilder.core
  name: ShowTypingMiddleware
  summary: 'When added, this middleware will send typing activities back to the user
    when a Message activity

    is received to let them know that the bot has received the message and is working
    on the response.

    You can specify a delay before the first typing activity is sent and then a frequency,
    which

    determines how often another typing activity is sent. Typing activities will continue
    to be sent

    until your bot sends another message back to the user.'
  syntax:
    content: 'ShowTypingMiddleware(delay: float = 0.5, period: float = 2.0)'
  type: class
  uid: botbuilder.core.ShowTypingMiddleware
- class: botbuilder.core.ShowTypingMiddleware
  fullName: botbuilder.core.ShowTypingMiddleware.on_turn
  langs:
  - python
  module: botbuilder.core
  name: 'on_turn(context: botbuilder.core.turn_context.TurnContext, logic: typing.Callable[botbuilder.core.turn_context.TurnContext,
    typing.Awaitable])'
  namewithoutparameters: on_turn
  syntax:
    content: 'on_turn(context: botbuilder.core.turn_context.TurnContext, logic: typing.Callable[botbuilder.core.turn_context.TurnContext,
      typing.Awaitable])'
  type: method
  uid: botbuilder.core.ShowTypingMiddleware.on_turn
references:
- fullName: botbuilder.core.ShowTypingMiddleware.on_turn
  isExternal: false
  name: 'on_turn(context: botbuilder.core.turn_context.TurnContext, logic: typing.Callable[botbuilder.core.turn_context.TurnContext,
    typing.Awaitable])'
  parent: botbuilder.core.ShowTypingMiddleware
  uid: botbuilder.core.ShowTypingMiddleware.on_turn
