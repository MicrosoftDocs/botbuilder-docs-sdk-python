### YamlMime:PythonClass
uid: botbuilder.core.TurnContext
name: TurnContext
fullName: botbuilder.core.TurnContext
module: botbuilder.core
inheritances:
- builtins.object
constructor:
  syntax: 'TurnContext(adapter_or_context, request: botbuilder.schema._models_py3.Activity
    = None)'
methods:
- uid: botbuilder.core.TurnContext.apply_conversation_reference
  name: apply_conversation_reference
  summary: 'Updates an activity with the delivery information from a conversation
    reference. Calling

    this after get_conversation_reference on an incoming activity

    will properly address the reply to a received activity.

    :param activity:

    :param reference:

    :param is_incoming:

    :return:'
  signature: 'apply_conversation_reference(activity: botbuilder.schema._models_py3.Activity,
    reference: botbuilder.schema._models_py3.ConversationReference, is_incoming: bool
    = False) -> botbuilder.schema._models_py3.Activity'
- uid: botbuilder.core.TurnContext.copy_to
  name: copy_to
  summary: 'Called when this TurnContext instance is passed into the constructor of
    a new TurnContext

    instance. Can be overridden in derived classes.

    :param context:

    :return:'
  signature: 'copy_to(context: botbuilder.core.turn_context.TurnContext) -> None'
- uid: botbuilder.core.TurnContext.delete_activity
  name: delete_activity
  summary: 'Deletes an existing activity.

    :param id_or_reference:

    :return:'
  signature: 'delete_activity(id_or_reference: typing.Union[str, botbuilder.schema._models_py3.ConversationReference])'
- uid: botbuilder.core.TurnContext.get
  name: get
  signature: 'get(key: str) -> object'
- uid: botbuilder.core.TurnContext.get_conversation_reference
  name: get_conversation_reference
  summary: 'Returns the conversation reference for an activity. This can be saved
    as a plain old JSON

    object and then later used to message the user proactively.


    Usage Example:

    reference = TurnContext.get_conversation_reference(context.request)

    :param activity:

    :return:'
  signature: 'get_conversation_reference(activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ConversationReference'
- uid: botbuilder.core.TurnContext.get_mentions
  name: get_mentions
  signature: 'get_mentions(activity: botbuilder.schema._models_py3.Activity) -> typing.List[botbuilder.schema._models_py3.Mention]'
- uid: botbuilder.core.TurnContext.get_reply_conversation_reference
  name: get_reply_conversation_reference
  signature: 'get_reply_conversation_reference(activity: botbuilder.schema._models_py3.Activity,
    reply: botbuilder.schema._models_py3.ResourceResponse) -> botbuilder.schema._models_py3.ConversationReference'
- uid: botbuilder.core.TurnContext.has
  name: has
  summary: 'Returns True is set() has been called for a key. The cached value may
    be of type ''None''.

    :param key:

    :return:'
  signature: 'has(key: str) -> bool'
- uid: botbuilder.core.TurnContext.on_delete_activity
  name: on_delete_activity
  summary: 'Registers a handler to be notified of and potentially intercept an activity
    being deleted.

    :param handler:

    :return:'
  signature: on_delete_activity(handler) -> botbuilder.core.turn_context.TurnContext
- uid: botbuilder.core.TurnContext.on_send_activities
  name: on_send_activities
  summary: 'Registers a handler to be notified of and potentially intercept the sending
    of activities.

    :param handler:

    :return:'
  signature: on_send_activities(handler) -> botbuilder.core.turn_context.TurnContext
- uid: botbuilder.core.TurnContext.on_update_activity
  name: on_update_activity
  summary: 'Registers a handler to be notified of and potentially intercept an activity
    being updated.

    :param handler:

    :return:'
  signature: on_update_activity(handler) -> botbuilder.core.turn_context.TurnContext
- uid: botbuilder.core.TurnContext.remove_mention_text
  name: remove_mention_text
  signature: 'remove_mention_text(activity: botbuilder.schema._models_py3.Activity,
    identifier: str) -> str'
- uid: botbuilder.core.TurnContext.remove_recipient_mention
  name: remove_recipient_mention
  signature: 'remove_recipient_mention(activity: botbuilder.schema._models_py3.Activity)
    -> str'
- uid: botbuilder.core.TurnContext.send_activities
  name: send_activities
  signature: 'send_activities(activities: typing.List[botbuilder.schema._models_py3.Activity])
    -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
- uid: botbuilder.core.TurnContext.send_activity
  name: send_activity
  summary: 'Sends a single activity or message to the user.

    :param activity_or_text:

    :return:'
  signature: 'send_activity(activity_or_text: typing.Union[botbuilder.schema._models_py3.Activity,
    str], speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.ResourceResponse'
- uid: botbuilder.core.TurnContext.send_trace_activity
  name: send_trace_activity
  signature: 'send_trace_activity(name: str, value: object = None, value_type: str
    = None, label: str = None) -> botbuilder.schema._models_py3.ResourceResponse'
- uid: botbuilder.core.TurnContext.set
  name: set
  summary: 'Caches a value for the lifetime of the current turn.

    :param key:

    :param value:

    :return:'
  signature: 'set(key: str, value: object) -> None'
- uid: botbuilder.core.TurnContext.update_activity
  name: update_activity
  summary: 'Replaces an existing activity.

    :param activity:

    :return:'
  signature: 'update_activity(activity: botbuilder.schema._models_py3.Activity)'
attributes:
- uid: botbuilder.core.TurnContext.activity
  name: activity
  summary: 'The received activity.

    :return:'
- uid: botbuilder.core.TurnContext.responded
  name: responded
  summary: 'If *true* at least one response has been sent for the current turn of
    conversation.

    :return:'
- uid: botbuilder.core.TurnContext.services
  name: services
  summary: 'Map of services and other values cached for the lifetime of the turn.

    :return:'
