### YamlMime:PythonClass
uid: botbuilder.core.TurnContext
name: TurnContext
fullName: botbuilder.core.TurnContext
module: botbuilder.core
inheritances:
- builtins.object
summary: 'Creates a new TurnContext instance.

  :param adapter_or_context:

  :param request:'
constructor:
  syntax: 'TurnContext(adapter_or_context, request: Activity = None)'
  parameters:
  - name: adapter_or_context
    isRequired: true
  - name: request
    defaultValue: None
methods:
- uid: botbuilder.core.TurnContext.apply_conversation_reference
  name: apply_conversation_reference
  summary: 'Updates an activity with the delivery information from a conversation
    reference. Calling

    this after get_conversation_reference on an incoming activity

    will properly address the reply to a received activity.

    :param activity:

    :param reference:

    :param is_incoming:

    :return:'
  signature: 'static apply_conversation_reference(activity: Activity, reference: ConversationReference,
    is_incoming: bool = False) -> Activity'
  parameters:
  - name: activity
    isRequired: true
  - name: reference
    isRequired: true
  - name: is_incoming
    defaultValue: 'False'
- uid: botbuilder.core.TurnContext.copy_to
  name: copy_to
  summary: 'Called when this TurnContext instance is passed into the constructor of
    a new TurnContext

    instance. Can be overridden in derived classes.

    :param context:

    :return:'
  signature: 'copy_to(context: TurnContext) -> None'
  parameters:
  - name: context
    isRequired: true
- uid: botbuilder.core.TurnContext.delete_activity
  name: delete_activity
  summary: 'Deletes an existing activity.

    :param id_or_reference:

    :return:'
  signature: 'async delete_activity(id_or_reference: str | ConversationReference)'
  parameters:
  - name: id_or_reference
    isRequired: true
- uid: botbuilder.core.TurnContext.get
  name: get
  signature: 'get(key: str) -> object'
  parameters:
  - name: key
    isRequired: true
- uid: botbuilder.core.TurnContext.get_conversation_reference
  name: get_conversation_reference
  summary: 'Returns the conversation reference for an activity. This can be saved
    as a plain old JSON

    object and then later used to message the user proactively.


    Usage Example:

    reference = TurnContext.get_conversation_reference(context.request)

    :param activity:

    :return:'
  signature: 'static get_conversation_reference(activity: Activity) -> ConversationReference'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.TurnContext.get_mentions
  name: get_mentions
  signature: 'static get_mentions(activity: Activity) -> List[Mention]'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.TurnContext.get_reply_conversation_reference
  name: get_reply_conversation_reference
  signature: 'static get_reply_conversation_reference(activity: Activity, reply: ResourceResponse)
    -> ConversationReference'
  parameters:
  - name: activity
    isRequired: true
  - name: reply
    isRequired: true
- uid: botbuilder.core.TurnContext.has
  name: has
  summary: 'Returns True is set() has been called for a key. The cached value may
    be of type ''None''.

    :param key:

    :return:'
  signature: 'has(key: str) -> bool'
  parameters:
  - name: key
    isRequired: true
- uid: botbuilder.core.TurnContext.on_delete_activity
  name: on_delete_activity
  summary: 'Registers a handler to be notified of and potentially intercept an activity
    being deleted.

    :param handler:

    :return:'
  signature: on_delete_activity(handler) -> TurnContext
  parameters:
  - name: handler
    isRequired: true
- uid: botbuilder.core.TurnContext.on_send_activities
  name: on_send_activities
  summary: 'Registers a handler to be notified of and potentially intercept the sending
    of activities.

    :param handler:

    :return:'
  signature: on_send_activities(handler) -> TurnContext
  parameters:
  - name: handler
    isRequired: true
- uid: botbuilder.core.TurnContext.on_update_activity
  name: on_update_activity
  summary: 'Registers a handler to be notified of and potentially intercept an activity
    being updated.

    :param handler:

    :return:'
  signature: on_update_activity(handler) -> TurnContext
  parameters:
  - name: handler
    isRequired: true
- uid: botbuilder.core.TurnContext.remove_mention_text
  name: remove_mention_text
  signature: 'static remove_mention_text(activity: Activity, identifier: str) -> str'
  parameters:
  - name: activity
    isRequired: true
  - name: identifier
    isRequired: true
- uid: botbuilder.core.TurnContext.remove_recipient_mention
  name: remove_recipient_mention
  signature: 'static remove_recipient_mention(activity: Activity) -> str'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.TurnContext.send_activities
  name: send_activities
  signature: 'async send_activities(activities: List[Activity]) -> List[ResourceResponse]'
  parameters:
  - name: activities
    isRequired: true
- uid: botbuilder.core.TurnContext.send_activity
  name: send_activity
  summary: 'Sends a single activity or message to the user.

    :param activity_or_text:

    :return:'
  signature: 'async send_activity(activity_or_text: Activity | str, speak: str = None,
    input_hint: str = None) -> ResourceResponse'
  parameters:
  - name: activity_or_text
    isRequired: true
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.TurnContext.send_trace_activity
  name: send_trace_activity
  signature: 'async send_trace_activity(name: str, value: object = None, value_type:
    str = None, label: str = None) -> ResourceResponse'
  parameters:
  - name: name
    isRequired: true
  - name: value
    defaultValue: None
  - name: value_type
    defaultValue: None
  - name: label
    defaultValue: None
- uid: botbuilder.core.TurnContext.set
  name: set
  summary: 'Caches a value for the lifetime of the current turn.

    :param key:

    :param value:

    :return:'
  signature: 'set(key: str, value: object) -> None'
  parameters:
  - name: key
    isRequired: true
  - name: value
    isRequired: true
- uid: botbuilder.core.TurnContext.update_activity
  name: update_activity
  summary: 'Replaces an existing activity.

    :param activity:

    :return:'
  signature: 'async update_activity(activity: Activity)'
  parameters:
  - name: activity
    isRequired: true
attributes:
- uid: botbuilder.core.TurnContext.activity
  name: activity
  summary: 'The received activity.

    :return:'
- uid: botbuilder.core.TurnContext.responded
  name: responded
  summary: 'If *true* at least one response has been sent for the current turn of
    conversation.

    :return:'
- uid: botbuilder.core.TurnContext.services
  name: services
  summary: 'Map of services and other values cached for the lifetime of the turn.

    :return:'
- uid: botbuilder.core.TurnContext.turn_state
  name: turn_state
