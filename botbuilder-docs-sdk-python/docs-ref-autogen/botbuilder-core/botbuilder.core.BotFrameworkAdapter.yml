### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.BotFrameworkAdapter.authenticate_request
  - botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
  - botbuilder.core.BotFrameworkAdapter.continue_conversation
  - botbuilder.core.BotFrameworkAdapter.create_connector_client
  - botbuilder.core.BotFrameworkAdapter.create_context
  - botbuilder.core.BotFrameworkAdapter.create_conversation
  - botbuilder.core.BotFrameworkAdapter.create_token_api_client
  - botbuilder.core.BotFrameworkAdapter.delete_activity
  - botbuilder.core.BotFrameworkAdapter.delete_conversation_member
  - botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
  - botbuilder.core.BotFrameworkAdapter.get_aad_tokens
  - botbuilder.core.BotFrameworkAdapter.get_activity_members
  - botbuilder.core.BotFrameworkAdapter.get_conversation_members
  - botbuilder.core.BotFrameworkAdapter.get_conversations
  - botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
  - botbuilder.core.BotFrameworkAdapter.get_token_status
  - botbuilder.core.BotFrameworkAdapter.get_user_token
  - botbuilder.core.BotFrameworkAdapter.oauth_api_url
  - botbuilder.core.BotFrameworkAdapter.parse_request
  - botbuilder.core.BotFrameworkAdapter.process_activity
  - botbuilder.core.BotFrameworkAdapter.send_activities
  - botbuilder.core.BotFrameworkAdapter.sign_out_user
  - botbuilder.core.BotFrameworkAdapter.update_activity
  class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.bot_adapter.BotAdapter
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.user_token_provider.UserTokenProvider
  langs:
  - python
  module: botbuilder.core
  name: BotFrameworkAdapter
  remarks: "The bot adapter encapsulates authentication processes and sends activities\
    \ to and\nreceives activities from the Bot Connector Service. When your bot receives\
    \ an activity,\nthe adapter creates a context object, passes it to your bot's\
    \ application logic, and\nsends responses back to the user's channel.\nThe adapter\
    \ processes and directs incoming activities in through the bot middleware\npipeline\
    \ to your bot\u2019s logic and then back out again.\nAs each activity flows in\
    \ and out of the bot, each piece of middleware can inspect or act\nupon the activity,\
    \ both before and after the bot logic runs.\n"
  source:
    id: BotFrameworkAdapter
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 120
  summary: Defines an adapter to connect a bot to a service endpoint.
  syntax:
    content: 'BotFrameworkAdapter(settings: botbuilder.core.bot_framework_adapter.BotFrameworkAdapterSettings)'
  type: class
  uid: botbuilder.core.BotFrameworkAdapter
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.authenticate_request
  langs:
  - python
  module: botbuilder.core
  name: 'authenticate_request(request: botbuilder.schema._models_py3.Activity, auth_header:
    str) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  source:
    id: authenticate_request
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 363
  summary: Allows for the overriding of authentication in unit tests.
  syntax:
    content: 'authenticate_request(request: botbuilder.schema._models_py3.Activity,
      auth_header: str) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
    parameters:
    - description: The request to authenticate
      id: request
      type:
      - botbuilder.schema.Activity
    - description: The authentication header
      id: auth_header
    return:
      description: The request claims identity
      type:
      - botframework.connector.auth.ClaimsIdentity
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.authenticate_request
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
  langs:
  - python
  module: botbuilder.core
  name: 'check_emulating_oauth_cards(context: botbuilder.core.turn_context.TurnContext)'
  source:
    id: check_emulating_oauth_cards
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 958
  syntax:
    content: 'check_emulating_oauth_cards(context: botbuilder.core.turn_context.TurnContext)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.continue_conversation
  langs:
  - python
  module: botbuilder.core
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None)'
  source:
    id: continue_conversation
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 180
  summary: 'Continues a conversation with a user.



    and is generally found in the *MicrosoftAppId* parameter in *config.py*.

    :type bot_id: <xref:typing.str>

    :param claims_identity: The bot claims identity

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>



    > [!NOTE]

    > This is often referred to as the bots proactive messaging flow as it lets the
    bot proactively

    >

    > send messages to a conversation or user that are already in a communication.

    >

    > Scenarios such as sending notifications or coupons to a user are enabled by
    this function.

    >'
  syntax:
    content: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
      callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
      = None)'
    return:
      description: A task that represents the work queued to execute.
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.continue_conversation
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_connector_client
  langs:
  - python
  module: botbuilder.core
  name: 'create_connector_client(service_url: str, identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None) -> botframework.connector.aio._connector_client_async.ConnectorClient'
  source:
    id: create_connector_client
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 874
  summary: 'Allows for mocking of the connector client in unit tests

    :param service_url: The service URL

    :param identity: The claims identity'
  syntax:
    content: 'create_connector_client(service_url: str, identity: botframework.connector.auth.claims_identity.ClaimsIdentity
      = None) -> botframework.connector.aio._connector_client_async.ConnectorClient'
    return:
      description: An instance of the <xref:botbuilder.core.ConnectorClient> class
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_connector_client
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_context
  langs:
  - python
  module: botbuilder.core
  name: create_context(activity)
  source:
    id: create_context
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 391
  summary: 'Allows for the overriding of the context object in unit tests and derived
    adapters.

    :param activity:

    :return:'
  syntax:
    content: create_context(activity)
    parameters:
    - id: activity
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_context
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_conversation
  langs:
  - python
  module: botbuilder.core
  name: 'create_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    logic: typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable]
    = None, conversation_parameters: botbuilder.schema._models_py3.ConversationParameters
    = None)'
  source:
    id: create_conversation
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 227
  summary: 'Starts a new conversation with a user. Used to direct message to a member
    of a group.



    > [!NOTE]

    > To start a conversation, your bot must know its account information and the
    user''s

    >

    > account information on that channel.

    >

    > Most channels only support initiating a direct message (non-group) conversation.

    >

    > The adapter attempts to create a new conversation on the channel, and

    >

    > then sends a conversation update activity through its middleware pipeline

    >

    > to the the callback method.

    >

    > If the conversation is established with the specified users, the ID of the activity

    >

    > will contain the ID of the new conversation.</para>

    >'
  syntax:
    content: 'create_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
      logic: typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable]
      = None, conversation_parameters: botbuilder.schema._models_py3.ConversationParameters
      = None)'
    parameters:
    - description: The conversation reference that contains the tenant
      id: reference
      type:
      - botbuilder.schema.ConversationReference
    - description: The logic to use for the creation of the conversation
      id: logic
      type:
      - typing.Callable
    - description: The information to use to create the conversation
      id: conversation_parameters
    return:
      description: A task representing the work queued to execute.
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_conversation
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_token_api_client
  langs:
  - python
  module: botbuilder.core
  name: 'create_token_api_client(service_url: str) -> botframework.connector.token_api._token_api_client.TokenApiClient'
  source:
    id: create_token_api_client
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 925
  syntax:
    content: 'create_token_api_client(service_url: str) -> botframework.connector.token_api._token_api_client.TokenApiClient'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_token_api_client
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.delete_activity
  langs:
  - python
  module: botbuilder.core
  name: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
    botbuilder.schema._models_py3.ConversationReference)'
  source:
    id: delete_activity
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 473
  summary: 'Deletes an activity that was previously sent to a channel. It should be
    noted that not all

    channels support this feature.



    > [!NOTE]

    > The activity_id of the <xref:botbuilder.schema.ConversationReference> identifies
    the activity to delete.

    >'
  syntax:
    content: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
      botbuilder.schema._models_py3.ConversationReference)'
    parameters:
    - description: The context object for the turn
      id: context
      type:
      - :class:`TurnContext'
    - description: Conversation reference for the activity to delete
      id: reference
      type:
      - botbuilder.schema.ConversationReference
    return:
      description: A task that represents the work queued to execute
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.delete_activity
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
  langs:
  - python
  module: botbuilder.core
  name: 'delete_conversation_member(context: botbuilder.core.turn_context.TurnContext,
    member_id: str) -> None'
  source:
    id: delete_conversation_member
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 558
  summary: Deletes a member from the current conversation.
  syntax:
    content: 'delete_conversation_member(context: botbuilder.core.turn_context.TurnContext,
      member_id: str) -> None'
    parameters:
    - description: The context object for the turn
      id: context
      type:
      - botbuilder.core.TurnContext
    - description: The ID of the member to remove from the conversation
      id: member_id
      type:
      - str
    return:
      description: A task that represents the work queued to execute.</returns
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
  langs:
  - python
  module: botbuilder.core
  name: 'emulate_oauth_cards(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str], emulate: bool)'
  source:
    id: emulate_oauth_cards
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 931
  syntax:
    content: 'emulate_oauth_cards(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
      str], emulate: bool)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
  langs:
  - python
  module: botbuilder.core
  name: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, resource_urls: typing.List[str]) -> typing.Dict[str, botbuilder.schema._models_py3.TokenResponse]'
  source:
    id: get_aad_tokens
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 841
  summary: Retrieves Azure Active Directory tokens for particular resources on a configured
    connection.
  syntax:
    content: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str, resource_urls: typing.List[str]) -> typing.Dict[str, botbuilder.schema._models_py3.TokenResponse]'
    parameters:
    - description: Context for the current turn of conversation with the user
      id: context
      type:
      - botbuilder.core.TurnContext
    - description: The name of the Azure Active Directory connection configured with
        this bot
      id: connection_name
      type:
      - str
    - description: The list of resource URLs to retrieve tokens for
      id: resource_urls
      type:
      - typing.List
    return:
      description: Dictionary of resource Urls to the corresponding :class:'botbuilder.schema.TokenResponse`
      type:
      - typing.Dict
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_activity_members
  langs:
  - python
  module: botbuilder.core
  name: 'get_activity_members(context: botbuilder.core.turn_context.TurnContext, activity_id:
    str)'
  source:
    id: get_activity_members
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 598
  summary: 'Lists the members of a given activity.



    If not specified the current activities ID will be used.'
  syntax:
    content: 'get_activity_members(context: botbuilder.core.turn_context.TurnContext,
      activity_id: str)'
    return:
      description: List of Members of the activity
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_activity_members
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_conversation_members
  langs:
  - python
  module: botbuilder.core
  name: 'get_conversation_members(context: botbuilder.core.turn_context.TurnContext)'
  source:
    id: get_conversation_members
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 640
  summary: Lists the members of a current conversation.
  syntax:
    content: 'get_conversation_members(context: botbuilder.core.turn_context.TurnContext)'
    parameters:
    - description: The context object for the turn
      id: context
      type:
      - botbuilder.core.TurnContext
    return:
      description: List of members of the current conversation
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_conversation_members
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_conversations
  langs:
  - python
  module: botbuilder.core
  name: 'get_conversations(service_url: str, continuation_token: str = None)'
  source:
    id: get_conversations
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 672
  summary: 'Lists the Conversations in which this bot has participated for a given
    channel server. The channel server

    returns results in pages and each page will include a *continuationToken* that
    can be used to fetch the next

    page of results from the server.



    *context.activity.serviceUrl*

    :type service_url: str



    > [!NOTE]

    > If the task completes successfully, the result contains a page of the members
    of the current

    >



    conversation.

    This overload may be called from outside the context of a conversation, as only
    the bot''s service URL and

    credentials are required.'
  syntax:
    content: 'get_conversations(service_url: str, continuation_token: str = None)'
    parameters:
    - description: The continuation token from the previous page of results
      id: continuation_token
      type:
      - str
    return:
      description: A task that represents the work queued to execute
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_conversations
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
  langs:
  - python
  module: botbuilder.core
  name: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
    connection_name: str) -> str'
  source:
    id: get_oauth_sign_in_link
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 774
  summary: 'Gets the raw sign-in link to be sent to the user for sign-in for a connection
    name.



    > [!NOTE]

    > If the task completes successfully, the result contains the raw sign-in link

    >'
  syntax:
    content: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
      connection_name: str) -> str'
    parameters:
    - description: Context for the current turn of conversation with the user
      id: context
      type:
      - botbuilder.core.TurnContext
    - description: Name of the auth connection to use
      id: connection_name
      type:
      - str
    return:
      description: A task that represents the work queued to execute
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_token_status
  langs:
  - python
  module: botbuilder.core
  name: 'get_token_status(context: botbuilder.core.turn_context.TurnContext, user_id:
    str = None, include_filter: str = None) -> typing.List[botframework.connector.token_api.models._models_py3.TokenStatus]'
  source:
    id: get_token_status
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 806
  summary: 'Retrieves the token status for each configured connection for the given
    user.



    Blank will return token status for all configured connections.

    :type include_filter: str'
  syntax:
    content: 'get_token_status(context: botbuilder.core.turn_context.TurnContext,
      user_id: str = None, include_filter: str = None) -> typing.List[botframework.connector.token_api.models._models_py3.TokenStatus]'
    return:
      description: Array of <xref:botframework.connector.token_api.modelsTokenStatus>
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_token_status
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_user_token
  langs:
  - python
  module: botbuilder.core
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, magic_code: str = None) -> botbuilder.schema._models_py3.TokenResponse'
  source:
    id: get_user_token
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 697
  summary: 'Attempts to retrieve the token for a user that''s in a login flow.



    :param magic_code" (Optional) user entered code to validate

    :str magic_code" str'
  syntax:
    content: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str, magic_code: str = None) -> botbuilder.schema._models_py3.TokenResponse'
    return:
      description: Token Response
      type:
      - :class:'botbuilder.schema.TokenResponse`
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_user_token
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.oauth_api_url
  langs:
  - python
  module: botbuilder.core
  name: 'oauth_api_url(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str]) -> str'
  source:
    id: oauth_api_url
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 938
  syntax:
    content: 'oauth_api_url(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
      str]) -> str'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.oauth_api_url
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.parse_request
  langs:
  - python
  module: botbuilder.core
  name: parse_request(req)
  source:
    id: parse_request
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 399
  summary: 'Parses and validates request

    :param req:

    :return:'
  syntax:
    content: parse_request(req)
    parameters:
    - id: req
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.parse_request
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.process_activity
  langs:
  - python
  module: botbuilder.core
  name: 'process_activity(req, auth_header: str, logic: typing.Callable)'
  source:
    id: process_activity
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 304
  summary: 'Creates a turn context and runs the middleware pipeline for an incoming
    activity,

    Processes an activity received by the bots web server. This includes any messages
    sent from a

    user and is the method that drives what''s often referred to as the bots *reactive
    messaging* flow.



    was *Invoke* and the corresponding key (*channelId* + *activityId*) was found
    then

    an <xref:botbuilder.core.InvokeResponse> is returned; otherwise, *null* is returned.



    > [!NOTE]

    > Call this method to reactively send a message to a conversation.

    >

    > If the task completes successfully, then an <xref:botbuilder.core.InvokeResponse>
    is returned;

    >

    > otherwise. null is returned.

    >'
  syntax:
    content: 'process_activity(req, auth_header: str, logic: typing.Callable)'
    parameters:
    - description: The incoming activity
      id: req
      type:
      - typing.str
    - description: The HTTP authentication header of the request
      id: auth_header
      type:
      - typing.str
    - description: The logic to execute at the end of the adapter's middleware pipeline.
      id: logic
      type:
      - typing.Callable
    return:
      description: A task that represents the work queued to execute. If the activity
        type
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.process_activity
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.send_activities
  langs:
  - python
  module: botbuilder.core
  name: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
    typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  source:
    id: send_activities
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 501
  syntax:
    content: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
      typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.send_activities
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.sign_out_user
  langs:
  - python
  module: botbuilder.core
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None) -> str'
  source:
    id: sign_out_user
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 745
  summary: Signs the user out with the token server.
  syntax:
    content: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str = None, user_id: str = None) -> str'
    parameters:
    - description: Context for the current turn of conversation with the user
      id: context
      type:
      - botbuilder.core.TurnContext
    - description: Name of the auth connection to use
      id: connection_name
      type:
      - str
    - description: User id of user to sign out
      id: user_id
      type:
      - str
    return:
      description: A task that represents the work queued to execute
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.sign_out_user
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.update_activity
  langs:
  - python
  module: botbuilder.core
  name: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
    botbuilder.schema._models_py3.Activity)'
  source:
    id: update_activity
    path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\bot_framework_adapter.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 443
  summary: 'Replaces an activity that was previously sent to a channel. It should
    be noted that not all

    channels support this feature.



    > [!NOTE]

    > If the activity is successfully sent, the task result contains

    >

    > a <xref:botbuilder.schema.ResourceResponse> object containing the ID that

    >

    > the receiving channel assigned to the activity.

    >

    > Before calling this function, set the ID of the replacement activity to the
    ID

    >

    > of the activity to replace.

    >'
  syntax:
    content: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
      botbuilder.schema._models_py3.Activity)'
    parameters:
    - description: The context object for the turn
      id: context
      type:
      - :class:`TurnContext'
    - description: New replacement activity
      id: activity
      type:
      - botbuilder.schema.Activity
    return:
      description: A task that represents the work queued to execute
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.update_activity
references:
- fullName: botbuilder.core.BotFrameworkAdapter.authenticate_request
  isExternal: false
  name: 'authenticate_request(request: botbuilder.schema._models_py3.Activity, auth_header:
    str) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.authenticate_request
- fullName: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
  isExternal: false
  name: 'check_emulating_oauth_cards(context: botbuilder.core.turn_context.TurnContext)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
- fullName: botbuilder.core.BotFrameworkAdapter.continue_conversation
  isExternal: false
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.continue_conversation
- fullName: botbuilder.core.BotFrameworkAdapter.create_connector_client
  isExternal: false
  name: 'create_connector_client(service_url: str, identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None) -> botframework.connector.aio._connector_client_async.ConnectorClient'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_connector_client
- fullName: botbuilder.core.BotFrameworkAdapter.create_context
  isExternal: false
  name: create_context(activity)
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_context
- fullName: botbuilder.core.BotFrameworkAdapter.create_conversation
  isExternal: false
  name: 'create_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    logic: typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable]
    = None, conversation_parameters: botbuilder.schema._models_py3.ConversationParameters
    = None)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_conversation
- fullName: botbuilder.core.BotFrameworkAdapter.create_token_api_client
  isExternal: false
  name: 'create_token_api_client(service_url: str) -> botframework.connector.token_api._token_api_client.TokenApiClient'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_token_api_client
- fullName: botbuilder.core.BotFrameworkAdapter.delete_activity
  isExternal: false
  name: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
    botbuilder.schema._models_py3.ConversationReference)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.delete_activity
- fullName: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
  isExternal: false
  name: 'delete_conversation_member(context: botbuilder.core.turn_context.TurnContext,
    member_id: str) -> None'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
- fullName: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
  isExternal: false
  name: 'emulate_oauth_cards(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str], emulate: bool)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
- fullName: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
  isExternal: false
  name: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, resource_urls: typing.List[str]) -> typing.Dict[str, botbuilder.schema._models_py3.TokenResponse]'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
- fullName: botbuilder.core.BotFrameworkAdapter.get_activity_members
  isExternal: false
  name: 'get_activity_members(context: botbuilder.core.turn_context.TurnContext, activity_id:
    str)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_activity_members
- fullName: botbuilder.core.BotFrameworkAdapter.get_conversation_members
  isExternal: false
  name: 'get_conversation_members(context: botbuilder.core.turn_context.TurnContext)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_conversation_members
- fullName: botbuilder.core.BotFrameworkAdapter.get_conversations
  isExternal: false
  name: 'get_conversations(service_url: str, continuation_token: str = None)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_conversations
- fullName: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
  isExternal: false
  name: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
    connection_name: str) -> str'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
- fullName: botbuilder.core.BotFrameworkAdapter.get_token_status
  isExternal: false
  name: 'get_token_status(context: botbuilder.core.turn_context.TurnContext, user_id:
    str = None, include_filter: str = None) -> typing.List[botframework.connector.token_api.models._models_py3.TokenStatus]'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_token_status
- fullName: botbuilder.core.BotFrameworkAdapter.get_user_token
  isExternal: false
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, magic_code: str = None) -> botbuilder.schema._models_py3.TokenResponse'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_user_token
- fullName: botbuilder.core.BotFrameworkAdapter.oauth_api_url
  isExternal: false
  name: 'oauth_api_url(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str]) -> str'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.oauth_api_url
- fullName: botbuilder.core.BotFrameworkAdapter.parse_request
  isExternal: false
  name: parse_request(req)
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.parse_request
- fullName: botbuilder.core.BotFrameworkAdapter.process_activity
  isExternal: false
  name: 'process_activity(req, auth_header: str, logic: typing.Callable)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.process_activity
- fullName: botbuilder.core.BotFrameworkAdapter.send_activities
  isExternal: false
  name: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
    typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.send_activities
- fullName: botbuilder.core.BotFrameworkAdapter.sign_out_user
  isExternal: false
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None) -> str'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.sign_out_user
- fullName: botbuilder.core.BotFrameworkAdapter.update_activity
  isExternal: false
  name: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
    botbuilder.schema._models_py3.Activity)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.update_activity
