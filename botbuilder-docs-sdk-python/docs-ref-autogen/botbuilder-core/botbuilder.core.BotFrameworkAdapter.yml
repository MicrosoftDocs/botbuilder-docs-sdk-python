### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.BotFrameworkAdapter.authenticate_request
  - botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
  - botbuilder.core.BotFrameworkAdapter.continue_conversation
  - botbuilder.core.BotFrameworkAdapter.create_connector_client
  - botbuilder.core.BotFrameworkAdapter.create_context
  - botbuilder.core.BotFrameworkAdapter.create_conversation
  - botbuilder.core.BotFrameworkAdapter.create_token_api_client
  - botbuilder.core.BotFrameworkAdapter.delete_activity
  - botbuilder.core.BotFrameworkAdapter.delete_conversation_member
  - botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
  - botbuilder.core.BotFrameworkAdapter.get_aad_tokens
  - botbuilder.core.BotFrameworkAdapter.get_activity_members
  - botbuilder.core.BotFrameworkAdapter.get_conversation_members
  - botbuilder.core.BotFrameworkAdapter.get_conversations
  - botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
  - botbuilder.core.BotFrameworkAdapter.get_token_status
  - botbuilder.core.BotFrameworkAdapter.get_user_token
  - botbuilder.core.BotFrameworkAdapter.oauth_api_url
  - botbuilder.core.BotFrameworkAdapter.parse_request
  - botbuilder.core.BotFrameworkAdapter.process_activity
  - botbuilder.core.BotFrameworkAdapter.send_activities
  - botbuilder.core.BotFrameworkAdapter.sign_out_user
  - botbuilder.core.BotFrameworkAdapter.update_activity
  class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.bot_adapter.BotAdapter
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.user_token_provider.UserTokenProvider
  langs:
  - python
  module: botbuilder.core
  name: BotFrameworkAdapter
  summary: ''
  syntax:
    content: 'BotFrameworkAdapter(settings: botbuilder.core.bot_framework_adapter.BotFrameworkAdapterSettings)'
  type: class
  uid: botbuilder.core.BotFrameworkAdapter
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.authenticate_request
  langs:
  - python
  module: botbuilder.core
  name: 'authenticate_request(request: botbuilder.schema._models_py3.Activity, auth_header:
    str) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  summary: 'Allows for the overriding of authentication in unit tests.

    :param request:

    :param auth_header:

    :return:'
  syntax:
    content: 'authenticate_request(request: botbuilder.schema._models_py3.Activity,
      auth_header: str) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.authenticate_request
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
  langs:
  - python
  module: botbuilder.core
  name: 'check_emulating_oauth_cards(context: botbuilder.core.turn_context.TurnContext)'
  syntax:
    content: 'check_emulating_oauth_cards(context: botbuilder.core.turn_context.TurnContext)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.continue_conversation
  langs:
  - python
  module: botbuilder.core
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None)'
  summary: 'Continues a conversation with a user. This is often referred to as the
    bots "Proactive Messaging"

    flow as its lets the bot proactively send messages to a conversation or user that
    its already

    communicated with. Scenarios like sending notifications or coupons to a user are
    enabled by this

    method.

    :param bot_id:

    :param reference:

    :param callback:

    :param claims_identity:

    :return:'
  syntax:
    content: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
      callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
      = None)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.continue_conversation
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_connector_client
  langs:
  - python
  module: botbuilder.core
  name: 'create_connector_client(service_url: str, identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None) -> botframework.connector.aio._connector_client_async.ConnectorClient'
  summary: 'Allows for mocking of the connector client in unit tests.

    :param service_url:

    :param identity:

    :return:'
  syntax:
    content: 'create_connector_client(service_url: str, identity: botframework.connector.auth.claims_identity.ClaimsIdentity
      = None) -> botframework.connector.aio._connector_client_async.ConnectorClient'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_connector_client
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_context
  langs:
  - python
  module: botbuilder.core
  name: create_context(activity)
  summary: 'Allows for the overriding of the context object in unit tests and derived
    adapters.

    :param activity:

    :return:'
  syntax:
    content: create_context(activity)
    parameters:
    - id: activity
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_context
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_conversation
  langs:
  - python
  module: botbuilder.core
  name: 'create_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    logic: typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable]
    = None, conversation_parameters: botbuilder.schema._models_py3.ConversationParameters
    = None)'
  summary: 'Starts a new conversation with a user. This is typically used to Direct
    Message (DM) a member

    of a group.

    :param reference:

    :param logic:

    :return:'
  syntax:
    content: 'create_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
      logic: typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable]
      = None, conversation_parameters: botbuilder.schema._models_py3.ConversationParameters
      = None)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_conversation
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.create_token_api_client
  langs:
  - python
  module: botbuilder.core
  name: 'create_token_api_client(service_url: str) -> botframework.connector.token_api._token_api_client.TokenApiClient'
  syntax:
    content: 'create_token_api_client(service_url: str) -> botframework.connector.token_api._token_api_client.TokenApiClient'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.create_token_api_client
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.delete_activity
  langs:
  - python
  module: botbuilder.core
  name: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
    botbuilder.schema._models_py3.ConversationReference)'
  summary: 'Deletes an activity that was previously sent to a channel. It should be
    noted that not all

    channels support this feature.

    :param context:

    :param reference:

    :return:'
  syntax:
    content: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
      botbuilder.schema._models_py3.ConversationReference)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.delete_activity
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
  langs:
  - python
  module: botbuilder.core
  name: 'delete_conversation_member(context: botbuilder.core.turn_context.TurnContext,
    member_id: str) -> None'
  summary: 'Deletes a member from the current conversation.

    :param context:

    :param member_id:

    :return:'
  syntax:
    content: 'delete_conversation_member(context: botbuilder.core.turn_context.TurnContext,
      member_id: str) -> None'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
  langs:
  - python
  module: botbuilder.core
  name: 'emulate_oauth_cards(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str], emulate: bool)'
  syntax:
    content: 'emulate_oauth_cards(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
      str], emulate: bool)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
  langs:
  - python
  module: botbuilder.core
  name: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, resource_urls: typing.List[str]) -> typing.Dict[str, botbuilder.schema._models_py3.TokenResponse]'
  syntax:
    content: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str, resource_urls: typing.List[str]) -> typing.Dict[str, botbuilder.schema._models_py3.TokenResponse]'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_activity_members
  langs:
  - python
  module: botbuilder.core
  name: 'get_activity_members(context: botbuilder.core.turn_context.TurnContext, activity_id:
    str)'
  summary: 'Lists the members of a given activity.

    :param context:

    :param activity_id:

    :return:'
  syntax:
    content: 'get_activity_members(context: botbuilder.core.turn_context.TurnContext,
      activity_id: str)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_activity_members
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_conversation_members
  langs:
  - python
  module: botbuilder.core
  name: 'get_conversation_members(context: botbuilder.core.turn_context.TurnContext)'
  summary: 'Lists the members of a current conversation.

    :param context:

    :return:'
  syntax:
    content: 'get_conversation_members(context: botbuilder.core.turn_context.TurnContext)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_conversation_members
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_conversations
  langs:
  - python
  module: botbuilder.core
  name: 'get_conversations(service_url: str, continuation_token: str = None)'
  summary: 'Lists the Conversations in which this bot has participated for a given
    channel server. The channel server

    returns results in pages and each page will include a *continuationToken* that
    can be used to fetch the next

    page of results from the server.

    :param service_url:

    :param continuation_token:

    :return:'
  syntax:
    content: 'get_conversations(service_url: str, continuation_token: str = None)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_conversations
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
  langs:
  - python
  module: botbuilder.core
  name: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
    connection_name: str) -> str'
  syntax:
    content: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
      connection_name: str) -> str'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_token_status
  langs:
  - python
  module: botbuilder.core
  name: 'get_token_status(context: botbuilder.core.turn_context.TurnContext, user_id:
    str = None, include_filter: str = None) -> typing.List[botframework.connector.token_api.models._models_py3.TokenStatus]'
  syntax:
    content: 'get_token_status(context: botbuilder.core.turn_context.TurnContext,
      user_id: str = None, include_filter: str = None) -> typing.List[botframework.connector.token_api.models._models_py3.TokenStatus]'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_token_status
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.get_user_token
  langs:
  - python
  module: botbuilder.core
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, magic_code: str = None) -> botbuilder.schema._models_py3.TokenResponse'
  syntax:
    content: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str, magic_code: str = None) -> botbuilder.schema._models_py3.TokenResponse'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.get_user_token
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.oauth_api_url
  langs:
  - python
  module: botbuilder.core
  name: 'oauth_api_url(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str]) -> str'
  syntax:
    content: 'oauth_api_url(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
      str]) -> str'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.oauth_api_url
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.parse_request
  langs:
  - python
  module: botbuilder.core
  name: parse_request(req)
  summary: 'Parses and validates request

    :param req:

    :return:'
  syntax:
    content: parse_request(req)
    parameters:
    - id: req
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.parse_request
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.process_activity
  langs:
  - python
  module: botbuilder.core
  name: 'process_activity(req, auth_header: str, logic: typing.Callable)'
  summary: 'Processes an activity received by the bots web server. This includes any
    messages sent from a

    user and is the method that drives what''s often referred to as the bots "Reactive
    Messaging"

    flow.

    :param req:

    :param auth_header:

    :param logic:

    :return:'
  syntax:
    content: 'process_activity(req, auth_header: str, logic: typing.Callable)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.process_activity
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.send_activities
  langs:
  - python
  module: botbuilder.core
  name: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
    typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  syntax:
    content: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
      typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.send_activities
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.sign_out_user
  langs:
  - python
  module: botbuilder.core
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None) -> str'
  syntax:
    content: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str = None, user_id: str = None) -> str'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.sign_out_user
- class: botbuilder.core.BotFrameworkAdapter
  fullName: botbuilder.core.BotFrameworkAdapter.update_activity
  langs:
  - python
  module: botbuilder.core
  name: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
    botbuilder.schema._models_py3.Activity)'
  summary: 'Replaces an activity that was previously sent to a channel. It should
    be noted that not all

    channels support this feature.

    :param context:

    :param activity:

    :return:'
  syntax:
    content: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
      botbuilder.schema._models_py3.Activity)'
  type: method
  uid: botbuilder.core.BotFrameworkAdapter.update_activity
references:
- fullName: botbuilder.core.BotFrameworkAdapter.authenticate_request
  isExternal: false
  name: 'authenticate_request(request: botbuilder.schema._models_py3.Activity, auth_header:
    str) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.authenticate_request
- fullName: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
  isExternal: false
  name: 'check_emulating_oauth_cards(context: botbuilder.core.turn_context.TurnContext)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.check_emulating_oauth_cards
- fullName: botbuilder.core.BotFrameworkAdapter.continue_conversation
  isExternal: false
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.continue_conversation
- fullName: botbuilder.core.BotFrameworkAdapter.create_connector_client
  isExternal: false
  name: 'create_connector_client(service_url: str, identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None) -> botframework.connector.aio._connector_client_async.ConnectorClient'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_connector_client
- fullName: botbuilder.core.BotFrameworkAdapter.create_context
  isExternal: false
  name: create_context(activity)
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_context
- fullName: botbuilder.core.BotFrameworkAdapter.create_conversation
  isExternal: false
  name: 'create_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    logic: typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable]
    = None, conversation_parameters: botbuilder.schema._models_py3.ConversationParameters
    = None)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_conversation
- fullName: botbuilder.core.BotFrameworkAdapter.create_token_api_client
  isExternal: false
  name: 'create_token_api_client(service_url: str) -> botframework.connector.token_api._token_api_client.TokenApiClient'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.create_token_api_client
- fullName: botbuilder.core.BotFrameworkAdapter.delete_activity
  isExternal: false
  name: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
    botbuilder.schema._models_py3.ConversationReference)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.delete_activity
- fullName: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
  isExternal: false
  name: 'delete_conversation_member(context: botbuilder.core.turn_context.TurnContext,
    member_id: str) -> None'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.delete_conversation_member
- fullName: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
  isExternal: false
  name: 'emulate_oauth_cards(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str], emulate: bool)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.emulate_oauth_cards
- fullName: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
  isExternal: false
  name: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, resource_urls: typing.List[str]) -> typing.Dict[str, botbuilder.schema._models_py3.TokenResponse]'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_aad_tokens
- fullName: botbuilder.core.BotFrameworkAdapter.get_activity_members
  isExternal: false
  name: 'get_activity_members(context: botbuilder.core.turn_context.TurnContext, activity_id:
    str)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_activity_members
- fullName: botbuilder.core.BotFrameworkAdapter.get_conversation_members
  isExternal: false
  name: 'get_conversation_members(context: botbuilder.core.turn_context.TurnContext)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_conversation_members
- fullName: botbuilder.core.BotFrameworkAdapter.get_conversations
  isExternal: false
  name: 'get_conversations(service_url: str, continuation_token: str = None)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_conversations
- fullName: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
  isExternal: false
  name: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
    connection_name: str) -> str'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_oauth_sign_in_link
- fullName: botbuilder.core.BotFrameworkAdapter.get_token_status
  isExternal: false
  name: 'get_token_status(context: botbuilder.core.turn_context.TurnContext, user_id:
    str = None, include_filter: str = None) -> typing.List[botframework.connector.token_api.models._models_py3.TokenStatus]'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_token_status
- fullName: botbuilder.core.BotFrameworkAdapter.get_user_token
  isExternal: false
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, magic_code: str = None) -> botbuilder.schema._models_py3.TokenResponse'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.get_user_token
- fullName: botbuilder.core.BotFrameworkAdapter.oauth_api_url
  isExternal: false
  name: 'oauth_api_url(context_or_service_url: typing.Union[botbuilder.core.turn_context.TurnContext,
    str]) -> str'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.oauth_api_url
- fullName: botbuilder.core.BotFrameworkAdapter.parse_request
  isExternal: false
  name: parse_request(req)
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.parse_request
- fullName: botbuilder.core.BotFrameworkAdapter.process_activity
  isExternal: false
  name: 'process_activity(req, auth_header: str, logic: typing.Callable)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.process_activity
- fullName: botbuilder.core.BotFrameworkAdapter.send_activities
  isExternal: false
  name: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
    typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.send_activities
- fullName: botbuilder.core.BotFrameworkAdapter.sign_out_user
  isExternal: false
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None) -> str'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.sign_out_user
- fullName: botbuilder.core.BotFrameworkAdapter.update_activity
  isExternal: false
  name: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
    botbuilder.schema._models_py3.Activity)'
  parent: botbuilder.core.BotFrameworkAdapter
  uid: botbuilder.core.BotFrameworkAdapter.update_activity
