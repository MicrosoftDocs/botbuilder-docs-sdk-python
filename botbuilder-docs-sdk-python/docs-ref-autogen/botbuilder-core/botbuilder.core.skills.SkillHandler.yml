### YamlMime:PythonClass
uid: botbuilder.core.skills.SkillHandler
name: SkillHandler
fullName: botbuilder.core.skills.SkillHandler
module: botbuilder.core.skills
inheritances:
- botbuilder.core.channel_service_handler.ChannelServiceHandler
constructor:
  syntax: 'SkillHandler(adapter: BotAdapter, bot: Bot, conversation_id_factory: ConversationIdFactoryBase,
    credential_provider: CredentialProvider, auth_configuration: AuthenticationConfiguration,
    channel_provider: ChannelProvider | None = None, logger: Logger | None = None)'
  parameters:
  - name: adapter
  - name: bot
  - name: conversation_id_factory
  - name: credential_provider
  - name: auth_configuration
  - name: channel_provider
    defaultValue: None
  - name: logger
    defaultValue: None
methods:
- uid: botbuilder.core.skills.SkillHandler.on_delete_activity
  name: on_delete_activity
  signature: 'async on_delete_activity(claims_identity: ClaimsIdentity, conversation_id:
    str, activity_id: str)'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
- uid: botbuilder.core.skills.SkillHandler.on_reply_to_activity
  name: on_reply_to_activity
  summary: 'reply_to_activity() API for Skill.


    This method allows you to reply to an activity.


    This is slightly different from SendToConversation().

    * SendToConversation(conversation_id) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversation_id,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.

    :param claims_identity: Claims identity for the bot.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>

    :param conversation_id:The conversation ID.

    :type conversation_id: str

    :param activity_id: Activity ID to send.

    :type activity_id: str

    :param activity: Activity to send.

    :type activity: Activity

    :return:'
  signature: 'async on_reply_to_activity(claims_identity: ClaimsIdentity, conversation_id:
    str, activity_id: str, activity: Activity) -> ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.skills.SkillHandler.on_send_to_conversation
  name: on_send_to_conversation
  summary: 'send_to_conversation() API for Skill


    This method allows you to send an activity to the end of a conversation.


    This is slightly different from ReplyToActivity().

    * SendToConversation(conversation_id) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversation_id,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.

    :param claims_identity: Claims identity for the bot.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>

    :param conversation_id:The conversation ID.

    :type conversation_id: str

    :param activity: Activity to send.

    :type activity: Activity

    :return:'
  signature: 'async on_send_to_conversation(claims_identity: ClaimsIdentity, conversation_id:
    str, activity: Activity) -> ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.skills.SkillHandler.on_update_activity
  name: on_update_activity
  signature: 'async on_update_activity(claims_identity: ClaimsIdentity, conversation_id:
    str, activity_id: str, activity: Activity) -> ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
attributes:
- uid: botbuilder.core.skills.SkillHandler.SKILL_CONVERSATION_REFERENCE_KEY
  name: SKILL_CONVERSATION_REFERENCE_KEY
  signature: SKILL_CONVERSATION_REFERENCE_KEY = 'botbuilder.core.skills.SkillConversationReference'
