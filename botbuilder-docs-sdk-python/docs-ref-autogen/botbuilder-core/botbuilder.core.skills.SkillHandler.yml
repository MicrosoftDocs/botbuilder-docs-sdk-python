### YamlMime:PythonClass
uid: botbuilder.core.skills.SkillHandler
name: SkillHandler
fullName: botbuilder.core.skills.SkillHandler
module: botbuilder.core.skills
inheritances:
- botbuilder.core.channel_service_handler.ChannelServiceHandler
constructor:
  syntax: 'SkillHandler(adapter: botbuilder.core.bot_adapter.BotAdapter, bot: botbuilder.core.bot.Bot,
    conversation_id_factory: botbuilder.core.skills.conversation_id_factory.ConversationIdFactoryBase,
    credential_provider: botframework.connector.auth.credential_provider.CredentialProvider,
    auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration,
    channel_provider: botframework.connector.auth.channel_provider.ChannelProvider
    = None, logger: object = None)'
methods:
- uid: botbuilder.core.skills.SkillHandler.on_reply_to_activity
  name: on_reply_to_activity
  summary: 'reply_to_activity() API for Skill.


    This method allows you to reply to an activity.


    This is slightly different from SendToConversation().

    * SendToConversation(conversationId) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.

    :param claims_identity: Claims identity for the bot.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>

    :param conversation_id:The conversation ID.

    :type conversation_id: str

    :param activity: Activity to send.

    :type activity: Activity

    :return:'
  signature: 'on_reply_to_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ResourceResponse'
- uid: botbuilder.core.skills.SkillHandler.on_send_to_conversation
  name: on_send_to_conversation
  summary: 'send_to_conversation() API for Skill


    This method allows you to send an activity to the end of a conversation.


    This is slightly different from ReplyToActivity().

    * SendToConversation(conversationId) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.

    :param claims_identity: Claims identity for the bot.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>

    :param conversation_id:The conversation ID.

    :type conversation_id: str

    :param activity: Activity to send.

    :type activity: Activity

    :return:'
  signature: 'on_send_to_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity: botbuilder.schema._models_py3.Activity) -> botbuilder.schema._models_py3.ResourceResponse'
attributes:
- uid: botbuilder.core.skills.SkillHandler.SKILL_CONVERSATION_REFERENCE_KEY
  name: SKILL_CONVERSATION_REFERENCE_KEY
  signature: SKILL_CONVERSATION_REFERENCE_KEY = 'botbuilder.core.skills.SkillConversationReference'
