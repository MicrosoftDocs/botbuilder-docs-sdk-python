### YamlMime:PythonClass
uid: botbuilder.core.message_factory.MessageFactory
name: MessageFactory
fullName: botbuilder.core.message_factory.MessageFactory
module: botbuilder.core.message_factory
inheritances:
- builtins.object
summary: 'A set of utility functions designed to assist with the formatting of the
  various message types a

  bot can return.'
constructor:
  syntax: MessageFactory()
methods:
- uid: botbuilder.core.message_factory.MessageFactory.attachment
  name: attachment
  summary: "Returns a single message activity containing an attachment.\n\nmessage\
    \ = MessageFactory.attachment(CardFactory.hero_card(HeroCard(title=\u2019White\
    \ T-Shirt\u2019,\n   images=[CardImage(url=\n      \u2018[https://example.com/whiteShirt.jpg](https://example.com/whiteShirt.jpg)\u2019\
    \n      )],\n\n   buttons=[CardAction(title=\u2019buy\u2019)])))\n\nawait context.send_activity(message)"
  signature: 'attachment(attachment: botbuilder.schema._models_py3.Attachment, text:
    Optional[str] = None, speak: Optional[str] = None, input_hint: Optional[str] =
    None)'
  parameters:
  - name: attachment
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.message_factory.MessageFactory.carousel
  name: carousel
  summary: "Returns a message that will display a set of attachments using a carousel\
    \ layout.\n\nmessage = MessageFactory.carousel([CardFactory.hero_card(HeroCard(title=\u2019\
    title1\u2019,\n      images=[CardImage(url=\u2019imageUrl1\u2019)],\n      buttons=[CardAction(title=\u2019\
    button1\u2019)])),\n\n   CardFactory.hero_card(HeroCard(title=\u2019title2\u2019\
    ,\n      images=[CardImage(url=\u2019imageUrl2\u2019)],\n      buttons=[CardAction(title=\u2019\
    button2\u2019)])),\n\n   CardFactory.hero_card(HeroCard(title=\u2019title3\u2019\
    ,\n      images=[CardImage(url=\u2019imageUrl3\u2019)],\n      buttons=[CardAction(title=\u2019\
    button3\u2019)]))])\n\nawait context.send_activity(message)"
  signature: 'carousel(attachments: List[botbuilder.schema._models_py3.Attachment],
    text: Optional[str] = None, speak: Optional[str] = None, input_hint: Optional[str]
    = None)'
  parameters:
  - name: attachments
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.message_factory.MessageFactory.content_url
  name: content_url
  summary: "Returns a message that will display a single image or video to a user.\n\
    \nmessage = MessageFactory.content_url(\u2018[https://example.com/hawaii.jpg](https://example.com/hawaii.jpg)\u2019\
    , \u2018image/jpeg\u2019,\n   \u2018Hawaii Trip\u2019, \u2018A photo from our\
    \ family vacation.\u2019)\n\nawait context.send_activity(message)"
  signature: 'content_url(url: str, content_type: str, name: Optional[str] = None,
    text: Optional[str] = None, speak: Optional[str] = None, input_hint: Optional[str]
    = None)'
  parameters:
  - name: url
    isRequired: true
  - name: content_type
    isRequired: true
  - name: name
    defaultValue: None
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.message_factory.MessageFactory.list
  name: list
  summary: "Returns a message that will display a set of attachments in list form.\n\
    \nmessage = MessageFactory.list([CardFactory.hero_card(HeroCard(title=\u2019title1\u2019\
    ,\n      images=[CardImage(url=\u2019imageUrl1\u2019)],\n      buttons=[CardAction(title=\u2019\
    button1\u2019)])),\n\n   CardFactory.hero_card(HeroCard(title=\u2019title2\u2019\
    ,\n      images=[CardImage(url=\u2019imageUrl2\u2019)],\n      buttons=[CardAction(title=\u2019\
    button2\u2019)])),\n\n   CardFactory.hero_card(HeroCard(title=\u2019title3\u2019\
    ,\n      images=[CardImage(url=\u2019imageUrl3\u2019)],\n      buttons=[CardAction(title=\u2019\
    button3\u2019)]))])\n\nawait context.send_activity(message)"
  signature: 'list(attachments: List[botbuilder.schema._models_py3.Attachment], text:
    Optional[str] = None, speak: Optional[str] = None, input_hint: Optional[str] =
    None)'
  parameters:
  - name: attachments
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.message_factory.MessageFactory.suggested_actions
  name: suggested_actions
  summary: "Returns a message that includes a set of suggested actions and optional\
    \ text.\n\nmessage = MessageFactory.suggested_actions([CardAction(title=\u2019\
    a\u2019, type=ActionTypes.im_back, value=\u2019a\u2019),\n   CardAction(title=\u2019\
    b\u2019, type=ActionTypes.im_back, value=\u2019b\u2019),\n   CardAction(title=\u2019\
    c\u2019, type=ActionTypes.im_back, value=\u2019c\u2019)],\n   \u2018Choose a color\u2019\
    )\n\nawait context.send_activity(message)"
  signature: 'suggested_actions(actions: List[botbuilder.schema._models_py3.CardAction],
    text: Optional[str] = None, speak: Optional[str] = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>)'
  parameters:
  - name: actions
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: InputHints.accepting_input
- uid: botbuilder.core.message_factory.MessageFactory.text
  name: text
  summary: "Returns a simple text message.\n\nmessage = MessageFactory.text(\u2018\
    Greetings from example message\u2019)\nawait context.send_activity(message)"
  signature: 'text(text: str, speak: Optional[str] = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>)'
  parameters:
  - name: text
    isRequired: true
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: InputHints.accepting_input
