### YamlMime:PythonClass
uid: botbuilder.core.adapters.test_adapter.TestFlow
name: TestFlow
fullName: botbuilder.core.adapters.test_adapter.TestFlow
module: botbuilder.core.adapters.test_adapter
inheritances:
- builtins.object
summary: 'INTERNAL: creates a TestFlow instance.

  :param previous:

  :param adapter:'
constructor:
  syntax: 'TestFlow(previous: Callable, adapter: TestAdapter)'
  parameters:
  - name: previous
  - name: adapter
methods:
- uid: botbuilder.core.adapters.test_adapter.TestFlow.assert_no_reply
  name: assert_no_reply
  summary: 'Generates an assertion if the bot responds when no response is expected.

    :param description:

    :param timeout:'
  signature: async assert_no_reply(description=None, timeout=None) -> TestFlow
  parameters:
  - name: description
    defaultValue: None
  - name: timeout
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestFlow.assert_reply
  name: assert_reply
  summary: 'Generates an assertion if the bots response doesn''t match the expected
    text/activity.

    :param expected:

    :param description:

    :param timeout:

    :param is_substring:

    :return:'
  signature: 'async assert_reply(expected: str | Activity | Callable[[Activity, str],
    None], description=None, timeout=None, is_substring=False) -> TestFlow'
  parameters:
  - name: expected
    isRequired: true
  - name: description
    defaultValue: None
  - name: timeout
    defaultValue: None
  - name: is_substring
    defaultValue: 'False'
- uid: botbuilder.core.adapters.test_adapter.TestFlow.send
  name: send
  summary: 'Sends something to the bot.

    :param user_says:

    :return:'
  signature: async send(user_says) -> TestFlow
  parameters:
  - name: user_says
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestFlow.test
  name: test
  summary: 'Send something to the bot and expects the bot to return with a given reply.
    This is simply a

    wrapper around calls to *send()* and *assertReply()*. This is such a common pattern
    that a

    helper is provided.

    :param user_says:

    :param expected:

    :param description:

    :param timeout:

    :return:'
  signature: async test(user_says, expected, description=None, timeout=None) -> TestFlow
  parameters:
  - name: user_says
    isRequired: true
  - name: expected
    isRequired: true
  - name: description
    defaultValue: None
  - name: timeout
    defaultValue: None
