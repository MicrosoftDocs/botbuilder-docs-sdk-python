### YamlMime:PythonClass
uid: botbuilder.core.adapters.test_adapter.TestAdapter
name: TestAdapter
fullName: botbuilder.core.adapters.test_adapter.TestAdapter
module: botbuilder.core.adapters.test_adapter
summary: 'Creates a new TestAdapter instance.

  :param logic:

  :param conversation: A reference to the conversation to begin the adapter state
  with.'
constructor:
  syntax: 'TestAdapter(logic: Coroutine = None, template_or_conversation: Activity
    | ConversationReference = None, send_trace_activities: bool = False)'
  parameters:
  - name: logic
    defaultValue: None
  - name: template_or_conversation
    defaultValue: None
  - name: send_trace_activities
    defaultValue: 'False'
methods:
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.add_exchangeable_token
  name: add_exchangeable_token
  signature: 'add_exchangeable_token(connection_name: str, channel_id: str, user_id:
    str, exchangeable_item: str, token: str)'
  parameters:
  - name: connection_name
    isRequired: true
  - name: channel_id
    isRequired: true
  - name: user_id
    isRequired: true
  - name: exchangeable_item
    isRequired: true
  - name: token
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.add_user_token
  name: add_user_token
  signature: 'add_user_token(connection_name: str, channel_id: str, user_id: str,
    token: str, magic_code: str = None)'
  parameters:
  - name: connection_name
    isRequired: true
  - name: channel_id
    isRequired: true
  - name: user_id
    isRequired: true
  - name: token
    isRequired: true
  - name: magic_code
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.continue_conversation
  name: continue_conversation
  summary: 'The *TestAdapter* just calls parent implementation.

    :param reference:

    :param callback:

    :param bot_id:

    :param claims_identity:

    :return:'
  signature: 'async continue_conversation(reference: ConversationReference, callback:
    Callable, bot_id: str = None, claims_identity: ClaimsIdentity = None, audience:
    str = None)'
  parameters:
  - name: reference
    isRequired: true
  - name: callback
    isRequired: true
  - name: bot_id
    defaultValue: None
  - name: claims_identity
    defaultValue: None
  - name: audience
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.create_conversation
  name: create_conversation
  signature: 'async create_conversation(channel_id: str, callback: Callable)'
  parameters:
  - name: channel_id
    isRequired: true
  - name: callback
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.create_conversation_reference
  name: create_conversation_reference
  signature: 'static create_conversation_reference(name: str, user: str = ''User1'',
    bot: str = ''Bot'') -> ConversationReference'
  parameters:
  - name: name
    isRequired: true
  - name: user
    defaultValue: User1
  - name: bot
    defaultValue: Bot
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.create_turn_context
  name: create_turn_context
  signature: 'create_turn_context(activity: Activity) -> TurnContext'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.delete_activity
  name: delete_activity
  summary: 'INTERNAL: called by the logic under test to delete an existing activity.
    These are simply

    pushed onto a [deletedActivities](#deletedactivities) array for inspection after
    the turn

    completes.

    :param reference:

    :return:'
  signature: 'async delete_activity(context, reference: ConversationReference)'
  parameters:
  - name: context
    isRequired: true
  - name: reference
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token
  name: exchange_token
  signature: 'async exchange_token(turn_context: TurnContext, connection_name: str,
    user_id: str, exchange_request: TokenExchangeRequest) -> TokenResponse'
  parameters:
  - name: turn_context
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: user_id
    isRequired: true
  - name: exchange_request
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token_from_credentials
  name: exchange_token_from_credentials
  signature: 'async exchange_token_from_credentials(turn_context: TurnContext, oauth_app_credentials:
    AppCredentials, connection_name: str, user_id: str, exchange_request: TokenExchangeRequest)
    -> TokenResponse'
  parameters:
  - name: turn_context
    isRequired: true
  - name: oauth_app_credentials
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: user_id
    isRequired: true
  - name: exchange_request
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_aad_tokens
  name: get_aad_tokens
  signature: 'async get_aad_tokens(context: TurnContext, connection_name: str, resource_urls:
    List[str], user_id: str = None, oauth_app_credentials: AppCredentials = None)
    -> Dict[str, TokenResponse]'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: resource_urls
    isRequired: true
  - name: user_id
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_next_activity
  name: get_next_activity
  signature: get_next_activity() -> Activity
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_oauth_sign_in_link
  name: get_oauth_sign_in_link
  signature: 'async get_oauth_sign_in_link(context: TurnContext, connection_name:
    str, final_redirect: str = None, oauth_app_credentials: AppCredentials = None)
    -> str'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: final_redirect
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user
  name: get_sign_in_resource_from_user
  signature: 'async get_sign_in_resource_from_user(turn_context: TurnContext, connection_name:
    str, user_id: str, final_redirect: str = None) -> SignInUrlResponse'
  parameters:
  - name: turn_context
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: user_id
    isRequired: true
  - name: final_redirect
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user_and_credentials
  name: get_sign_in_resource_from_user_and_credentials
  signature: 'async get_sign_in_resource_from_user_and_credentials(turn_context: TurnContext,
    oauth_app_credentials: AppCredentials, connection_name: str, user_id: str, final_redirect:
    str = None) -> SignInUrlResponse'
  parameters:
  - name: turn_context
    isRequired: true
  - name: oauth_app_credentials
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: user_id
    isRequired: true
  - name: final_redirect
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_token_status
  name: get_token_status
  signature: 'async get_token_status(context: TurnContext, connection_name: str =
    None, user_id: str = None, include_filter: str = None, oauth_app_credentials:
    AppCredentials = None) -> Dict[str, TokenResponse]'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    defaultValue: None
  - name: user_id
    defaultValue: None
  - name: include_filter
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_user_token
  name: get_user_token
  signature: 'async get_user_token(context: TurnContext, connection_name: str, magic_code:
    str = None, oauth_app_credentials: AppCredentials = None) -> TokenResponse'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: magic_code
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.process_activity
  name: process_activity
  signature: 'async process_activity(activity: Activity, logic: Callable[[TurnContext],
    Awaitable])'
  parameters:
  - name: activity
    isRequired: true
  - name: logic
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.receive_activity
  name: receive_activity
  summary: 'INTERNAL: called by a *TestFlow* instance to simulate a user sending a
    message to the bot.

    This will cause the adapters middleware pipe to be run and it''s logic to be called.

    :param activity:

    :return:'
  signature: async receive_activity(activity)
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.send
  name: send
  summary: 'Sends something to the bot. This returns a new *TestFlow* instance which
    can be used to add

    additional steps for inspecting the bots reply and then sending additional activities.

    :param user_says:

    :return: A new instance of the TestFlow object'
  signature: async send(user_says) -> object
  parameters:
  - name: user_says
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.send_activities
  name: send_activities
  summary: 'INTERNAL: called by the logic under test to send a set of activities.
    These will be buffered

    to the current *TestFlow* instance for comparison against the expected results.

    :param context:

    :param activities:

    :return:'
  signature: 'async send_activities(context, activities: List[Activity]) -> List[ResourceResponse]'
  parameters:
  - name: context
    isRequired: true
  - name: activities
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.sign_out_user
  name: sign_out_user
  signature: 'async sign_out_user(context: TurnContext, connection_name: str = None,
    user_id: str = None, oauth_app_credentials: AppCredentials = None)'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    defaultValue: None
  - name: user_id
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.test
  name: test
  summary: 'Send something to the bot and expects the bot to return with a given reply.
    This is simply a

    wrapper around calls to *send()* and *assertReply()*. This is such a common pattern
    that a

    helper is provided.

    :param user_says:

    :param expected:

    :param description:

    :param timeout:

    :return:'
  signature: async test(user_says, expected, description=None, timeout=None) -> TestFlow
  parameters:
  - name: user_says
    isRequired: true
  - name: expected
    isRequired: true
  - name: description
    defaultValue: None
  - name: timeout
    defaultValue: None
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.tests
  name: tests
  summary: 'Support multiple test cases without having to manually call *test()* repeatedly.
    This is a

    convenience layer around the *test()*. Valid args are either lists or tuples of
    parameters

    :param args:

    :return:'
  signature: async tests(*args)
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.throw_on_exchange_request
  name: throw_on_exchange_request
  signature: 'throw_on_exchange_request(connection_name: str, channel_id: str, user_id:
    str, exchangeable_item: str)'
  parameters:
  - name: connection_name
    isRequired: true
  - name: channel_id
    isRequired: true
  - name: user_id
    isRequired: true
  - name: exchangeable_item
    isRequired: true
- uid: botbuilder.core.adapters.test_adapter.TestAdapter.update_activity
  name: update_activity
  summary: 'INTERNAL: called by the logic under test to replace an existing activity.
    These are simply

    pushed onto an [updatedActivities](#updatedactivities) array for inspection after
    the turn

    completes.

    :param activity:

    :return:'
  signature: 'async update_activity(context, activity: Activity)'
  parameters:
  - name: context
    isRequired: true
  - name: activity
    isRequired: true
