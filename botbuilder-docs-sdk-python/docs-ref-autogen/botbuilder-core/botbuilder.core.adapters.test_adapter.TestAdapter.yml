### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.adapters.test_adapter.TestAdapter.add_exchangeable_token
  - botbuilder.core.adapters.test_adapter.TestAdapter.add_user_token
  - botbuilder.core.adapters.test_adapter.TestAdapter.continue_conversation
  - botbuilder.core.adapters.test_adapter.TestAdapter.delete_activity
  - botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token
  - botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token_from_credentials
  - botbuilder.core.adapters.test_adapter.TestAdapter.get_aad_tokens
  - botbuilder.core.adapters.test_adapter.TestAdapter.get_next_activity
  - botbuilder.core.adapters.test_adapter.TestAdapter.get_oauth_sign_in_link
  - botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user
  - botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user_and_credentials
  - botbuilder.core.adapters.test_adapter.TestAdapter.get_token_status
  - botbuilder.core.adapters.test_adapter.TestAdapter.get_user_token
  - botbuilder.core.adapters.test_adapter.TestAdapter.process_activity
  - botbuilder.core.adapters.test_adapter.TestAdapter.receive_activity
  - botbuilder.core.adapters.test_adapter.TestAdapter.send
  - botbuilder.core.adapters.test_adapter.TestAdapter.send_activities
  - botbuilder.core.adapters.test_adapter.TestAdapter.sign_out_user
  - botbuilder.core.adapters.test_adapter.TestAdapter.test
  - botbuilder.core.adapters.test_adapter.TestAdapter.tests
  - botbuilder.core.adapters.test_adapter.TestAdapter.update_activity
  class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.bot_adapter.BotAdapter
  - inheritance:
    - inheritance:
      - inheritance:
        - type: builtins.object
        type: abc.ABC
      type: botbuilder.core.user_token_provider.UserTokenProvider
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.extended_user_token_provider.ExtendedUserTokenProvider
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: TestAdapter
  summary: ''
  syntax:
    content: 'TestAdapter(logic: typing.Coroutine = None, template_or_conversation:
      typing.Union[botbuilder.schema._models_py3.Activity, botbuilder.schema._models_py3.ConversationReference]
      = None, send_trace_activities: bool = False)'
  type: class
  uid: botbuilder.core.adapters.test_adapter.TestAdapter
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.add_exchangeable_token
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'add_exchangeable_token(connection_name: str, channel_id: str, user_id: str,
    exchangeable_item: str, token: str)'
  syntax:
    content: 'add_exchangeable_token(connection_name: str, channel_id: str, user_id:
      str, exchangeable_item: str, token: str)'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.add_exchangeable_token
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.add_user_token
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'add_user_token(connection_name: str, channel_id: str, user_id: str, token:
    str, magic_code: str = None)'
  syntax:
    content: 'add_user_token(connection_name: str, channel_id: str, user_id: str,
      token: str, magic_code: str = None)'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.add_user_token
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.continue_conversation
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None, audience: str = None)'
  summary: 'The *TestAdapter* just calls parent implementation.

    :param reference:

    :param callback:

    :param bot_id:

    :param claims_identity:

    :return:'
  syntax:
    content: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
      callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
      = None, audience: str = None)'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.continue_conversation
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.delete_activity
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'delete_activity(context, reference: botbuilder.schema._models_py3.ConversationReference)'
  summary: 'INTERNAL: called by the logic under test to delete an existing activity.
    These are simply

    pushed onto a [deletedActivities](#deletedactivities) array for inspection after
    the turn

    completes.

    :param reference:

    :return:'
  syntax:
    content: 'delete_activity(context, reference: botbuilder.schema._models_py3.ConversationReference)'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.delete_activity
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'exchange_token(turn_context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, user_id: str, exchange_request: botframework.connector.token_api.models._models_py3.TokenExchangeRequest)
    -> botbuilder.schema._models_py3.TokenResponse'
  syntax:
    content: 'exchange_token(turn_context: botbuilder.core.turn_context.TurnContext,
      connection_name: str, user_id: str, exchange_request: botframework.connector.token_api.models._models_py3.TokenExchangeRequest)
      -> botbuilder.schema._models_py3.TokenResponse'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token_from_credentials
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'exchange_token_from_credentials(turn_context: botbuilder.core.turn_context.TurnContext,
    oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials,
    connection_name: str, user_id: str, exchange_request: botframework.connector.token_api.models._models_py3.TokenExchangeRequest)
    -> botbuilder.schema._models_py3.TokenResponse'
  syntax:
    content: 'exchange_token_from_credentials(turn_context: botbuilder.core.turn_context.TurnContext,
      oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials,
      connection_name: str, user_id: str, exchange_request: botframework.connector.token_api.models._models_py3.TokenExchangeRequest)
      -> botbuilder.schema._models_py3.TokenResponse'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token_from_credentials
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_aad_tokens
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, resource_urls: typing.List[str], user_id: str = None, oauth_app_credentials:
    botframework.connector.auth.app_credentials.AppCredentials = None) -> typing.Dict[str,
    botbuilder.schema._models_py3.TokenResponse]'
  syntax:
    content: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str, resource_urls: typing.List[str], user_id: str = None, oauth_app_credentials:
      botframework.connector.auth.app_credentials.AppCredentials = None) -> typing.Dict[str,
      botbuilder.schema._models_py3.TokenResponse]'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_aad_tokens
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_next_activity
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: get_next_activity() -> botbuilder.schema._models_py3.Activity
  syntax:
    content: get_next_activity() -> botbuilder.schema._models_py3.Activity
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_next_activity
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_oauth_sign_in_link
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
    connection_name: str, final_redirect: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
    = None) -> str'
  syntax:
    content: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
      connection_name: str, final_redirect: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
      = None) -> str'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_oauth_sign_in_link
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'get_sign_in_resource_from_user(turn_context: botbuilder.core.turn_context.TurnContext,
    connection_name: str, user_id: str, final_redirect: str = None) -> botframework.connector.token_api.models._models_py3.SignInUrlResponse'
  syntax:
    content: 'get_sign_in_resource_from_user(turn_context: botbuilder.core.turn_context.TurnContext,
      connection_name: str, user_id: str, final_redirect: str = None) -> botframework.connector.token_api.models._models_py3.SignInUrlResponse'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user_and_credentials
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'get_sign_in_resource_from_user_and_credentials(turn_context: botbuilder.core.turn_context.TurnContext,
    oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials,
    connection_name: str, user_id: str, final_redirect: str = None) -> botframework.connector.token_api.models._models_py3.SignInUrlResponse'
  syntax:
    content: 'get_sign_in_resource_from_user_and_credentials(turn_context: botbuilder.core.turn_context.TurnContext,
      oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials,
      connection_name: str, user_id: str, final_redirect: str = None) -> botframework.connector.token_api.models._models_py3.SignInUrlResponse'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user_and_credentials
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_token_status
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'get_token_status(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None, include_filter: str = None, oauth_app_credentials:
    botframework.connector.auth.app_credentials.AppCredentials = None) -> typing.Dict[str,
    botbuilder.schema._models_py3.TokenResponse]'
  syntax:
    content: 'get_token_status(context: botbuilder.core.turn_context.TurnContext,
      connection_name: str = None, user_id: str = None, include_filter: str = None,
      oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
      = None) -> typing.Dict[str, botbuilder.schema._models_py3.TokenResponse]'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_token_status
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_user_token
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, magic_code: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
    = None) -> botbuilder.schema._models_py3.TokenResponse'
  syntax:
    content: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str, magic_code: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
      = None) -> botbuilder.schema._models_py3.TokenResponse'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_user_token
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.process_activity
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'process_activity(activity: botbuilder.schema._models_py3.Activity, logic:
    typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable])'
  syntax:
    content: 'process_activity(activity: botbuilder.schema._models_py3.Activity, logic:
      typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable])'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.process_activity
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.receive_activity
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: receive_activity(activity)
  summary: 'INTERNAL: called by a *TestFlow* instance to simulate a user sending a
    message to the bot.

    This will cause the adapters middleware pipe to be run and it''s logic to be called.

    :param activity:

    :return:'
  syntax:
    content: receive_activity(activity)
    parameters:
    - id: activity
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.receive_activity
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.send
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: send(user_says) -> object
  summary: 'Sends something to the bot. This returns a new *TestFlow* instance which
    can be used to add

    additional steps for inspecting the bots reply and then sending additional activities.

    :param user_says:

    :return: A new instance of the TestFlow object'
  syntax:
    content: send(user_says) -> object
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.send
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.send_activities
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'send_activities(context, activities: typing.List[botbuilder.schema._models_py3.Activity])
    -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  summary: 'INTERNAL: called by the logic under test to send a set of activities.
    These will be buffered

    to the current *TestFlow* instance for comparison against the expected results.

    :param context:

    :param activities:

    :return:'
  syntax:
    content: 'send_activities(context, activities: typing.List[botbuilder.schema._models_py3.Activity])
      -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.send_activities
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.sign_out_user
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
    = None)'
  syntax:
    content: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
      str = None, user_id: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
      = None)'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.sign_out_user
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.test
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: test(user_says, expected, description=None, timeout=None) -> botbuilder.core.adapters.test_adapter.TestFlow
  summary: 'Send something to the bot and expects the bot to return with a given reply.
    This is simply a

    wrapper around calls to *send()* and *assertReply()*. This is such a common pattern
    that a

    helper is provided.

    :param user_says:

    :param expected:

    :param description:

    :param timeout:

    :return:'
  syntax:
    content: test(user_says, expected, description=None, timeout=None) -> botbuilder.core.adapters.test_adapter.TestFlow
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.test
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.tests
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: tests(*args)
  summary: 'Support multiple test cases without having to manually call *test()* repeatedly.
    This is a

    convenience layer around the *test()*. Valid args are either lists or tuples of
    parameters

    :param args:

    :return:'
  syntax:
    content: tests(*args)
    parameters: []
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.tests
- class: botbuilder.core.adapters.test_adapter.TestAdapter
  fullName: botbuilder.core.adapters.test_adapter.TestAdapter.update_activity
  langs:
  - python
  module: botbuilder.core.adapters.test_adapter
  name: 'update_activity(context, activity: botbuilder.schema._models_py3.Activity)'
  summary: 'INTERNAL: called by the logic under test to replace an existing activity.
    These are simply

    pushed onto an [updatedActivities](#updatedactivities) array for inspection after
    the turn

    completes.

    :param activity:

    :return:'
  syntax:
    content: 'update_activity(context, activity: botbuilder.schema._models_py3.Activity)'
  type: method
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.update_activity
references:
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.add_exchangeable_token
  isExternal: false
  name: 'add_exchangeable_token(connection_name: str, channel_id: str, user_id: str,
    exchangeable_item: str, token: str)'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.add_exchangeable_token
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.add_user_token
  isExternal: false
  name: 'add_user_token(connection_name: str, channel_id: str, user_id: str, token:
    str, magic_code: str = None)'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.add_user_token
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.continue_conversation
  isExternal: false
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None, audience: str = None)'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.continue_conversation
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.delete_activity
  isExternal: false
  name: 'delete_activity(context, reference: botbuilder.schema._models_py3.ConversationReference)'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.delete_activity
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token
  isExternal: false
  name: 'exchange_token(turn_context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, user_id: str, exchange_request: botframework.connector.token_api.models._models_py3.TokenExchangeRequest)
    -> botbuilder.schema._models_py3.TokenResponse'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token_from_credentials
  isExternal: false
  name: 'exchange_token_from_credentials(turn_context: botbuilder.core.turn_context.TurnContext,
    oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials,
    connection_name: str, user_id: str, exchange_request: botframework.connector.token_api.models._models_py3.TokenExchangeRequest)
    -> botbuilder.schema._models_py3.TokenResponse'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.exchange_token_from_credentials
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_aad_tokens
  isExternal: false
  name: 'get_aad_tokens(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, resource_urls: typing.List[str], user_id: str = None, oauth_app_credentials:
    botframework.connector.auth.app_credentials.AppCredentials = None) -> typing.Dict[str,
    botbuilder.schema._models_py3.TokenResponse]'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_aad_tokens
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_next_activity
  isExternal: false
  name: get_next_activity() -> botbuilder.schema._models_py3.Activity
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_next_activity
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_oauth_sign_in_link
  isExternal: false
  name: 'get_oauth_sign_in_link(context: botbuilder.core.turn_context.TurnContext,
    connection_name: str, final_redirect: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
    = None) -> str'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_oauth_sign_in_link
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user
  isExternal: false
  name: 'get_sign_in_resource_from_user(turn_context: botbuilder.core.turn_context.TurnContext,
    connection_name: str, user_id: str, final_redirect: str = None) -> botframework.connector.token_api.models._models_py3.SignInUrlResponse'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user_and_credentials
  isExternal: false
  name: 'get_sign_in_resource_from_user_and_credentials(turn_context: botbuilder.core.turn_context.TurnContext,
    oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials,
    connection_name: str, user_id: str, final_redirect: str = None) -> botframework.connector.token_api.models._models_py3.SignInUrlResponse'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_sign_in_resource_from_user_and_credentials
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_token_status
  isExternal: false
  name: 'get_token_status(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None, include_filter: str = None, oauth_app_credentials:
    botframework.connector.auth.app_credentials.AppCredentials = None) -> typing.Dict[str,
    botbuilder.schema._models_py3.TokenResponse]'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_token_status
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.get_user_token
  isExternal: false
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str, magic_code: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
    = None) -> botbuilder.schema._models_py3.TokenResponse'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.get_user_token
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.process_activity
  isExternal: false
  name: 'process_activity(activity: botbuilder.schema._models_py3.Activity, logic:
    typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable])'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.process_activity
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.receive_activity
  isExternal: false
  name: receive_activity(activity)
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.receive_activity
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.send
  isExternal: false
  name: send(user_says) -> object
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.send
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.send_activities
  isExternal: false
  name: 'send_activities(context, activities: typing.List[botbuilder.schema._models_py3.Activity])
    -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.send_activities
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.sign_out_user
  isExternal: false
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext, connection_name:
    str = None, user_id: str = None, oauth_app_credentials: botframework.connector.auth.app_credentials.AppCredentials
    = None)'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.sign_out_user
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.test
  isExternal: false
  name: test(user_says, expected, description=None, timeout=None) -> botbuilder.core.adapters.test_adapter.TestFlow
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.test
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.tests
  isExternal: false
  name: tests(*args)
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.tests
- fullName: botbuilder.core.adapters.test_adapter.TestAdapter.update_activity
  isExternal: false
  name: 'update_activity(context, activity: botbuilder.schema._models_py3.Activity)'
  parent: botbuilder.core.adapters.test_adapter.TestAdapter
  uid: botbuilder.core.adapters.test_adapter.TestAdapter.update_activity
