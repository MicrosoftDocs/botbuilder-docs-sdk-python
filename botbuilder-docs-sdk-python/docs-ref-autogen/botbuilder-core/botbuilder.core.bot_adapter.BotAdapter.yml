### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.bot_adapter.BotAdapter.continue_conversation
  - botbuilder.core.bot_adapter.BotAdapter.delete_activity
  - botbuilder.core.bot_adapter.BotAdapter.run_pipeline
  - botbuilder.core.bot_adapter.BotAdapter.send_activities
  - botbuilder.core.bot_adapter.BotAdapter.update_activity
  - botbuilder.core.bot_adapter.BotAdapter.use
  - botbuilder.core.bot_adapter.BotAdapter.BOT_CALLBACK_HANDLER_KEY
  - botbuilder.core.bot_adapter.BotAdapter.BOT_CONNECTOR_CLIENT_KEY
  - botbuilder.core.bot_adapter.BotAdapter.BOT_IDENTITY_KEY
  - botbuilder.core.bot_adapter.BotAdapter.BOT_OAUTH_SCOPE_KEY
  class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter
  inheritance:
  - inheritance:
    - type: builtins.object
    type: abc.ABC
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: BotAdapter
  summary: ''
  syntax:
    content: 'BotAdapter(on_turn_error: typing.Callable[[botbuilder.core.turn_context.TurnContext,
      Exception], typing.Awaitable] = None)'
  type: class
  uid: botbuilder.core.bot_adapter.BotAdapter
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.continue_conversation
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None, audience: str = None)'
  namewithoutparameters: continue_conversation
  summary: 'Sends a proactive message to a conversation. Call this method to proactively
    send a message to a conversation.

    Most channels require a user to initiate a conversation with a bot before the
    bot can send activities

    to the user.



    single tenant the Adapters (Console, Test, etc) but is critical to the BotFrameworkAdapter

    which is multi-tenant aware.

    :param reference: A reference to the conversation to continue.

    :type reference: <xref:botbuilder.schema.ConversationReference>

    :param callback: The method to call for the resulting bot turn.

    :type callback: <xref:typing.Callable>

    :param claims_identity: A <xref:botframework.connector.auth.ClaimsIdentity> for
    the conversation.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>

    :param audience:A value signifying the recipient of the proactive message.

    :type audience: str'
  syntax:
    content: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
      callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
      = None, audience: str = None)'
    parameters:
    - description: The application ID of the bot. This parameter is ignored in
      id: bot_id
      isRequired: true
  type: method
  uid: botbuilder.core.bot_adapter.BotAdapter.continue_conversation
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.delete_activity
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
    botbuilder.schema._models_py3.ConversationReference)'
  namewithoutparameters: delete_activity
  summary: Deletes an existing activity.
  syntax:
    content: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
      botbuilder.schema._models_py3.ConversationReference)'
    parameters:
    - description: The context object for the turn.
      id: context
      isRequired: true
      type:
      - botbuilder.core.bot_adapter.TurnContext
    - description: Conversation reference for the activity to delete.
      id: reference
      isRequired: true
      type:
      - botbuilder.schema.ConversationReference
  type: method
  uid: botbuilder.core.bot_adapter.BotAdapter.delete_activity
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.run_pipeline
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: 'run_pipeline(context: botbuilder.core.turn_context.TurnContext, callback:
    typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable] =
    None)'
  namewithoutparameters: run_pipeline
  summary: 'Called by the parent class to run the adapters middleware set and calls
    the passed in *callback()* handler at

    the end of the chain.'
  syntax:
    content: 'run_pipeline(context: botbuilder.core.turn_context.TurnContext, callback:
      typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable]
      = None)'
    parameters:
    - description: The context object for the turn.
      id: context
      isRequired: true
      type:
      - botbuilder.core.bot_adapter.TurnContext
    - description: A callback method to run at the end of the pipeline.
      id: callback
      isRequired: true
      type:
      - typing.Callable[[TurnContext], Awaitable]
  type: method
  uid: botbuilder.core.bot_adapter.BotAdapter.run_pipeline
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.send_activities
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
    typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  namewithoutparameters: send_activities
  summary: Sends a set of activities to the user. An array of responses from the server
    will be returned.
  syntax:
    content: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
      typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
    parameters:
    - description: The context object for the turn.
      id: context
      isRequired: true
      type:
      - botbuilder.core.bot_adapter.TurnContext
    - description: The activities to send.
      id: activities
      isRequired: true
      type:
      - typing.List[Activity]
  type: method
  uid: botbuilder.core.bot_adapter.BotAdapter.send_activities
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.update_activity
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
    botbuilder.schema._models_py3.Activity)'
  namewithoutparameters: update_activity
  summary: Replaces an existing activity.
  syntax:
    content: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
      botbuilder.schema._models_py3.Activity)'
    parameters:
    - description: The context object for the turn.
      id: context
      isRequired: true
      type:
      - botbuilder.core.bot_adapter.TurnContext
    - description: New replacement activity.
      id: activity
      isRequired: true
      type:
      - botbuilder.schema.Activity
  type: method
  uid: botbuilder.core.bot_adapter.BotAdapter.update_activity
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.use
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: use(middleware)
  namewithoutparameters: use
  summary: Registers a middleware handler with the adapter.
  syntax:
    content: use(middleware)
    parameters:
    - description: The middleware to register.
      id: middleware
      isRequired: true
  type: method
  uid: botbuilder.core.bot_adapter.BotAdapter.use
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_CALLBACK_HANDLER_KEY
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: BOT_CALLBACK_HANDLER_KEY
  syntax:
    content: BOT_CALLBACK_HANDLER_KEY = 'BotCallbackHandler'
  type: attribute
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_CALLBACK_HANDLER_KEY
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_CONNECTOR_CLIENT_KEY
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: BOT_CONNECTOR_CLIENT_KEY
  syntax:
    content: BOT_CONNECTOR_CLIENT_KEY = 'ConnectorClient'
  type: attribute
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_CONNECTOR_CLIENT_KEY
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_IDENTITY_KEY
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: BOT_IDENTITY_KEY
  syntax:
    content: BOT_IDENTITY_KEY = 'BotIdentity'
  type: attribute
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_IDENTITY_KEY
- class: botbuilder.core.bot_adapter.BotAdapter
  fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_OAUTH_SCOPE_KEY
  langs:
  - python
  module: botbuilder.core.bot_adapter
  name: BOT_OAUTH_SCOPE_KEY
  syntax:
    content: BOT_OAUTH_SCOPE_KEY = 'botbuilder.core.BotAdapter.OAuthScope'
  type: attribute
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_OAUTH_SCOPE_KEY
references:
- fullName: botbuilder.core.bot_adapter.BotAdapter.continue_conversation
  isExternal: false
  name: 'continue_conversation(reference: botbuilder.schema._models_py3.ConversationReference,
    callback: typing.Callable, bot_id: str = None, claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity
    = None, audience: str = None)'
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.continue_conversation
- fullName: botbuilder.core.bot_adapter.BotAdapter.delete_activity
  isExternal: false
  name: 'delete_activity(context: botbuilder.core.turn_context.TurnContext, reference:
    botbuilder.schema._models_py3.ConversationReference)'
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.delete_activity
- fullName: botbuilder.core.bot_adapter.BotAdapter.run_pipeline
  isExternal: false
  name: 'run_pipeline(context: botbuilder.core.turn_context.TurnContext, callback:
    typing.Callable[botbuilder.core.turn_context.TurnContext, typing.Awaitable] =
    None)'
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.run_pipeline
- fullName: botbuilder.core.bot_adapter.BotAdapter.send_activities
  isExternal: false
  name: 'send_activities(context: botbuilder.core.turn_context.TurnContext, activities:
    typing.List[botbuilder.schema._models_py3.Activity]) -> typing.List[botbuilder.schema._models_py3.ResourceResponse]'
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.send_activities
- fullName: botbuilder.core.bot_adapter.BotAdapter.update_activity
  isExternal: false
  name: 'update_activity(context: botbuilder.core.turn_context.TurnContext, activity:
    botbuilder.schema._models_py3.Activity)'
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.update_activity
- fullName: botbuilder.core.bot_adapter.BotAdapter.use
  isExternal: false
  name: use(middleware)
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.use
- fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_CALLBACK_HANDLER_KEY
  isExternal: false
  name: BOT_CALLBACK_HANDLER_KEY
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_CALLBACK_HANDLER_KEY
- fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_CONNECTOR_CLIENT_KEY
  isExternal: false
  name: BOT_CONNECTOR_CLIENT_KEY
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_CONNECTOR_CLIENT_KEY
- fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_IDENTITY_KEY
  isExternal: false
  name: BOT_IDENTITY_KEY
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_IDENTITY_KEY
- fullName: botbuilder.core.bot_adapter.BotAdapter.BOT_OAUTH_SCOPE_KEY
  isExternal: false
  name: BOT_OAUTH_SCOPE_KEY
  parent: botbuilder.core.bot_adapter.BotAdapter
  uid: botbuilder.core.bot_adapter.BotAdapter.BOT_OAUTH_SCOPE_KEY
- fullName: typing.Callable[[TurnContext], Awaitable]
  name: Callable[[TurnContext], Awaitable]
  spec.python:
  - fullName: typing.Callable
    name: Callable
    uid: typing.Callable
  - fullName: '['
    name: '['
  - fullName: '['
    name: '['
  - fullName: TurnContext
    name: TurnContext
    uid: TurnContext
  - fullName: ']'
    name: ']'
  - fullName: ', '
    name: ', '
  - fullName: Awaitable
    name: Awaitable
    uid: Awaitable
  - fullName: ']'
    name: ']'
  uid: typing.Callable[[TurnContext], Awaitable]
- fullName: typing.List[Activity]
  name: List[Activity]
  spec.python:
  - fullName: typing.List
    name: List
    uid: typing.List
  - fullName: '['
    name: '['
  - fullName: Activity
    name: Activity
    uid: Activity
  - fullName: ']'
    name: ']'
  uid: typing.List[Activity]
