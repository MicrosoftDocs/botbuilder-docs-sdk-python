### YamlMime:PythonClass
uid: botbuilder.core.bot_adapter.BotAdapter
name: BotAdapter
fullName: botbuilder.core.bot_adapter.BotAdapter
module: botbuilder.core.bot_adapter
constructor:
  syntax: 'BotAdapter(on_turn_error: Callable[[TurnContext, Exception], Awaitable]
    = None)'
  parameters:
  - name: on_turn_error
    defaultValue: None
methods:
- uid: botbuilder.core.bot_adapter.BotAdapter.continue_conversation
  name: continue_conversation
  summary: 'Sends a proactive message to a conversation. Call this method to proactively
    send a message to a conversation.

    Most channels require a user to initiate a conversation with a bot before the
    bot can send activities

    to the user.


    single tenant the Adapters (Console, Test, etc) but is critical to the BotFrameworkAdapter

    which is multi-tenant aware.

    :param reference: A reference to the conversation to continue.

    :type reference: <xref:botbuilder.schema.ConversationReference>

    :param callback: The method to call for the resulting bot turn.

    :type callback: <xref:typing.Callable>

    :param claims_identity: A <xref:botframework.connector.auth.ClaimsIdentity> for
    the conversation.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>

    :param audience:A value signifying the recipient of the proactive message.

    :type audience: str'
  signature: 'async continue_conversation(reference: ConversationReference, callback:
    Callable, bot_id: str = None, claims_identity: ClaimsIdentity = None, audience:
    str = None)'
  parameters:
  - name: bot_id
    description: The application ID of the bot. This parameter is ignored in
    defaultValue: None
  - name: reference
    isRequired: true
  - name: callback
    isRequired: true
  - name: claims_identity
    defaultValue: None
  - name: audience
    defaultValue: None
- uid: botbuilder.core.bot_adapter.BotAdapter.create_conversation
  name: create_conversation
  summary: Starts a new conversation with a user. Used to direct message to a member
    of a group.
  signature: 'async create_conversation(reference: ConversationReference, logic: Callable[[TurnContext],
    Awaitable] = None, conversation_parameters: ConversationParameters = None, channel_id:
    str = None, service_url: str = None, credentials: AppCredentials = None)'
  parameters:
  - name: reference
    description: The conversation reference that contains the tenant
    isRequired: true
    types:
    - <xref:botbuilder.schema.ConversationReference>
  - name: logic
    description: The logic to use for the creation of the conversation
    defaultValue: None
    types:
    - <xref:typing.Callable>
  - name: conversation_parameters
    description: The information to use to create the conversation
    defaultValue: None
  - name: channel_id
    description: The ID for the channel.
    defaultValue: None
    types:
    - <xref:typing.str>
  - name: service_url
    description: The channel's service URL endpoint.
    defaultValue: None
    types:
    - <xref:typing.str>
  - name: credentials
    description: The application credentials for the bot.
    defaultValue: None
    types:
    - <xref:botframework.connector.auth.AppCredentials>
  return:
    description: A task representing the work queued to execute.
  exceptions:
  - type: It raises a generic exception error.
  remarks: 'To start a conversation, your bot must know its account information and
    the user''s

    account information on that channel.

    Most channels only support initiating a direct message (non-group) conversation.

    The adapter attempts to create a new conversation on the channel, and

    then sends a conversation update activity through its middleware pipeline

    to the the callback method.

    If the conversation is established with the specified users, the ID of the activity

    will contain the ID of the new conversation.

    '
- uid: botbuilder.core.bot_adapter.BotAdapter.delete_activity
  name: delete_activity
  summary: Deletes an existing activity.
  signature: 'abstract async delete_activity(context: TurnContext, reference: ConversationReference)'
  parameters:
  - name: context
    description: The context object for the turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.bot_adapter.TurnContext>
  - name: reference
    description: Conversation reference for the activity to delete.
    isRequired: true
    types:
    - <xref:botbuilder.schema.ConversationReference>
- uid: botbuilder.core.bot_adapter.BotAdapter.run_pipeline
  name: run_pipeline
  summary: 'Called by the parent class to run the adapters middleware set and calls
    the passed in *callback()* handler at

    the end of the chain.'
  signature: 'async run_pipeline(context: TurnContext, callback: Callable[[TurnContext],
    Awaitable] = None)'
  parameters:
  - name: context
    description: The context object for the turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.bot_adapter.TurnContext>
  - name: callback
    description: A callback method to run at the end of the pipeline.
    defaultValue: None
    types:
    - '<xref:typing.Callable>[[<xref:TurnContext>],<xref: Awaitable>]'
- uid: botbuilder.core.bot_adapter.BotAdapter.send_activities
  name: send_activities
  summary: Sends a set of activities to the user. An array of responses from the server
    will be returned.
  signature: 'abstract async send_activities(context: TurnContext, activities: List[Activity])
    -> List[ResourceResponse]'
  parameters:
  - name: context
    description: The context object for the turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.bot_adapter.TurnContext>
  - name: activities
    description: The activities to send.
    isRequired: true
    types:
    - <xref:typing.List>[<xref:Activity>]
- uid: botbuilder.core.bot_adapter.BotAdapter.update_activity
  name: update_activity
  summary: Replaces an existing activity.
  signature: 'abstract async update_activity(context: TurnContext, activity: Activity)'
  parameters:
  - name: context
    description: The context object for the turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.bot_adapter.TurnContext>
  - name: activity
    description: New replacement activity.
    isRequired: true
    types:
    - <xref:botbuilder.schema.Activity>
- uid: botbuilder.core.bot_adapter.BotAdapter.use
  name: use
  summary: Registers a middleware handler with the adapter.
  signature: use(middleware)
  parameters:
  - name: middleware
    description: The middleware to register.
    isRequired: true
attributes:
- uid: botbuilder.core.bot_adapter.BotAdapter.BOT_CALLBACK_HANDLER_KEY
  name: BOT_CALLBACK_HANDLER_KEY
  signature: BOT_CALLBACK_HANDLER_KEY = 'BotCallbackHandler'
- uid: botbuilder.core.bot_adapter.BotAdapter.BOT_CONNECTOR_CLIENT_KEY
  name: BOT_CONNECTOR_CLIENT_KEY
  signature: BOT_CONNECTOR_CLIENT_KEY = 'ConnectorClient'
- uid: botbuilder.core.bot_adapter.BotAdapter.BOT_IDENTITY_KEY
  name: BOT_IDENTITY_KEY
  signature: BOT_IDENTITY_KEY = 'BotIdentity'
- uid: botbuilder.core.bot_adapter.BotAdapter.BOT_OAUTH_SCOPE_KEY
  name: BOT_OAUTH_SCOPE_KEY
  signature: BOT_OAUTH_SCOPE_KEY = 'botbuilder.core.BotAdapter.OAuthScope'
