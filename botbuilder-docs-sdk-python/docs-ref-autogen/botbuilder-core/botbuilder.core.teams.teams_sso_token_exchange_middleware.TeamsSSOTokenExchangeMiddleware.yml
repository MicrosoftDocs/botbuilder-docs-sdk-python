### YamlMime:PythonClass
uid: botbuilder.core.teams.teams_sso_token_exchange_middleware.TeamsSSOTokenExchangeMiddleware
name: TeamsSSOTokenExchangeMiddleware
fullName: botbuilder.core.teams.teams_sso_token_exchange_middleware.TeamsSSOTokenExchangeMiddleware
module: botbuilder.core.teams.teams_sso_token_exchange_middleware
inheritances:
- botbuilder.core.middleware_set.Middleware
summary: 'If the activity name is signin/tokenExchange, self middleware will attempt
  to

  exchange the token, and deduplicate the incoming call, ensuring only one

  exchange request is processed.'
constructor:
  syntax: 'TeamsSSOTokenExchangeMiddleware(storage: botbuilder.core.storage.Storage,
    connection_name: str)'
remarks: 'If a user is signed into multiple Teams clients, the Bot could receive a

  "signin/tokenExchange" from each client. Each token exchange request for a

  specific user login will have an identical Activity.Value.Id.


  Only one of these token exchange requests should be processed by the bot.

  The others return <see cref="System.Net.HttpStatusCode.PreconditionFailed"/>.

  For a distributed bot in production, self requires a distributed storage

  ensuring only one token exchange is processed. self middleware supports

  CosmosDb storage found in Microsoft.Bot.Builder.Azure, or MemoryStorage for

  local development. IStorage''s ETag implementation for token exchange activity

  deduplication.

  '
methods:
- uid: botbuilder.core.teams.teams_sso_token_exchange_middleware.TeamsSSOTokenExchangeMiddleware.on_turn
  name: on_turn
  signature: 'on_turn(context: botbuilder.core.turn_context.TurnContext, logic: Callable[[botbuilder.core.turn_context.TurnContext],
    Awaitable])'
  parameters:
  - name: context
    isRequired: true
  - name: logic
    isRequired: true
