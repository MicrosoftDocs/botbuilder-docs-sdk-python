### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.ChannelServiceHandler.handle_create_conversation
  - botbuilder.core.ChannelServiceHandler.handle_delete_activity
  - botbuilder.core.ChannelServiceHandler.handle_delete_conversation_member
  - botbuilder.core.ChannelServiceHandler.handle_get_activity_members
  - botbuilder.core.ChannelServiceHandler.handle_get_conversation_members
  - botbuilder.core.ChannelServiceHandler.handle_get_conversation_paged_members
  - botbuilder.core.ChannelServiceHandler.handle_get_conversations
  - botbuilder.core.ChannelServiceHandler.handle_reply_to_activity
  - botbuilder.core.ChannelServiceHandler.handle_send_conversation_history
  - botbuilder.core.ChannelServiceHandler.handle_send_to_conversation
  - botbuilder.core.ChannelServiceHandler.handle_update_activity
  - botbuilder.core.ChannelServiceHandler.handle_upload_attachment
  - botbuilder.core.ChannelServiceHandler.on_create_conversation
  - botbuilder.core.ChannelServiceHandler.on_delete_activity
  - botbuilder.core.ChannelServiceHandler.on_delete_conversation_member
  - botbuilder.core.ChannelServiceHandler.on_get_activity_members
  - botbuilder.core.ChannelServiceHandler.on_get_conversation_members
  - botbuilder.core.ChannelServiceHandler.on_get_conversation_paged_members
  - botbuilder.core.ChannelServiceHandler.on_get_conversations
  - botbuilder.core.ChannelServiceHandler.on_reply_to_activity
  - botbuilder.core.ChannelServiceHandler.on_send_conversation_history
  - botbuilder.core.ChannelServiceHandler.on_send_to_conversation
  - botbuilder.core.ChannelServiceHandler.on_update_activity
  - botbuilder.core.ChannelServiceHandler.on_upload_attachment
  class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: botbuilder.core
  name: ChannelServiceHandler
  source:
    id: ChannelServiceHandler
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 31
  summary: 'Initializes a new instance of the <see cref="ChannelServiceHandler"/>
    class,

    using a credential provider.'
  syntax:
    content: 'ChannelServiceHandler(credential_provider: botframework.connector.auth.credential_provider.CredentialProvider,
      auth_config: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration,
      channel_provider: botframework.connector.auth.channel_provider.ChannelProvider
      = None)'
  type: class
  uid: botbuilder.core.ChannelServiceHandler
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_create_conversation
  langs:
  - python
  module: botbuilder.core
  name: 'handle_create_conversation(auth_header, parameters: botbuilder.schema._models_py3.ConversationParameters)
    -> botbuilder.schema._models_py3.ConversationResourceResponse'
  source:
    id: handle_create_conversation
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 89
  syntax:
    content: 'handle_create_conversation(auth_header, parameters: botbuilder.schema._models_py3.ConversationParameters)
      -> botbuilder.schema._models_py3.ConversationResourceResponse'
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_create_conversation
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_delete_activity
  langs:
  - python
  module: botbuilder.core
  name: handle_delete_activity(auth_header, conversation_id, activity_id)
  source:
    id: handle_delete_activity
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 77
  syntax:
    content: handle_delete_activity(auth_header, conversation_id, activity_id)
    parameters:
    - id: auth_header
    - id: conversation_id
    - id: activity_id
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_delete_activity
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_delete_conversation_member
  langs:
  - python
  module: botbuilder.core
  name: handle_delete_conversation_member(auth_header, conversation_id, member_id)
  source:
    id: handle_delete_conversation_member
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 119
  syntax:
    content: handle_delete_conversation_member(auth_header, conversation_id, member_id)
    parameters:
    - id: auth_header
    - id: conversation_id
    - id: member_id
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_delete_conversation_member
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_get_activity_members
  langs:
  - python
  module: botbuilder.core
  name: handle_get_activity_members(auth_header, conversation_id, activity_id) ->
    typing.List[botbuilder.schema._models_py3.ChannelAccount]
  source:
    id: handle_get_activity_members
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 81
  syntax:
    content: handle_get_activity_members(auth_header, conversation_id, activity_id)
      -> typing.List[botbuilder.schema._models_py3.ChannelAccount]
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_get_activity_members
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_get_conversation_members
  langs:
  - python
  module: botbuilder.core
  name: handle_get_conversation_members(auth_header, conversation_id) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]
  source:
    id: handle_get_conversation_members
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 101
  syntax:
    content: handle_get_conversation_members(auth_header, conversation_id) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_get_conversation_members
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_get_conversation_paged_members
  langs:
  - python
  module: botbuilder.core
  name: 'handle_get_conversation_paged_members(auth_header, conversation_id, page_size:
    int = 0, continuation_token: str = '''') -> botbuilder.schema._models_py3.PagedMembersResult'
  source:
    id: handle_get_conversation_paged_members
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 107
  syntax:
    content: 'handle_get_conversation_paged_members(auth_header, conversation_id,
      page_size: int = 0, continuation_token: str = '''') -> botbuilder.schema._models_py3.PagedMembersResult'
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_get_conversation_paged_members
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_get_conversations
  langs:
  - python
  module: botbuilder.core
  name: 'handle_get_conversations(auth_header, continuation_token: str = '''') ->
    botbuilder.schema._models_py3.ConversationsResult'
  source:
    id: handle_get_conversations
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 95
  syntax:
    content: 'handle_get_conversations(auth_header, continuation_token: str = '''')
      -> botbuilder.schema._models_py3.ConversationsResult'
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_get_conversations
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_reply_to_activity
  langs:
  - python
  module: botbuilder.core
  name: handle_reply_to_activity(auth_header, conversation_id, activity_id, activity)
    -> botbuilder.schema._models_py3.ResourceResponse
  source:
    id: handle_reply_to_activity
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 61
  syntax:
    content: handle_reply_to_activity(auth_header, conversation_id, activity_id, activity)
      -> botbuilder.schema._models_py3.ResourceResponse
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_reply_to_activity
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_send_conversation_history
  langs:
  - python
  module: botbuilder.core
  name: 'handle_send_conversation_history(auth_header, conversation_id, transcript:
    botbuilder.schema._models_py3.Transcript) -> botbuilder.schema._models_py3.ResourceResponse'
  source:
    id: handle_send_conversation_history
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 127
  syntax:
    content: 'handle_send_conversation_history(auth_header, conversation_id, transcript:
      botbuilder.schema._models_py3.Transcript) -> botbuilder.schema._models_py3.ResourceResponse'
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_send_conversation_history
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_send_to_conversation
  langs:
  - python
  module: botbuilder.core
  name: handle_send_to_conversation(auth_header, conversation_id, activity) -> botbuilder.schema._models_py3.ResourceResponse
  source:
    id: handle_send_to_conversation
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 53
  syntax:
    content: handle_send_to_conversation(auth_header, conversation_id, activity) ->
      botbuilder.schema._models_py3.ResourceResponse
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_send_to_conversation
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_update_activity
  langs:
  - python
  module: botbuilder.core
  name: handle_update_activity(auth_header, conversation_id, activity_id, activity)
    -> botbuilder.schema._models_py3.ResourceResponse
  source:
    id: handle_update_activity
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 69
  syntax:
    content: handle_update_activity(auth_header, conversation_id, activity_id, activity)
      -> botbuilder.schema._models_py3.ResourceResponse
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_update_activity
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.handle_upload_attachment
  langs:
  - python
  module: botbuilder.core
  name: 'handle_upload_attachment(auth_header, conversation_id, attachment_upload:
    botbuilder.schema._models_py3.AttachmentData) -> botbuilder.schema._models_py3.ResourceResponse'
  source:
    id: handle_upload_attachment
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 135
  syntax:
    content: 'handle_upload_attachment(auth_header, conversation_id, attachment_upload:
      botbuilder.schema._models_py3.AttachmentData) -> botbuilder.schema._models_py3.ResourceResponse'
  type: method
  uid: botbuilder.core.ChannelServiceHandler.handle_upload_attachment
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_create_conversation
  langs:
  - python
  module: botbuilder.core
  name: 'on_create_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    parameters: botbuilder.schema._models_py3.ConversationParameters) -> botbuilder.schema._models_py3.ConversationResourceResponse'
  source:
    id: on_create_conversation
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 168
  summary: 'create_conversation() API for Skill


    Create a new Conversation.


    POST to this method with a

    * Bot being the bot creating the conversation

    * IsGroup set to true if this is not a direct message (default is false)

    * Array containing the members to include in the conversation


    The return value is a ResourceResponse which contains a conversation id

    which is suitable for use

    in the message payload and REST API uris.


    Most channels only support the semantics of bots initiating a direct

    message conversation.  An example of how to do that would be:


    var resource = await connector.conversations.CreateConversation(new

    ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new

    ChannelAccount("user1") } );

    await connect.Conversations.SendToConversationAsync(resource.Id, new

    Activity() ... ) ;


    end.'
  syntax:
    content: 'on_create_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      parameters: botbuilder.schema._models_py3.ConversationParameters) -> botbuilder.schema._models_py3.ConversationResourceResponse'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: parameters
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_create_conversation
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_delete_activity
  langs:
  - python
  module: botbuilder.core
  name: 'on_delete_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str)'
  source:
    id: on_delete_activity
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 311
  summary: 'delete_activity() API for Skill.


    Delete an existing activity.


    Some channels allow you to delete an existing activity, and if successful

    this method will remove the specified activity.'
  syntax:
    content: 'on_delete_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, activity_id: str)'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: activity_id
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_delete_activity
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_delete_conversation_member
  langs:
  - python
  module: botbuilder.core
  name: 'on_delete_conversation_member(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, member_id: str)'
  source:
    id: on_delete_conversation_member
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 382
  summary: 'delete_conversation_member() API for Skill.


    Deletes a member from a conversation.


    This REST API takes a ConversationId and a memberId (of type string) and

    removes that member from the conversation. If that member was the last

    member

    of the conversation, the conversation will also be deleted.'
  syntax:
    content: 'on_delete_conversation_member(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, member_id: str)'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: member_id
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_delete_conversation_member
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_get_activity_members
  langs:
  - python
  module: botbuilder.core
  name: 'on_get_activity_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
  source:
    id: on_get_activity_members
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 402
  summary: 'get_activity_members() API for Skill.


    Enumerate the members of an activity.


    This REST API takes a ConversationId and a ActivityId, returning an array

    of ChannelAccount objects representing the members of the particular

    activity in the conversation.'
  syntax:
    content: 'on_get_activity_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, activity_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: activity_id
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_get_activity_members
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_get_conversation_members
  langs:
  - python
  module: botbuilder.core
  name: 'on_get_conversation_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
  source:
    id: on_get_conversation_members
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 329
  summary: 'get_conversation_members() API for Skill.


    Enumerate the members of a conversation.


    This REST API takes a ConversationId and returns a list of ChannelAccount

    objects representing the members of the conversation.'
  syntax:
    content: 'on_get_conversation_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_get_conversation_members
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_get_conversation_paged_members
  langs:
  - python
  module: botbuilder.core
  name: 'on_get_conversation_paged_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, page_size: int = None, continuation_token: str = '''') ->
    botbuilder.schema._models_py3.PagedMembersResult'
  source:
    id: on_get_conversation_paged_members
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 346
  summary: 'get_conversation_paged_members() API for Skill.


    Enumerate the members of a conversation one page at a time.


    This REST API takes a ConversationId. Optionally a page_size and/or

    continuation_token can be provided. It returns a PagedMembersResult, which

    contains an array

    of ChannelAccounts representing the members of the conversation and a

    continuation token that can be used to get more values.


    One page of ChannelAccounts records are returned with each call. The number

    of records in a page may vary between channels and calls. The page_size

    parameter can be used as

    a suggestion. If there are no additional results the response will not

    contain a continuation token. If there are no members in the conversation

    the Members will be empty or not present in the response.


    A response to a request that has a continuation token from a prior request

    may rarely return members from a previous request.'
  syntax:
    content: 'on_get_conversation_paged_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, page_size: int = None, continuation_token: str = '''')
      -> botbuilder.schema._models_py3.PagedMembersResult'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: page_size
    - description: ''
      id: continuation_token
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_get_conversation_paged_members
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_get_conversations
  langs:
  - python
  module: botbuilder.core
  name: 'on_get_conversations(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    continuation_token: str = '''') -> botbuilder.schema._models_py3.ConversationsResult'
  source:
    id: on_get_conversations
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 143
  summary: 'get_conversations() API for Skill


    List the Conversations in which this bot has participated.


    GET from this method with a skip token


    The return value is a ConversationsResult, which contains an array of

    ConversationMembers and a skip token.  If the skip token is not empty, then

    there are further values to be returned. Call this method again with the

    returned token to get more values.


    Each ConversationMembers object contains the ID of the conversation and an

    array of ChannelAccounts that describe the members of the conversation.'
  syntax:
    content: 'on_get_conversations(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      continuation_token: str = '''') -> botbuilder.schema._models_py3.ConversationsResult'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: continuation_token
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_get_conversations
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_reply_to_activity
  langs:
  - python
  module: botbuilder.core
  name: 'on_reply_to_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ResourceResponse'
  source:
    id: on_reply_to_activity
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 279
  summary: 'reply_to_activity() API for Skill.


    This method allows you to reply to an activity.


    This is slightly different from SendToConversation().

    * SendToConversation(conversationId) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.'
  syntax:
    content: 'on_reply_to_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
      -> botbuilder.schema._models_py3.ResourceResponse'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: activity_id
    - description: ''
      id: activity
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_reply_to_activity
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_send_conversation_history
  langs:
  - python
  module: botbuilder.core
  name: 'on_send_conversation_history(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, transcript: botbuilder.schema._models_py3.Transcript) ->
    botbuilder.schema._models_py3.ResourceResponse'
  source:
    id: on_send_conversation_history
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 229
  summary: 'send_conversation_history() API for Skill.


    This method allows you to upload the historic activities to the

    conversation.


    Sender must ensure that the historic activities have unique ids and

    appropriate timestamps. The ids are used by the client to deal with

    duplicate activities and the timestamps are used by the client to render

    the activities in the right order.'
  syntax:
    content: 'on_send_conversation_history(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, transcript: botbuilder.schema._models_py3.Transcript)
      -> botbuilder.schema._models_py3.ResourceResponse'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: transcript
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_send_conversation_history
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_send_to_conversation
  langs:
  - python
  module: botbuilder.core
  name: 'on_send_to_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity: botbuilder.schema._models_py3.Activity) -> botbuilder.schema._models_py3.ResourceResponse'
  source:
    id: on_send_to_conversation
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 202
  summary: 'send_to_conversation() API for Skill


    This method allows you to send an activity to the end of a conversation.


    This is slightly different from ReplyToActivity().

    * SendToConversation(conversationId) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.'
  syntax:
    content: 'on_send_to_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, activity: botbuilder.schema._models_py3.Activity) -> botbuilder.schema._models_py3.ResourceResponse'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: activity
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_send_to_conversation
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_update_activity
  langs:
  - python
  module: botbuilder.core
  name: 'on_update_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ResourceResponse'
  source:
    id: on_update_activity
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 253
  summary: 'update_activity() API for Skill.


    Edit an existing activity.


    Some channels allow you to edit an existing activity to reflect the new

    state of a bot conversation.


    For example, you can remove buttons after someone has clicked "Approve"

    button.'
  syntax:
    content: 'on_update_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
      -> botbuilder.schema._models_py3.ResourceResponse'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: activity_id
    - description: ''
      id: activity
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_update_activity
- class: botbuilder.core.ChannelServiceHandler
  fullName: botbuilder.core.ChannelServiceHandler.on_upload_attachment
  langs:
  - python
  module: botbuilder.core
  name: 'on_upload_attachment(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, attachment_upload: botbuilder.schema._models_py3.AttachmentData)
    -> botbuilder.schema._models_py3.ResourceResponse'
  source:
    id: on_upload_attachment
    path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\channel_service_handler.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 421
  summary: 'upload_attachment() API for Skill.


    Upload an attachment directly into a channel''s blob storage.


    This is useful because it allows you to store data in a compliant store

    when dealing with enterprises.


    The response is a ResourceResponse which contains an AttachmentId which is

    suitable for using with the attachments API.'
  syntax:
    content: 'on_upload_attachment(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      conversation_id: str, attachment_upload: botbuilder.schema._models_py3.AttachmentData)
      -> botbuilder.schema._models_py3.ResourceResponse'
    parameters:
    - description: ''
      id: claims_identity
    - description: ''
      id: conversation_id
    - description: ''
      id: attachment_upload
  type: method
  uid: botbuilder.core.ChannelServiceHandler.on_upload_attachment
references:
- fullName: botbuilder.core.ChannelServiceHandler.handle_create_conversation
  isExternal: false
  name: 'handle_create_conversation(auth_header, parameters: botbuilder.schema._models_py3.ConversationParameters)
    -> botbuilder.schema._models_py3.ConversationResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_create_conversation
- fullName: botbuilder.core.ChannelServiceHandler.handle_delete_activity
  isExternal: false
  name: handle_delete_activity(auth_header, conversation_id, activity_id)
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_delete_activity
- fullName: botbuilder.core.ChannelServiceHandler.handle_delete_conversation_member
  isExternal: false
  name: handle_delete_conversation_member(auth_header, conversation_id, member_id)
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_delete_conversation_member
- fullName: botbuilder.core.ChannelServiceHandler.handle_get_activity_members
  isExternal: false
  name: handle_get_activity_members(auth_header, conversation_id, activity_id) ->
    typing.List[botbuilder.schema._models_py3.ChannelAccount]
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_get_activity_members
- fullName: botbuilder.core.ChannelServiceHandler.handle_get_conversation_members
  isExternal: false
  name: handle_get_conversation_members(auth_header, conversation_id) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_get_conversation_members
- fullName: botbuilder.core.ChannelServiceHandler.handle_get_conversation_paged_members
  isExternal: false
  name: 'handle_get_conversation_paged_members(auth_header, conversation_id, page_size:
    int = 0, continuation_token: str = '''') -> botbuilder.schema._models_py3.PagedMembersResult'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_get_conversation_paged_members
- fullName: botbuilder.core.ChannelServiceHandler.handle_get_conversations
  isExternal: false
  name: 'handle_get_conversations(auth_header, continuation_token: str = '''') ->
    botbuilder.schema._models_py3.ConversationsResult'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_get_conversations
- fullName: botbuilder.core.ChannelServiceHandler.handle_reply_to_activity
  isExternal: false
  name: handle_reply_to_activity(auth_header, conversation_id, activity_id, activity)
    -> botbuilder.schema._models_py3.ResourceResponse
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_reply_to_activity
- fullName: botbuilder.core.ChannelServiceHandler.handle_send_conversation_history
  isExternal: false
  name: 'handle_send_conversation_history(auth_header, conversation_id, transcript:
    botbuilder.schema._models_py3.Transcript) -> botbuilder.schema._models_py3.ResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_send_conversation_history
- fullName: botbuilder.core.ChannelServiceHandler.handle_send_to_conversation
  isExternal: false
  name: handle_send_to_conversation(auth_header, conversation_id, activity) -> botbuilder.schema._models_py3.ResourceResponse
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_send_to_conversation
- fullName: botbuilder.core.ChannelServiceHandler.handle_update_activity
  isExternal: false
  name: handle_update_activity(auth_header, conversation_id, activity_id, activity)
    -> botbuilder.schema._models_py3.ResourceResponse
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_update_activity
- fullName: botbuilder.core.ChannelServiceHandler.handle_upload_attachment
  isExternal: false
  name: 'handle_upload_attachment(auth_header, conversation_id, attachment_upload:
    botbuilder.schema._models_py3.AttachmentData) -> botbuilder.schema._models_py3.ResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.handle_upload_attachment
- fullName: botbuilder.core.ChannelServiceHandler.on_create_conversation
  isExternal: false
  name: 'on_create_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    parameters: botbuilder.schema._models_py3.ConversationParameters) -> botbuilder.schema._models_py3.ConversationResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_create_conversation
- fullName: botbuilder.core.ChannelServiceHandler.on_delete_activity
  isExternal: false
  name: 'on_delete_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str)'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_delete_activity
- fullName: botbuilder.core.ChannelServiceHandler.on_delete_conversation_member
  isExternal: false
  name: 'on_delete_conversation_member(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, member_id: str)'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_delete_conversation_member
- fullName: botbuilder.core.ChannelServiceHandler.on_get_activity_members
  isExternal: false
  name: 'on_get_activity_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_get_activity_members
- fullName: botbuilder.core.ChannelServiceHandler.on_get_conversation_members
  isExternal: false
  name: 'on_get_conversation_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_get_conversation_members
- fullName: botbuilder.core.ChannelServiceHandler.on_get_conversation_paged_members
  isExternal: false
  name: 'on_get_conversation_paged_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, page_size: int = None, continuation_token: str = '''') ->
    botbuilder.schema._models_py3.PagedMembersResult'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_get_conversation_paged_members
- fullName: botbuilder.core.ChannelServiceHandler.on_get_conversations
  isExternal: false
  name: 'on_get_conversations(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    continuation_token: str = '''') -> botbuilder.schema._models_py3.ConversationsResult'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_get_conversations
- fullName: botbuilder.core.ChannelServiceHandler.on_reply_to_activity
  isExternal: false
  name: 'on_reply_to_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_reply_to_activity
- fullName: botbuilder.core.ChannelServiceHandler.on_send_conversation_history
  isExternal: false
  name: 'on_send_conversation_history(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, transcript: botbuilder.schema._models_py3.Transcript) ->
    botbuilder.schema._models_py3.ResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_send_conversation_history
- fullName: botbuilder.core.ChannelServiceHandler.on_send_to_conversation
  isExternal: false
  name: 'on_send_to_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity: botbuilder.schema._models_py3.Activity) -> botbuilder.schema._models_py3.ResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_send_to_conversation
- fullName: botbuilder.core.ChannelServiceHandler.on_update_activity
  isExternal: false
  name: 'on_update_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_update_activity
- fullName: botbuilder.core.ChannelServiceHandler.on_upload_attachment
  isExternal: false
  name: 'on_upload_attachment(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, attachment_upload: botbuilder.schema._models_py3.AttachmentData)
    -> botbuilder.schema._models_py3.ResourceResponse'
  parent: botbuilder.core.ChannelServiceHandler
  uid: botbuilder.core.ChannelServiceHandler.on_upload_attachment
