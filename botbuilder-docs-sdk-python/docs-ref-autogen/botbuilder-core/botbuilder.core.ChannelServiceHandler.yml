### YamlMime:PythonClass
uid: botbuilder.core.ChannelServiceHandler
name: ChannelServiceHandler
fullName: botbuilder.core.ChannelServiceHandler
module: botbuilder.core
inheritances:
- builtins.object
summary: 'Initializes a new instance of the <see cref="ChannelServiceHandler"/> class,

  using a credential provider.'
constructor:
  syntax: 'ChannelServiceHandler(credential_provider: botframework.connector.auth.credential_provider.CredentialProvider,
    auth_config: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration,
    channel_provider: botframework.connector.auth.channel_provider.ChannelProvider
    = None) -> None'
methods:
- uid: botbuilder.core.ChannelServiceHandler.handle_create_conversation
  name: handle_create_conversation
  signature: 'handle_create_conversation(auth_header, parameters: botbuilder.schema._models_py3.ConversationParameters)
    -> botbuilder.schema._models_py3.ConversationResourceResponse'
  parameters:
  - name: auth_header
    isRequired: true
  - name: parameters
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_delete_activity
  name: handle_delete_activity
  signature: handle_delete_activity(auth_header, conversation_id, activity_id) ->
    None
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_delete_conversation_member
  name: handle_delete_conversation_member
  signature: handle_delete_conversation_member(auth_header, conversation_id, member_id)
    -> None
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: member_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_get_activity_members
  name: handle_get_activity_members
  signature: handle_get_activity_members(auth_header, conversation_id, activity_id)
    -> typing.List[botbuilder.schema._models_py3.ChannelAccount]
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_get_conversation_member
  name: handle_get_conversation_member
  signature: handle_get_conversation_member(auth_header, conversation_id, member_id)
    -> botbuilder.schema._models_py3.ChannelAccount
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: member_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_get_conversation_members
  name: handle_get_conversation_members
  signature: handle_get_conversation_members(auth_header, conversation_id) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_get_conversation_paged_members
  name: handle_get_conversation_paged_members
  signature: 'handle_get_conversation_paged_members(auth_header, conversation_id,
    page_size: int = 0, continuation_token: str = '''') -> botbuilder.schema._models_py3.PagedMembersResult'
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: page_size
    defaultValue: '0'
  - name: continuation_token
- uid: botbuilder.core.ChannelServiceHandler.handle_get_conversations
  name: handle_get_conversations
  signature: 'handle_get_conversations(auth_header, continuation_token: str = '''')
    -> botbuilder.schema._models_py3.ConversationsResult'
  parameters:
  - name: auth_header
    isRequired: true
  - name: continuation_token
- uid: botbuilder.core.ChannelServiceHandler.handle_reply_to_activity
  name: handle_reply_to_activity
  signature: handle_reply_to_activity(auth_header, conversation_id, activity_id, activity)
    -> botbuilder.schema._models_py3.ResourceResponse
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_send_conversation_history
  name: handle_send_conversation_history
  signature: 'handle_send_conversation_history(auth_header, conversation_id, transcript:
    botbuilder.schema._models_py3.Transcript) -> botbuilder.schema._models_py3.ResourceResponse'
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: transcript
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_send_to_conversation
  name: handle_send_to_conversation
  signature: handle_send_to_conversation(auth_header, conversation_id, activity) ->
    botbuilder.schema._models_py3.ResourceResponse
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_update_activity
  name: handle_update_activity
  signature: handle_update_activity(auth_header, conversation_id, activity_id, activity)
    -> botbuilder.schema._models_py3.ResourceResponse
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.handle_upload_attachment
  name: handle_upload_attachment
  signature: 'handle_upload_attachment(auth_header, conversation_id, attachment_upload:
    botbuilder.schema._models_py3.AttachmentData) -> botbuilder.schema._models_py3.ResourceResponse'
  parameters:
  - name: auth_header
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: attachment_upload
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_create_conversation
  name: on_create_conversation
  summary: 'create_conversation() API for Skill


    Create a new Conversation.


    POST to this method with a

    * Bot being the bot creating the conversation

    * IsGroup set to true if this is not a direct message (default is false)

    * Array containing the members to include in the conversation


    The return value is a ResourceResponse which contains a conversation id

    which is suitable for use

    in the message payload and REST API uris.


    Most channels only support the semantics of bots initiating a direct

    message conversation.  An example of how to do that would be:


    var resource = await connector.conversations.CreateConversation(new

    ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new

    ChannelAccount("user1") } );

    await connect.Conversations.SendToConversationAsync(resource.Id, new

    Activity() ... ) ;


    end.'
  signature: 'on_create_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    parameters: botbuilder.schema._models_py3.ConversationParameters) -> botbuilder.schema._models_py3.ConversationResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: parameters
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_delete_activity
  name: on_delete_activity
  summary: 'delete_activity() API for Skill.


    Delete an existing activity.


    Some channels allow you to delete an existing activity, and if successful

    this method will remove the specified activity.'
  signature: 'on_delete_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str) -> None'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_delete_conversation_member
  name: on_delete_conversation_member
  summary: 'delete_conversation_member() API for Skill.


    Deletes a member from a conversation.


    This REST API takes a ConversationId and a memberId (of type string) and

    removes that member from the conversation. If that member was the last

    member

    of the conversation, the conversation will also be deleted.'
  signature: 'on_delete_conversation_member(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, member_id: str) -> None'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: member_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_get_activity_members
  name: on_get_activity_members
  summary: 'get_activity_members() API for Skill.


    Enumerate the members of an activity.


    This REST API takes a ConversationId and a ActivityId, returning an array

    of ChannelAccount objects representing the members of the particular

    activity in the conversation.'
  signature: 'on_get_activity_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_get_conversation_member
  name: on_get_conversation_member
  summary: 'get_conversation_member() API for Skill.


    Enumerate the members of a conversation.


    This REST API takes a ConversationId and returns a list of ChannelAccount

    objects representing the members of the conversation.'
  signature: 'on_get_conversation_member(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, member_id: str) -> botbuilder.schema._models_py3.ChannelAccount'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: member_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_get_conversation_members
  name: on_get_conversation_members
  summary: 'get_conversation_members() API for Skill.


    Enumerate the members of a conversation.


    This REST API takes a ConversationId and returns a list of ChannelAccount

    objects representing the members of the conversation.'
  signature: 'on_get_conversation_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str) -> typing.List[botbuilder.schema._models_py3.ChannelAccount]'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_get_conversation_paged_members
  name: on_get_conversation_paged_members
  summary: 'get_conversation_paged_members() API for Skill.


    Enumerate the members of a conversation one page at a time.


    This REST API takes a ConversationId. Optionally a page_size and/or

    continuation_token can be provided. It returns a PagedMembersResult, which

    contains an array

    of ChannelAccounts representing the members of the conversation and a

    continuation token that can be used to get more values.


    One page of ChannelAccounts records are returned with each call. The number

    of records in a page may vary between channels and calls. The page_size

    parameter can be used as

    a suggestion. If there are no additional results the response will not

    contain a continuation token. If there are no members in the conversation

    the Members will be empty or not present in the response.


    A response to a request that has a continuation token from a prior request

    may rarely return members from a previous request.'
  signature: 'on_get_conversation_paged_members(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, page_size: int = None, continuation_token: str = '''') ->
    botbuilder.schema._models_py3.PagedMembersResult'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: page_size
    defaultValue: None
  - name: continuation_token
- uid: botbuilder.core.ChannelServiceHandler.on_get_conversations
  name: on_get_conversations
  summary: 'get_conversations() API for Skill


    List the Conversations in which this bot has participated.


    GET from this method with a skip token


    The return value is a ConversationsResult, which contains an array of

    ConversationMembers and a skip token.  If the skip token is not empty, then

    there are further values to be returned. Call this method again with the

    returned token to get more values.


    Each ConversationMembers object contains the ID of the conversation and an

    array of ChannelAccounts that describe the members of the conversation.'
  signature: 'on_get_conversations(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    continuation_token: str = '''') -> botbuilder.schema._models_py3.ConversationsResult'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
  - name: continuation_token
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_reply_to_activity
  name: on_reply_to_activity
  summary: 'reply_to_activity() API for Skill.


    This method allows you to reply to an activity.


    This is slightly different from SendToConversation().

    * SendToConversation(conversationId) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.'
  signature: 'on_reply_to_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_send_conversation_history
  name: on_send_conversation_history
  summary: 'send_conversation_history() API for Skill.


    This method allows you to upload the historic activities to the

    conversation.


    Sender must ensure that the historic activities have unique ids and

    appropriate timestamps. The ids are used by the client to deal with

    duplicate activities and the timestamps are used by the client to render

    the activities in the right order.'
  signature: 'on_send_conversation_history(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, transcript: botbuilder.schema._models_py3.Transcript) ->
    botbuilder.schema._models_py3.ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: transcript
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_send_to_conversation
  name: on_send_to_conversation
  summary: 'send_to_conversation() API for Skill


    This method allows you to send an activity to the end of a conversation.


    This is slightly different from ReplyToActivity().

    * SendToConversation(conversationId) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.'
  signature: 'on_send_to_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity: botbuilder.schema._models_py3.Activity) -> botbuilder.schema._models_py3.ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_update_activity
  name: on_update_activity
  summary: 'update_activity() API for Skill.


    Edit an existing activity.


    Some channels allow you to edit an existing activity to reflect the new

    state of a bot conversation.


    For example, you can remove buttons after someone has clicked "Approve"

    button.'
  signature: 'on_update_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)
    -> botbuilder.schema._models_py3.ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.ChannelServiceHandler.on_upload_attachment
  name: on_upload_attachment
  summary: 'upload_attachment() API for Skill.


    Upload an attachment directly into a channel''s blob storage.


    This is useful because it allows you to store data in a compliant store

    when dealing with enterprises.


    The response is a ResourceResponse which contains an AttachmentId which is

    suitable for using with the attachments API.'
  signature: 'on_upload_attachment(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, attachment_upload: botbuilder.schema._models_py3.AttachmentData)
    -> botbuilder.schema._models_py3.ResourceResponse'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: attachment_upload
    isRequired: true
