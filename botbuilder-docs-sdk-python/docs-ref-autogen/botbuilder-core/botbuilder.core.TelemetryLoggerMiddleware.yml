### YamlMime:PythonClass
uid: botbuilder.core.TelemetryLoggerMiddleware
name: TelemetryLoggerMiddleware
fullName: botbuilder.core.TelemetryLoggerMiddleware
module: botbuilder.core
summary: Middleware for logging incoming, outgoing, updated or deleted Activity messages.
constructor:
  syntax: 'TelemetryLoggerMiddleware(telemetry_client: BotTelemetryClient, log_personal_information:
    bool)'
  parameters:
  - name: telemetry_client
    isRequired: true
  - name: log_personal_information
    isRequired: true
methods:
- uid: botbuilder.core.TelemetryLoggerMiddleware.fill_delete_event_properties
  name: fill_delete_event_properties
  summary: 'Fills the event properties for the BotMessageDelete.

    These properties are logged when an activity message is deleted by the Bot.

    :param activity: activity sent from user.

    :param additional_properties: Additional properties to add to the event.

    Additional properties can override "stock" properties.


    BotTelemetryClient.track_event method for the BotMessageUpdate event.'
  signature: 'async fill_delete_event_properties(activity: Activity, additional_properties:
    Dict[str, str] = None) -> Dict[str, str]'
  parameters:
  - name: activity
    isRequired: true
  - name: additional_properties
    defaultValue: None
  return:
    description: A dictionary that is sent as "Properties" to the
- uid: botbuilder.core.TelemetryLoggerMiddleware.fill_receive_event_properties
  name: fill_receive_event_properties
  summary: 'Fills the event properties for the BotMessageReceived.

    Adheres to the LogPersonalInformation flag to filter Name, Text and Speak properties.

    :param activity: activity sent from user.

    :param additional_properties: Additional properties to add to the event.

    Additional properties can override "stock" properties.


    BotTelemetryClient.track_event method for the BotMessageReceived event.'
  signature: 'async fill_receive_event_properties(activity: Activity, additional_properties:
    Dict[str, str] = None) -> Dict[str, str]'
  parameters:
  - name: activity
    isRequired: true
  - name: additional_properties
    defaultValue: None
  return:
    description: A dictionary that is sent as "Properties" to
- uid: botbuilder.core.TelemetryLoggerMiddleware.fill_send_event_properties
  name: fill_send_event_properties
  summary: 'Fills the event properties for the BotMessageSend.

    These properties are logged when an activity message is sent by the Bot to the
    user.

    :param activity: activity sent from user.

    :param additional_properties: Additional properties to add to the event.

    Additional properties can override "stock" properties.


    BotTelemetryClient.track_event method for the BotMessageSend event.'
  signature: 'async fill_send_event_properties(activity: Activity, additional_properties:
    Dict[str, str] = None) -> Dict[str, str]'
  parameters:
  - name: activity
    isRequired: true
  - name: additional_properties
    defaultValue: None
  return:
    description: A dictionary that is sent as "Properties" to the
- uid: botbuilder.core.TelemetryLoggerMiddleware.fill_update_event_properties
  name: fill_update_event_properties
  summary: 'Fills the event properties for the BotMessageUpdate.

    These properties are logged when an activity message is updated by the Bot.

    For example, if a card is interacted with by the use, and the card needs

    to be updated to reflect some interaction.

    :param activity: activity sent from user.

    :param additional_properties: Additional properties to add to the event.

    Additional properties can override "stock" properties.


    BotTelemetryClient.track_event method for the BotMessageUpdate event.'
  signature: 'async fill_update_event_properties(activity: Activity, additional_properties:
    Dict[str, str] = None) -> Dict[str, str]'
  parameters:
  - name: activity
    isRequired: true
  - name: additional_properties
    defaultValue: None
  return:
    description: A dictionary that is sent as "Properties" to the
- uid: botbuilder.core.TelemetryLoggerMiddleware.on_delete_activity
  name: on_delete_activity
  summary: 'Invoked when the bot deletes a message.

    Performs logging of telemetry data using the BotTelemetryClient.track_event()
    method.

    This event name used is "BotMessageDelete".

    :param activity: Current activity sent from user.'
  signature: 'async on_delete_activity(activity: Activity) -> None'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.TelemetryLoggerMiddleware.on_receive_activity
  name: on_receive_activity
  summary: 'Invoked when a message is received from the user.

    Performs logging of telemetry data using the BotTelemetryClient.track_event()
    method.

    This event name used is "BotMessageReceived".

    :param activity: Current activity sent from user.'
  signature: 'async on_receive_activity(activity: Activity) -> None'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.TelemetryLoggerMiddleware.on_send_activity
  name: on_send_activity
  summary: 'Invoked when the bot sends a message to the user.

    Performs logging of telemetry data using the BotTelemetryClient.track_event()
    method.

    This event name used is "BotMessageSend".

    :param activity: Current activity sent from bot.'
  signature: 'async on_send_activity(activity: Activity) -> None'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.TelemetryLoggerMiddleware.on_turn
  name: on_turn
  summary: 'Logs events based on incoming and outgoing activities using

    BotTelemetryClient base class'
  signature: 'async on_turn(context: TurnContext, logic_fn: Callable[[TurnContext],
    Awaitable]) -> None'
  parameters:
  - name: turn_context
    description: The context object for this turn.
    isRequired: true
  - name: logic
    description: Callable to continue the bot middleware pipeline
    isRequired: true
  - name: context
    isRequired: true
  - name: logic_fn
    isRequired: true
  return:
    description: None
- uid: botbuilder.core.TelemetryLoggerMiddleware.on_update_activity
  name: on_update_activity
  summary: 'Invoked when the bot updates a message.

    Performs logging of telemetry data using the BotTelemetryClient.track_event()
    method.

    This event name used is "BotMessageUpdate".

    :param activity: Current activity sent from user.'
  signature: 'async on_update_activity(activity: Activity) -> None'
  parameters:
  - name: activity
    isRequired: true
attributes:
- uid: botbuilder.core.TelemetryLoggerMiddleware.log_personal_information
  name: log_personal_information
  summary: 'Gets a value indicating whether determines whether to log personal

    information that came from the user.'
- uid: botbuilder.core.TelemetryLoggerMiddleware.telemetry_client
  name: telemetry_client
  summary: Gets the currently configured BotTelemetryClient.
