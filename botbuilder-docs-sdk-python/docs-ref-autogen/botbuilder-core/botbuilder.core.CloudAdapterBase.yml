### YamlMime:PythonClass
uid: botbuilder.core.CloudAdapterBase
name: CloudAdapterBase
fullName: botbuilder.core.CloudAdapterBase
module: botbuilder.core
inheritances:
- botbuilder.core.bot_adapter.BotAdapter
- abc.ABC
constructor:
  syntax: 'CloudAdapterBase(bot_framework_authentication: BotFrameworkAuthentication)'
  parameters:
  - name: bot_framework_authentication
methods:
- uid: botbuilder.core.CloudAdapterBase.continue_conversation
  name: continue_conversation
  summary: 'Sends a proactive message to a conversation.

    Call this method to proactively send a message to a conversation.

    Most channels require a user to initiate a conversation with a bot before the
    bot can send activities

    to the user.


    and is generally found in the *MicrosoftAppId* parameter in *config.py*.

    :type bot_app_id: <xref:typing.str>'
  signature: 'async continue_conversation(reference: ConversationReference, callback:
    Callable, bot_app_id: str)'
  parameters:
  - name: reference
    description: A reference to the conversation to continue.
    isRequired: true
    types:
    - <xref:botbuilder.schema.ConversationReference>
  - name: callback
    description: The method to call for the resulting bot turn.
    isRequired: true
    types:
    - <xref:typing.Callable>
  - name: bot_app_id
    description: The application Id of the bot. This is the appId returned by the
      Azure portal registration,
    isRequired: true
- uid: botbuilder.core.CloudAdapterBase.continue_conversation_with_claims
  name: continue_conversation_with_claims
  signature: 'async continue_conversation_with_claims(claims_identity: ClaimsIdentity,
    reference: ConversationReference, audience: str, logic: Callable[[TurnContext],
    Awaitable])'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: reference
    isRequired: true
  - name: audience
    isRequired: true
  - name: logic
    isRequired: true
- uid: botbuilder.core.CloudAdapterBase.create_claims_identity
  name: create_claims_identity
  signature: 'create_claims_identity(bot_app_id: str = '''') -> ClaimsIdentity'
  parameters:
  - name: bot_app_id
- uid: botbuilder.core.CloudAdapterBase.create_conversation
  name: create_conversation
  signature: 'async create_conversation(bot_app_id: str, callback: Callable[[TurnContext],
    Awaitable] = None, conversation_parameters: ConversationParameters = None, channel_id:
    str = None, service_url: str = None, audience: str = None)'
  parameters:
  - name: bot_app_id
    isRequired: true
  - name: callback
    defaultValue: None
  - name: conversation_parameters
    defaultValue: None
  - name: channel_id
    defaultValue: None
  - name: service_url
    defaultValue: None
  - name: audience
    defaultValue: None
- uid: botbuilder.core.CloudAdapterBase.delete_activity
  name: delete_activity
  signature: 'async delete_activity(context: TurnContext, reference: ConversationReference)'
  parameters:
  - name: context
    isRequired: true
  - name: reference
    isRequired: true
- uid: botbuilder.core.CloudAdapterBase.process_activity
  name: process_activity
  summary: Creates a turn context and runs the middleware pipeline for an incoming
    activity.
  signature: 'async process_activity(auth_header_or_authenticate_request_result: str
    | AuthenticateRequestResult, activity: Activity, logic: Callable[[TurnContext],
    Awaitable])'
  parameters:
  - name: auth_header
    description: The HTTP authentication header of the request
    isRequired: true
    types:
    - '<xref:typing.Union>[<xref:typing.str>,<xref: AuthenticateRequestResult>]'
  - name: activity
    description: The incoming activity
    isRequired: true
    types:
    - <xref:botbuilder.core.Activity>
  - name: logic
    description: The logic to execute at the end of the adapter's middleware pipeline.
    isRequired: true
    types:
    - <xref:typing.Callable>
  - name: auth_header_or_authenticate_request_result
    isRequired: true
  return:
    description: A task that represents the work queued to execute.
  remarks: 'This class processes an activity received by the bots web server. This
    includes any messages

    sent from a user and is the method that drives what''s often referred to as the

    bots *reactive messaging* flow.

    Call this method to reactively send a message to a conversation.

    If the task completes successfully, then an <xref:botbuilder.core.InvokeResponse>
    is returned;

    otherwise. *null* is returned.

    '
- uid: botbuilder.core.CloudAdapterBase.process_proactive
  name: process_proactive
  signature: 'async process_proactive(claims_identity: ClaimsIdentity, continuation_activity:
    Activity, audience: str, logic: Callable[[TurnContext], Awaitable])'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: continuation_activity
    isRequired: true
  - name: audience
    isRequired: true
  - name: logic
    isRequired: true
- uid: botbuilder.core.CloudAdapterBase.send_activities
  name: send_activities
  signature: 'async send_activities(context: TurnContext, activities: List[Activity])
    -> List[ResourceResponse]'
  parameters:
  - name: context
    isRequired: true
  - name: activities
    isRequired: true
- uid: botbuilder.core.CloudAdapterBase.update_activity
  name: update_activity
  signature: 'async update_activity(context: TurnContext, activity: Activity)'
  parameters:
  - name: context
    isRequired: true
  - name: activity
    isRequired: true
attributes:
- uid: botbuilder.core.CloudAdapterBase.CONNECTOR_FACTORY_KEY
  name: CONNECTOR_FACTORY_KEY
  signature: CONNECTOR_FACTORY_KEY = 'ConnectorFactory'
- uid: botbuilder.core.CloudAdapterBase.USER_TOKEN_CLIENT_KEY
  name: USER_TOKEN_CLIENT_KEY
  signature: USER_TOKEN_CLIENT_KEY = 'UserTokenClient'
