### YamlMime:PythonClass
uid: botbuilder.core.skills.skill_handler.SkillHandler
name: SkillHandler
fullName: botbuilder.core.skills.skill_handler.SkillHandler
module: botbuilder.core.skills.skill_handler
inheritances:
- botbuilder.core.channel_service_handler.ChannelServiceHandler
constructor:
  syntax: 'SkillHandler(adapter: botbuilder.core.bot_adapter.BotAdapter, bot: botbuilder.core.bot.Bot,
    conversation_id_factory: botbuilder.core.skills.conversation_id_factory.ConversationIdFactoryBase,
    credential_provider: botframework.connector.auth.credential_provider.CredentialProvider,
    auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration,
    channel_provider: Optional[botframework.connector.auth.channel_provider.ChannelProvider]
    = None, logger: object = None)'
methods:
- uid: botbuilder.core.skills.skill_handler.SkillHandler.on_delete_activity
  name: on_delete_activity
  summary: 'delete_activity() API for Skill.


    Delete an existing activity.


    Some channels allow you to delete an existing activity, and if successful

    this method will remove the specified activity.'
  signature: 'on_delete_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str)'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
- uid: botbuilder.core.skills.skill_handler.SkillHandler.on_reply_to_activity
  name: on_reply_to_activity
  summary: 'reply_to_activity() API for Skill.


    This method allows you to reply to an activity.


    This is slightly different from SendToConversation().

    * SendToConversation(conversation_id) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversation_id,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.

    :param claims_identity: Claims identity for the bot.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity.yml>

    :param conversation_id:The conversation ID.

    :type conversation_id: str

    :param activity_id: Activity ID to send.

    :type activity_id: str

    :param activity: Activity to send.

    :type activity: Activity

    :return:'
  signature: 'on_reply_to_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.skills.skill_handler.SkillHandler.on_send_to_conversation
  name: on_send_to_conversation
  summary: 'send_to_conversation() API for Skill


    This method allows you to send an activity to the end of a conversation.


    This is slightly different from ReplyToActivity().

    * SendToConversation(conversation_id) - will append the activity to the end

    of the conversation according to the timestamp or semantics of the channel.

    * ReplyToActivity(conversation_id,ActivityId) - adds the activity as a reply

    to another activity, if the channel supports it. If the channel does not

    support nested replies, ReplyToActivity falls back to SendToConversation.


    Use ReplyToActivity when replying to a specific activity in the

    conversation.


    Use SendToConversation in all other cases.

    :param claims_identity: Claims identity for the bot.

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity.yml>

    :param conversation_id:The conversation ID.

    :type conversation_id: str

    :param activity: Activity to send.

    :type activity: Activity

    :return:'
  signature: 'on_send_to_conversation(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity: botbuilder.schema._models_py3.Activity)'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.skills.skill_handler.SkillHandler.on_update_activity
  name: on_update_activity
  summary: "update_activity() API for Skill.\n\nEdit an existing activity.\n\nSome\
    \ channels allow you to edit an existing activity to reflect the new\nstate of\
    \ a bot conversation.\n\nFor example, you can remove buttons after someone has\
    \ clicked \u201CApprove\u201D\nbutton."
  signature: 'on_update_activity(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    conversation_id: str, activity_id: str, activity: botbuilder.schema._models_py3.Activity)'
  parameters:
  - name: claims_identity
    isRequired: true
  - name: conversation_id
    isRequired: true
  - name: activity_id
    isRequired: true
  - name: activity
    isRequired: true
attributes:
- uid: botbuilder.core.skills.skill_handler.SkillHandler.SKILL_CONVERSATION_REFERENCE_KEY
  name: SKILL_CONVERSATION_REFERENCE_KEY
  signature: SKILL_CONVERSATION_REFERENCE_KEY = 'botbuilder.core.skills.SkillConversationReference'
