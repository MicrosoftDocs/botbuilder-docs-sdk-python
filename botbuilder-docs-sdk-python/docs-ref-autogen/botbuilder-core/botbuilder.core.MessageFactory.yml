### YamlMime:PythonClass
uid: botbuilder.core.MessageFactory
name: MessageFactory
fullName: botbuilder.core.MessageFactory
module: botbuilder.core
inheritances:
- builtins.object
summary: 'A set of utility functions designed to assist with the formatting of the
  various message types a

  bot can return.'
methods:
- uid: botbuilder.core.MessageFactory.attachment
  name: attachment
  summary: "Returns a single message activity containing an attachment.\n\n\nmessage\
    \ = MessageFactory.attachment(CardFactory.hero_card(HeroCard(title='White T-Shirt',\n\
    \   images=[CardImage(url=\n      '[https://example.com/whiteShirt.jpg](https://example.com/whiteShirt.jpg)'\n\
    \      )],\n\n   buttons=[CardAction(title='buy')])))\n\n\nawait context.send_activity(message)"
  signature: 'attachment(attachment: botbuilder.schema._models_py3.Attachment, text:
    str = None, speak: str = None, input_hint: str = None)'
  parameters:
  - name: attachment
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.MessageFactory.carousel
  name: carousel
  summary: "Returns a message that will display a set of attachments using a carousel\
    \ layout.\n\n\nmessage = MessageFactory.carousel([CardFactory.hero_card(HeroCard(title='title1',\n\
    \      images=[CardImage(url='imageUrl1')],\n      buttons=[CardAction(title='button1')])),\n\
    \n   CardFactory.hero_card(HeroCard(title='title2',\n      images=[CardImage(url='imageUrl2')],\n\
    \      buttons=[CardAction(title='button2')])),\n\n   CardFactory.hero_card(HeroCard(title='title3',\n\
    \      images=[CardImage(url='imageUrl3')],\n      buttons=[CardAction(title='button3')]))])\n\
    \n\nawait context.send_activity(message)"
  signature: 'carousel(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
    text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
  parameters:
  - name: attachments
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.MessageFactory.content_url
  name: content_url
  summary: "Returns a message that will display a single image or video to a user.\n\
    \n\nmessage = MessageFactory.content_url('[https://example.com/hawaii.jpg](https://example.com/hawaii.jpg)',\
    \ 'image/jpeg',\n   'Hawaii Trip', 'A photo from our family vacation.')\n\n\n\
    await context.send_activity(message)"
  signature: 'content_url(url: str, content_type: str, name: str = None, text: str
    = None, speak: str = None, input_hint: str = None)'
  parameters:
  - name: url
    isRequired: true
  - name: content_type
    isRequired: true
  - name: name
    defaultValue: None
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.MessageFactory.list
  name: list
  summary: "Returns a message that will display a set of attachments in list form.\n\
    \n\nmessage = MessageFactory.list([CardFactory.hero_card(HeroCard(title='title1',\n\
    \      images=[CardImage(url='imageUrl1')],\n      buttons=[CardAction(title='button1')])),\n\
    \n   CardFactory.hero_card(HeroCard(title='title2',\n      images=[CardImage(url='imageUrl2')],\n\
    \      buttons=[CardAction(title='button2')])),\n\n   CardFactory.hero_card(HeroCard(title='title3',\n\
    \      images=[CardImage(url='imageUrl3')],\n      buttons=[CardAction(title='button3')]))])\n\
    \n\nawait context.send_activity(message)"
  signature: 'list(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
    text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
  parameters:
  - name: attachments
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: None
- uid: botbuilder.core.MessageFactory.suggested_actions
  name: suggested_actions
  summary: "Returns a message that includes a set of suggested actions and optional\
    \ text.\n\n\nmessage = MessageFactory.suggested_actions([CardAction(title='a',\
    \ type=ActionTypes.im_back, value='a'),\n   CardAction(title='b', type=ActionTypes.im_back,\
    \ value='b'),\n   CardAction(title='c', type=ActionTypes.im_back, value='c')],\n\
    \   'Choose a color')\n\n\nawait context.send_activity(message)"
  signature: 'suggested_actions(actions: typing.List[botbuilder.schema._models_py3.CardAction],
    text: str = None, speak: str = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
  parameters:
  - name: actions
    isRequired: true
  - name: text
    defaultValue: None
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: InputHints.accepting_input
- uid: botbuilder.core.MessageFactory.text
  name: text
  summary: 'Returns a simple text message.



    message = MessageFactory.text(''Greetings from example message'')

    await context.send_activity(message)'
  signature: 'text(text: str, speak: str = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
  parameters:
  - name: text
    isRequired: true
  - name: speak
    defaultValue: None
  - name: input_hint
    defaultValue: InputHints.accepting_input
