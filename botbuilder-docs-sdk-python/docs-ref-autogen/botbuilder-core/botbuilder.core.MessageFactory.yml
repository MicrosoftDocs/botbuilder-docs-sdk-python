### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.MessageFactory.attachment
  - botbuilder.core.MessageFactory.carousel
  - botbuilder.core.MessageFactory.content_url
  - botbuilder.core.MessageFactory.list
  - botbuilder.core.MessageFactory.suggested_actions
  - botbuilder.core.MessageFactory.text
  class: botbuilder.core.MessageFactory
  fullName: botbuilder.core.MessageFactory
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: botbuilder.core
  name: MessageFactory
  source:
    id: MessageFactory
    path: libraries/botbuilder-core\botbuilder\core\message_factory.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\message_factory.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 36
  summary: 'A set of utility functions designed to assist with the formatting of the
    various message types a

    bot can return.'
  syntax: {}
  type: class
  uid: botbuilder.core.MessageFactory
- class: botbuilder.core.MessageFactory
  fullName: botbuilder.core.MessageFactory.attachment
  langs:
  - python
  module: botbuilder.core
  name: 'attachment(attachment: botbuilder.schema._models_py3.Attachment, text: str
    = None, speak: str = None, input_hint: str = None)'
  source:
    id: attachment
    path: libraries/botbuilder-core\botbuilder\core\message_factory.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\message_factory.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 99
  summary: "Returns a single message activity containing an attachment.\n\n\nmessage\
    \ = MessageFactory.attachment(CardFactory.hero_card(HeroCard(title='White T-Shirt',\n\
    \   images=[CardImage(url=\n      '[https://example.com/whiteShirt.jpg](https://example.com/whiteShirt.jpg)'\n\
    \      )],\n\n   buttons=[CardAction(title='buy')])))\n\n\nawait context.send_activity(message)"
  syntax:
    content: 'attachment(attachment: botbuilder.schema._models_py3.Attachment, text:
      str = None, speak: str = None, input_hint: str = None)'
    parameters:
    - description: ''
      id: attachment
    - description: ''
      id: text
    - description: ''
      id: speak
    - description: ''
      id: input_hint
  type: method
  uid: botbuilder.core.MessageFactory.attachment
- class: botbuilder.core.MessageFactory
  fullName: botbuilder.core.MessageFactory.carousel
  langs:
  - python
  module: botbuilder.core
  name: 'carousel(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
    text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
  source:
    id: carousel
    path: libraries/botbuilder-core\botbuilder\core\message_factory.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\message_factory.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 159
  summary: "Returns a message that will display a set of attachments using a carousel\
    \ layout.\n\n\nmessage = MessageFactory.carousel([CardFactory.hero_card(HeroCard(title='title1',\n\
    \      images=[CardImage(url='imageUrl1')],\n      buttons=[CardAction(title='button1')])),\n\
    \n   CardFactory.hero_card(HeroCard(title='title2',\n      images=[CardImage(url='imageUrl2')],\n\
    \      buttons=[CardAction(title='button2')])),\n\n   CardFactory.hero_card(HeroCard(title='title3',\n\
    \      images=[CardImage(url='imageUrl3')],\n      buttons=[CardAction(title='button3')]))])\n\
    \n\nawait context.send_activity(message)"
  syntax:
    content: 'carousel(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
      text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
    parameters:
    - description: ''
      id: attachments
    - description: ''
      id: text
    - description: ''
      id: speak
    - description: ''
      id: input_hint
  type: method
  uid: botbuilder.core.MessageFactory.carousel
- class: botbuilder.core.MessageFactory
  fullName: botbuilder.core.MessageFactory.content_url
  langs:
  - python
  module: botbuilder.core
  name: 'content_url(url: str, content_type: str, name: str = None, text: str = None,
    speak: str = None, input_hint: str = None)'
  source:
    id: content_url
    path: libraries/botbuilder-core\botbuilder\core\message_factory.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\message_factory.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 191
  summary: "Returns a message that will display a single image or video to a user.\n\
    \n\nmessage = MessageFactory.content_url('[https://example.com/hawaii.jpg](https://example.com/hawaii.jpg)',\
    \ 'image/jpeg',\n   'Hawaii Trip', 'A photo from our family vacation.')\n\n\n\
    await context.send_activity(message)"
  syntax:
    content: 'content_url(url: str, content_type: str, name: str = None, text: str
      = None, speak: str = None, input_hint: str = None)'
    parameters:
    - description: ''
      id: url
    - description: ''
      id: content_type
    - description: ''
      id: name
    - description: ''
      id: text
    - description: ''
      id: speak
    - description: ''
      id: input_hint
  type: method
  uid: botbuilder.core.MessageFactory.content_url
- class: botbuilder.core.MessageFactory
  fullName: botbuilder.core.MessageFactory.list
  langs:
  - python
  module: botbuilder.core
  name: 'list(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
    text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
  source:
    id: list
    path: libraries/botbuilder-core\botbuilder\core\message_factory.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\message_factory.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 127
  summary: "Returns a message that will display a set of attachments in list form.\n\
    \n\nmessage = MessageFactory.list([CardFactory.hero_card(HeroCard(title='title1',\n\
    \      images=[CardImage(url='imageUrl1')],\n      buttons=[CardAction(title='button1')])),\n\
    \n   CardFactory.hero_card(HeroCard(title='title2',\n      images=[CardImage(url='imageUrl2')],\n\
    \      buttons=[CardAction(title='button2')])),\n\n   CardFactory.hero_card(HeroCard(title='title3',\n\
    \      images=[CardImage(url='imageUrl3')],\n      buttons=[CardAction(title='button3')]))])\n\
    \n\nawait context.send_activity(message)"
  syntax:
    content: 'list(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
      text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
    parameters:
    - description: ''
      id: attachments
    - description: ''
      id: text
    - description: ''
      id: speak
    - description: ''
      id: input_hint
  type: method
  uid: botbuilder.core.MessageFactory.list
- class: botbuilder.core.MessageFactory
  fullName: botbuilder.core.MessageFactory.suggested_actions
  langs:
  - python
  module: botbuilder.core
  name: 'suggested_actions(actions: typing.List[botbuilder.schema._models_py3.CardAction],
    text: str = None, speak: str = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
  source:
    id: suggested_actions
    path: libraries/botbuilder-core\botbuilder\core\message_factory.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\message_factory.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 66
  summary: "Returns a message that includes a set of suggested actions and optional\
    \ text.\n\n\nmessage = MessageFactory.suggested_actions([CardAction(title='a',\
    \ type=ActionTypes.im_back, value='a'),\n   CardAction(title='b', type=ActionTypes.im_back,\
    \ value='b'),\n   CardAction(title='c', type=ActionTypes.im_back, value='c')],\n\
    \   'Choose a color')\n\n\nawait context.send_activity(message)"
  syntax:
    content: 'suggested_actions(actions: typing.List[botbuilder.schema._models_py3.CardAction],
      text: str = None, speak: str = None, input_hint: str = <InputHints.accepting_input:
      ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
    parameters:
    - description: ''
      id: actions
    - description: ''
      id: text
    - description: ''
      id: speak
    - description: ''
      id: input_hint
  type: method
  uid: botbuilder.core.MessageFactory.suggested_actions
- class: botbuilder.core.MessageFactory
  fullName: botbuilder.core.MessageFactory.text
  langs:
  - python
  module: botbuilder.core
  name: 'text(text: str, speak: str = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
  source:
    id: text
    path: libraries/botbuilder-core\botbuilder\core\message_factory.py
    remote:
      branch: master
      path: libraries/botbuilder-core\botbuilder\core\message_factory.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 42
  summary: 'Returns a simple text message.



    message = MessageFactory.text(''Greetings from example message'')

    await context.send_activity(message)'
  syntax:
    content: 'text(text: str, speak: str = None, input_hint: str = <InputHints.accepting_input:
      ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
    parameters:
    - description: ''
      id: text
    - description: ''
      id: speak
    - description: ''
      id: input_hint
  type: method
  uid: botbuilder.core.MessageFactory.text
references:
- fullName: botbuilder.core.MessageFactory.attachment
  isExternal: false
  name: 'attachment(attachment: botbuilder.schema._models_py3.Attachment, text: str
    = None, speak: str = None, input_hint: str = None)'
  parent: botbuilder.core.MessageFactory
  uid: botbuilder.core.MessageFactory.attachment
- fullName: botbuilder.core.MessageFactory.carousel
  isExternal: false
  name: 'carousel(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
    text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
  parent: botbuilder.core.MessageFactory
  uid: botbuilder.core.MessageFactory.carousel
- fullName: botbuilder.core.MessageFactory.content_url
  isExternal: false
  name: 'content_url(url: str, content_type: str, name: str = None, text: str = None,
    speak: str = None, input_hint: str = None)'
  parent: botbuilder.core.MessageFactory
  uid: botbuilder.core.MessageFactory.content_url
- fullName: botbuilder.core.MessageFactory.list
  isExternal: false
  name: 'list(attachments: typing.List[botbuilder.schema._models_py3.Attachment],
    text: str = None, speak: str = None, input_hint: str = None) -> botbuilder.schema._models_py3.Activity'
  parent: botbuilder.core.MessageFactory
  uid: botbuilder.core.MessageFactory.list
- fullName: botbuilder.core.MessageFactory.suggested_actions
  isExternal: false
  name: 'suggested_actions(actions: typing.List[botbuilder.schema._models_py3.CardAction],
    text: str = None, speak: str = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
  parent: botbuilder.core.MessageFactory
  uid: botbuilder.core.MessageFactory.suggested_actions
- fullName: botbuilder.core.MessageFactory.text
  isExternal: false
  name: 'text(text: str, speak: str = None, input_hint: str = <InputHints.accepting_input:
    ''acceptingInput''>) -> botbuilder.schema._models_py3.Activity'
  parent: botbuilder.core.MessageFactory
  uid: botbuilder.core.MessageFactory.text
