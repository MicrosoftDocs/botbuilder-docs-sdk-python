### YamlMime:PythonClass
uid: botbuilder.core.BotState
name: BotState
fullName: botbuilder.core.BotState
module: botbuilder.core
inheritances:
- botbuilder.core.property_manager.PropertyManager
summary: 'Defines a state management object and automates the reading and writing
  of

  associated state properties to a storage layer.


  Initializes a new instance of the <xref:botbuilder.core.BotState> class.'
constructor:
  syntax: 'BotState(storage: Storage, context_service_key: str)'
  parameters:
  - name: storage
    description: The storage layer this state management object will use to store
      and retrieve state
    isRequired: true
    types:
    - <xref:bptbuilder.core.Storage>
  - name: context_service_key
    description: The key for the state cache for this <xref:botbuilder.core.BotState>
    isRequired: true
    types:
    - <xref:str>
remarks: 'This constructor creates a state management object and associated scope.
  The object uses

  the :param storage: to persist state property values and the :param context_service_key:
  to cache state

  within the context for each turn.

  '
methods:
- uid: botbuilder.core.BotState.clear_state
  name: clear_state
  summary: Clears any state currently stored in this state scope.
  signature: 'async clear_state(turn_context: TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: None
  remarks: 'This function must be called in order for the cleared state to be persisted
    to the underlying store.

    '
- uid: botbuilder.core.BotState.create_property
  name: create_property
  summary: Creates a property definition and registers it with this <xref:botbuilder.core.BotState>.
  signature: 'create_property(name: str) -> StatePropertyAccessor'
  parameters:
  - name: name
    description: The name of the property
    isRequired: true
    types:
    - <xref:str>
  return:
    description: If successful, the state property accessor created
    types:
    - <xref:botbuilder.core.StatePropertyAccessor>
- uid: botbuilder.core.BotState.delete
  name: delete
  summary: Deletes any state currently stored in this state scope.
  signature: 'async delete(turn_context: TurnContext) -> None'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: None
- uid: botbuilder.core.BotState.delete_property_value
  name: delete_property_value
  summary: Deletes a property from the state cache in the turn context.
  signature: 'async delete_property_value(turn_context: TurnContext, property_name:
    str) -> None'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:<xref::TurnContext`>>
  - name: property_name
    description: The name of the property to delete
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
- uid: botbuilder.core.BotState.get
  name: get
  signature: 'get(turn_context: TurnContext) -> Dict[str, object]'
  parameters:
  - name: turn_context
    isRequired: true
- uid: botbuilder.core.BotState.get_cached_state
  name: get_cached_state
  summary: 'Gets the cached bot state instance that wraps the raw cached data for
    this "BotState"

    from the turn context.'
  signature: 'get_cached_state(turn_context: TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: The cached bot state instance.
- uid: botbuilder.core.BotState.get_property_value
  name: get_property_value
  summary: Gets the value of the specified property in the turn context.
  signature: 'async get_property_value(turn_context: TurnContext, property_name: str)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: property_name
    description: The property name
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The value of the property
- uid: botbuilder.core.BotState.get_storage_key
  name: get_storage_key
  signature: 'abstract get_storage_key(turn_context: TurnContext) -> str'
  parameters:
  - name: turn_context
    isRequired: true
- uid: botbuilder.core.BotState.load
  name: load
  summary: Reads the current state object and caches it in the context object for
    this turn.
  signature: 'async load(turn_context: TurnContext, force: bool = False) -> None'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: force
    description: Optional, true to bypass the cache
    defaultValue: 'False'
    types:
    - <xref:bool>
- uid: botbuilder.core.BotState.save_changes
  name: save_changes
  summary: 'Saves the state cached in the current context for this turn.

    If the state has changed, it saves the state cached in the current context for
    this turn.'
  signature: 'async save_changes(turn_context: TurnContext, force: bool = False) ->
    None'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: force
    description: Optional, true to save state to storage whether or not there are
      changes
    defaultValue: 'False'
    types:
    - <xref:bool>
- uid: botbuilder.core.BotState.set_property_value
  name: set_property_value
  summary: Sets a property to the specified value in the turn context.
  signature: 'async set_property_value(turn_context: TurnContext, property_name: str,
    value: object) -> None'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: property_name
    description: The property name
    isRequired: true
    types:
    - <xref:str>
  - name: value
    description: The value to assign to the property
    isRequired: true
    types:
    - <xref:Object>
  return:
    description: None
