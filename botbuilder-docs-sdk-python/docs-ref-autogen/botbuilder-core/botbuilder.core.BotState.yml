### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.core.BotState.clear_state
  - botbuilder.core.BotState.create_property
  - botbuilder.core.BotState.delete
  - botbuilder.core.BotState.delete_property_value
  - botbuilder.core.BotState.get
  - botbuilder.core.BotState.get_cached_state
  - botbuilder.core.BotState.get_property_value
  - botbuilder.core.BotState.get_storage_key
  - botbuilder.core.BotState.load
  - botbuilder.core.BotState.save_changes
  - botbuilder.core.BotState.set_property_value
  class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState
  inheritance:
  - inheritance:
    - type: builtins.object
    type: botbuilder.core.property_manager.PropertyManager
  langs:
  - python
  module: botbuilder.core
  name: BotState
  remarks: 'Each state management object defines a scope for a storage layer.

    State properties are created within a state management scope, and the Bot Framework

    defines these scopes: <xref:botbuilder.core.ConversationState>, <xref:botbuilder.core.UserState>,
    and <xref:botbuilder.core.PrivateConversationState>.

    You can define additional scopes for your bot.

    '
  source:
    id: BotState
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 33
  summary: 'Defines a state management object and automates the reading and writing
    of

    associated state properties to a storage layer.'
  syntax:
    content: 'BotState(storage: botbuilder.core.storage.Storage, context_service_key:
      str)'
  type: class
  uid: botbuilder.core.BotState
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.clear_state
  langs:
  - python
  module: botbuilder.core
  name: 'clear_state(turn_context: botbuilder.core.turn_context.TurnContext)'
  namewithoutparameters: clear_state
  remarks: 'This function must be called in order for the cleared state to be persisted
    to the underlying store.

    '
  source:
    id: clear_state
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 137
  summary: Clears any state currently stored in this state scope.
  syntax:
    content: 'clear_state(turn_context: botbuilder.core.turn_context.TurnContext)'
    parameters:
    - description: The context object for this turn
      id: turn_context
      isRequired: true
      type:
      - botbuilder.core.TurnContext
    return:
      description: None
  type: method
  uid: botbuilder.core.BotState.clear_state
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.create_property
  langs:
  - python
  module: botbuilder.core
  name: 'create_property(name: str) -> botbuilder.core.state_property_accessor.StatePropertyAccessor'
  namewithoutparameters: create_property
  source:
    id: create_property
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 77
  summary: Creates a property definition and registers it with this <xref:botbuilder.core.BotState>.
  syntax:
    content: 'create_property(name: str) -> botbuilder.core.state_property_accessor.StatePropertyAccessor'
    parameters:
    - description: The name of the property
      id: name
      isRequired: true
      type:
      - str
    return:
      description: If successful, the state property accessor created
      type:
      - <xref:botbuilder.core.StatePropertyAccessor>
  type: method
  uid: botbuilder.core.BotState.create_property
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.delete
  langs:
  - python
  module: botbuilder.core
  name: 'delete(turn_context: botbuilder.core.turn_context.TurnContext) -> None'
  namewithoutparameters: delete
  source:
    id: delete
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 156
  summary: Deletes any state currently stored in this state scope.
  syntax:
    content: 'delete(turn_context: botbuilder.core.turn_context.TurnContext) -> None'
    parameters:
    - description: The context object for this turn
      id: turn_context
      isRequired: true
      type:
      - botbuilder.core.TurnContext
    return:
      description: None
  type: method
  uid: botbuilder.core.BotState.delete
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.delete_property_value
  langs:
  - python
  module: botbuilder.core
  name: 'delete_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
    property_name: str) -> None'
  namewithoutparameters: delete_property_value
  source:
    id: delete_property_value
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 198
  summary: Deletes a property from the state cache in the turn context.
  syntax:
    content: 'delete_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
      property_name: str) -> None'
    parameters:
    - description: The context object for this turn
      id: turn_context
      isRequired: true
      type:
      - :TurnContext`
    - description: The name of the property to delete
      id: property_name
      isRequired: true
      type:
      - str
    return:
      description: None
  type: method
  uid: botbuilder.core.BotState.delete_property_value
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.get
  langs:
  - python
  module: botbuilder.core
  name: 'get(turn_context: botbuilder.core.turn_context.TurnContext) -> typing.Dict[str,
    object]'
  namewithoutparameters: get
  source:
    id: get
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 90
  syntax:
    content: 'get(turn_context: botbuilder.core.turn_context.TurnContext) -> typing.Dict[str,
      object]'
  type: method
  uid: botbuilder.core.BotState.get
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.get_cached_state
  langs:
  - python
  module: botbuilder.core
  name: 'get_cached_state(turn_context: botbuilder.core.turn_context.TurnContext)'
  namewithoutparameters: get_cached_state
  source:
    id: get_cached_state
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 65
  summary: 'Gets the cached bot state instance that wraps the raw cached data for
    this "BotState"

    from the turn context.'
  syntax:
    content: 'get_cached_state(turn_context: botbuilder.core.turn_context.TurnContext)'
    parameters:
    - description: The context object for this turn.
      id: turn_context
      isRequired: true
      type:
      - botbuilder.core.TurnContext
    return:
      description: The cached bot state instance.
  type: method
  uid: botbuilder.core.BotState.get_cached_state
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.get_property_value
  langs:
  - python
  module: botbuilder.core
  name: 'get_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
    property_name: str)'
  namewithoutparameters: get_property_value
  source:
    id: get_property_value
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 176
  summary: Gets the value of the specified property in the turn context.
  syntax:
    content: 'get_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
      property_name: str)'
    parameters:
    - description: The context object for this turn
      id: turn_context
      isRequired: true
      type:
      - botbuilder.core.TurnContext
    - description: The property name
      id: property_name
      isRequired: true
      type:
      - str
    return:
      description: The value of the property
  type: method
  uid: botbuilder.core.BotState.get_property_value
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.get_storage_key
  langs:
  - python
  module: botbuilder.core
  name: 'get_storage_key(turn_context: botbuilder.core.turn_context.TurnContext) ->
    str'
  namewithoutparameters: get_storage_key
  source:
    id: get_storage_key
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 172
  syntax:
    content: 'get_storage_key(turn_context: botbuilder.core.turn_context.TurnContext)
      -> str'
  type: method
  uid: botbuilder.core.BotState.get_storage_key
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.load
  langs:
  - python
  module: botbuilder.core
  name: 'load(turn_context: botbuilder.core.turn_context.TurnContext, force: bool
    = False) -> None'
  namewithoutparameters: load
  source:
    id: load
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 96
  summary: Reads the current state object and caches it in the context object for
    this turn.
  syntax:
    content: 'load(turn_context: botbuilder.core.turn_context.TurnContext, force:
      bool = False) -> None'
    parameters:
    - description: The context object for this turn
      id: turn_context
      isRequired: true
      type:
      - botbuilder.core.TurnContext
    - description: Optional, true to bypass the cache
      id: force
      isRequired: true
      type:
      - bool
  type: method
  uid: botbuilder.core.BotState.load
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.save_changes
  langs:
  - python
  module: botbuilder.core
  name: 'save_changes(turn_context: botbuilder.core.turn_context.TurnContext, force:
    bool = False) -> None'
  namewithoutparameters: save_changes
  source:
    id: save_changes
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 115
  summary: 'Saves the state cached in the current context for this turn.

    If the state has changed, it saves the state cached in the current context for
    this turn.'
  syntax:
    content: 'save_changes(turn_context: botbuilder.core.turn_context.TurnContext,
      force: bool = False) -> None'
    parameters:
    - description: The context object for this turn
      id: turn_context
      isRequired: true
      type:
      - botbuilder.core.TurnContext
    - description: Optional, true to save state to storage whether or not there are
        changes
      id: force
      isRequired: true
      type:
      - bool
  type: method
  uid: botbuilder.core.BotState.save_changes
- class: botbuilder.core.BotState
  fullName: botbuilder.core.BotState.set_property_value
  langs:
  - python
  module: botbuilder.core
  name: 'set_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
    property_name: str, value: object) -> None'
  namewithoutparameters: set_property_value
  source:
    id: set_property_value
    path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
    remote:
      branch: master
      path: ./libraries/botbuilder-core\botbuilder\core\bot_state.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 217
  summary: Sets a property to the specified value in the turn context.
  syntax:
    content: 'set_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
      property_name: str, value: object) -> None'
    parameters:
    - description: The context object for this turn
      id: turn_context
      isRequired: true
      type:
      - botbuilder.core.TurnContext
    - description: The property name
      id: property_name
      isRequired: true
      type:
      - str
    - description: The value to assign to the property
      id: value
      isRequired: true
      type:
      - Object
    return:
      description: None
  type: method
  uid: botbuilder.core.BotState.set_property_value
references:
- fullName: botbuilder.core.BotState.clear_state
  isExternal: false
  name: 'clear_state(turn_context: botbuilder.core.turn_context.TurnContext)'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.clear_state
- fullName: botbuilder.core.BotState.create_property
  isExternal: false
  name: 'create_property(name: str) -> botbuilder.core.state_property_accessor.StatePropertyAccessor'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.create_property
- fullName: botbuilder.core.BotState.delete
  isExternal: false
  name: 'delete(turn_context: botbuilder.core.turn_context.TurnContext) -> None'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.delete
- fullName: botbuilder.core.BotState.delete_property_value
  isExternal: false
  name: 'delete_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
    property_name: str) -> None'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.delete_property_value
- fullName: botbuilder.core.BotState.get
  isExternal: false
  name: 'get(turn_context: botbuilder.core.turn_context.TurnContext) -> typing.Dict[str,
    object]'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.get
- fullName: botbuilder.core.BotState.get_cached_state
  isExternal: false
  name: 'get_cached_state(turn_context: botbuilder.core.turn_context.TurnContext)'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.get_cached_state
- fullName: botbuilder.core.BotState.get_property_value
  isExternal: false
  name: 'get_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
    property_name: str)'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.get_property_value
- fullName: botbuilder.core.BotState.get_storage_key
  isExternal: false
  name: 'get_storage_key(turn_context: botbuilder.core.turn_context.TurnContext) ->
    str'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.get_storage_key
- fullName: botbuilder.core.BotState.load
  isExternal: false
  name: 'load(turn_context: botbuilder.core.turn_context.TurnContext, force: bool
    = False) -> None'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.load
- fullName: botbuilder.core.BotState.save_changes
  isExternal: false
  name: 'save_changes(turn_context: botbuilder.core.turn_context.TurnContext, force:
    bool = False) -> None'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.save_changes
- fullName: botbuilder.core.BotState.set_property_value
  isExternal: false
  name: 'set_property_value(turn_context: botbuilder.core.turn_context.TurnContext,
    property_name: str, value: object) -> None'
  parent: botbuilder.core.BotState
  uid: botbuilder.core.BotState.set_property_value
