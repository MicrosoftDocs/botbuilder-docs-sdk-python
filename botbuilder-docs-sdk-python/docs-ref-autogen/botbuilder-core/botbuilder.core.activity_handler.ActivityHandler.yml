### YamlMime:PythonClass
uid: botbuilder.core.activity_handler.ActivityHandler
name: ActivityHandler
fullName: botbuilder.core.activity_handler.ActivityHandler
module: botbuilder.core.activity_handler
inheritances:
- botbuilder.core.bot.Bot
summary: Handles activities and should be subclassed.
constructor:
  syntax: ActivityHandler()
remarks: 'Derive from this class to handle particular activity types.

  Yon can add pre and post processing of activities by calling the base class

  in the derived class.

  '
methods:
- uid: botbuilder.core.activity_handler.ActivityHandler.on_conversation_update_activity
  name: on_conversation_update_activity
  summary: 'Invoked when a conversation update activity is received from the channel
    when the base behavior of

    <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn> is used.'
  signature: 'on_conversation_update_activity(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: 'When the <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn>
    method receives a conversation update activity, it calls this

    method.

    Also

    - If the conversation update activity indicates that members other than the bot
    joined the conversation,

    it calls the  <xref:botbuilder.core.activity_handler.ActivityHandler.on_members_added_activity>
    method.

    - If the conversation update activity indicates that members other than the bot
    left the conversation,

    it calls the  <xref:botbuilder.core.activity_handler.ActivityHandler.on_members_removed_activity>  method.

    - In a derived class, override this method to add logic that applies to all conversation
    update activities.

    Add logic to apply before the member added or removed logic before the call to
    this base class method.

    '
- uid: botbuilder.core.activity_handler.ActivityHandler.on_end_of_conversation_activity
  name: on_end_of_conversation_activity
  summary: Invoked when a conversation end activity is received from the channel.
  signature: 'on_end_of_conversation_activity(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_event
  name: on_event
  summary: 'Invoked when an event other than *tokens/response* is received when the
    base behavior of

    <xref:botbuilder.core.activity_handler.ActivityHandler.on_event_activity> is used.'
  signature: 'on_event(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: 'When the <xref:botbuilder.core.activity_handler.ActivityHandler.on_event_activity>
    is used method receives an event with an

    activity name other than *tokens/response*, it calls this method.

    This method could optionally be overridden if the bot is meant to handle miscellaneous
    events.

    '
- uid: botbuilder.core.activity_handler.ActivityHandler.on_event_activity
  name: on_event_activity
  summary: 'Invoked when an event activity is received from the connector when the
    base behavior of

    <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn> is used.'
  signature: 'on_event_activity(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: 'When the <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn>
    method receives an event activity, it calls this method.

    If the activity name is *tokens/response*, it calls <xref:botbuilder.core.activity_handler.ActivityHandler.on_token_response_event>;

    otherwise, it calls <xref:botbuilder.core.activity_handler.ActivityHandler.on_event>.


    In a derived class, override this method to add logic that applies to all event
    activities.

    Add logic to apply before the specific event-handling logic before the call to
    this base class method.

    Add logic to apply after the specific event-handling logic after the call to this
    base class method.


    Event activities communicate programmatic information from a client or channel
    to a bot.

    The meaning of an event activity is defined by the event activity name property,
    which is meaningful within

    the scope of a channel.

    '
- uid: botbuilder.core.activity_handler.ActivityHandler.on_healthcheck
  name: on_healthcheck
  summary: 'Invoked when the bot is sent a health check from the hosting infrastructure
    or, in the case of

    Skills the parent bot. By default, this method acknowledges the health state of
    the bot.


    When the on_invoke_activity method receives an Invoke with a Activity.name of
    *healthCheck*, it

    calls this method.'
  signature: 'on_healthcheck(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: A context object for this turn.
    isRequired: true
  return:
    description: The HealthCheckResponse object
- uid: botbuilder.core.activity_handler.ActivityHandler.on_installation_update
  name: on_installation_update
  summary: 'Override this in a derived class to provide logic specific to

    ActivityTypes.InstallationUpdate activities.'
  signature: 'on_installation_update(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_installation_update_add
  name: on_installation_update_add
  summary: "Override this in a derived class to provide logic specific to\nActivityTypes.InstallationUpdate\
    \ activities with \u2018action\u2019 set to \u2018add\u2019."
  signature: 'on_installation_update_add(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_installation_update_remove
  name: on_installation_update_remove
  summary: "Override this in a derived class to provide logic specific to\nActivityTypes.InstallationUpdate\
    \ activities with \u2018action\u2019 set to \u2018remove\u2019."
  signature: 'on_installation_update_remove(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_invoke_activity
  name: on_invoke_activity
  summary: Registers an activity event handler for the _invoke_ event, emitted for
    every incoming event activity.
  signature: 'on_invoke_activity(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_members_added_activity
  name: on_members_added_activity
  summary: "Override this method in a derived class to provide logic for when members\
    \ other than the bot join\nthe conversation. You can add your bot\u2019s welcome\
    \ logic.\n\nconversation update activity\n:type members_added: [typing.List](https://docs.python.org/3.6/library/typing.html#typing.List)\n\
    :param turn_context: The context object for this turn\n:type turn_context: <xref:botbuilder.core.TurnContext>"
  signature: 'on_members_added_activity(members_added: List[botbuilder.schema._models_py3.ChannelAccount],
    turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: members_added
    isRequired: true
  - name: turn_context
    isRequired: true
  return:
    description: A task that represents the work queued to execute
  remarks: 'When the <xref:botbuilder.core.activity_handler.ActivityHandler.on_conversation_update_activity>
    method receives a conversation

    update activity that indicates

    one or more users other than the bot are joining the conversation, it calls this
    method.

    '
- uid: botbuilder.core.activity_handler.ActivityHandler.on_members_removed_activity
  name: on_members_removed_activity
  summary: "Override this method in a derived class to provide logic for when members\
    \ other than the bot leave\nthe conversation.  You can add your bot\u2019s good-bye\
    \ logic.\n\nconversation update activity\n:type members_added: [typing.List](https://docs.python.org/3.6/library/typing.html#typing.List)\n\
    :param turn_context: The context object for this turn\n:type turn_context: <xref:botbuilder.core.TurnContext>"
  signature: 'on_members_removed_activity(members_removed: List[botbuilder.schema._models_py3.ChannelAccount],
    turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: members_removed
    isRequired: true
  - name: turn_context
    isRequired: true
  return:
    description: A task that represents the work queued to execute
  remarks: 'When the <xref:botbuilder.core.activity_handler.ActivityHandler.on_conversation_update_activity>
    method receives a conversation

    update activity that indicates one or more users other than the bot are leaving
    the conversation,

    it calls this method.

    '
- uid: botbuilder.core.activity_handler.ActivityHandler.on_message_activity
  name: on_message_activity
  summary: 'Override this method in a derived class to provide logic specific to activities,

    such as the conversational logic.'
  signature: 'on_message_activity(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_message_reaction_activity
  name: on_message_reaction_activity
  summary: 'Invoked when an event activity is received from the connector when the
    base behavior of

    <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn> is used.'
  signature: 'on_message_reaction_activity(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: "Message reactions correspond to the user adding a \u2018like\u2019 or\
    \ \u2018sad\u2019 etc. (often an emoji) to a previously\nsent activity.\n\nMessage\
    \ reactions are only supported by a few channels. The activity that the message\
    \ reaction corresponds\nto is indicated in the reply to Id property. The value\
    \ of this property is the activity id of a previously\nsent activity given back\
    \ to the bot as the response from a send call.\nWhen the <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn>\
    \ method receives a message reaction activity, it calls this\nmethod.\n\n* If\
    \ the message reaction indicates that reactions were added to a message, it calls\
    \ \n\n<xref:botbuilder.core.activity_handler.ActivityHandler.on_reaction_added.yml>.\n\
    - If the message reaction indicates that reactions were removed from a message,\
    \ it calls\n<xref:botbuilder.core.activity_handler.ActivityHandler.on_reaction_removed.yml>.\n\
    \nIn a derived class, override this method to add logic that applies to all message\
    \ reaction activities.\nAdd logic to apply before the reactions added or removed\
    \ logic before the call to the this base class\nmethod.\nAdd logic to apply after\
    \ the reactions added or removed logic after the call to the this base class method.\n"
- uid: botbuilder.core.activity_handler.ActivityHandler.on_reactions_added
  name: on_reactions_added
  summary: 'Override this method in a derived class to provide logic for when reactions
    to a previous activity

    are added to the conversation.'
  signature: 'on_reactions_added(message_reactions: List[botbuilder.schema._models_py3.MessageReaction],
    turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: message_reactions
    description: The list of reactions added
    isRequired: true
    types:
    - '[typing.List](https://docs.python.org/3.6/library/typing.html#typing.List)'
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: "Message reactions correspond to the user adding a \u2018like\u2019 or\
    \ \u2018sad\u2019 etc. (often an emoji)\nto a previously sent message on the conversation.\n\
    Message reactions are supported by only a few channels.\nThe activity that the\
    \ message is in reaction to is identified by the activity\u2019s reply to ID property.\n\
    The value of this property is the activity ID of a previously sent activity. When\
    \ the bot sends an activity,\nthe channel assigns an ID to it, which is available\
    \ in the resource response Id of the result.\n"
- uid: botbuilder.core.activity_handler.ActivityHandler.on_reactions_removed
  name: on_reactions_removed
  summary: 'Override this method in a derived class to provide logic for when reactions
    to a previous activity

    are removed from the conversation.'
  signature: 'on_reactions_removed(message_reactions: List[botbuilder.schema._models_py3.MessageReaction],
    turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: message_reactions
    description: The list of reactions removed
    isRequired: true
    types:
    - '[typing.List](https://docs.python.org/3.6/library/typing.html#typing.List)'
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: "Message reactions correspond to the user adding a \u2018like\u2019 or\
    \ \u2018sad\u2019 etc. (often an emoji)\nto a previously sent message on the conversation.\
    \ Message reactions are supported by only a few channels.\nThe activity that the\
    \ message is in reaction to is identified by the activity\u2019s reply to Id property.\n\
    The value of this property is the activity ID of a previously sent activity. When\
    \ the bot sends an activity,\nthe channel assigns an ID to it, which is available\
    \ in the resource response Id of the result.\n"
- uid: botbuilder.core.activity_handler.ActivityHandler.on_sign_in_invoke
  name: on_sign_in_invoke
  summary: "Invoked when a signin/verifyState or signin/tokenExchange event is received\
    \ when the base behavior of\non_invoke_activity(TurnContext{InvokeActivity}) is\
    \ used.\nIf using an OAuthPrompt, override this method to forward this Activity\u201D\
    / to the current dialog.\nBy default, this method does nothing."
  signature: 'on_sign_in_invoke(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_token_response_event
  name: on_token_response_event
  summary: 'Invoked when a *tokens/response* event is received when the base behavior
    of

    <xref:botbuilder.core.activity_handler.ActivityHandler.on_event_activity> is used.

    If using an *oauth_prompt*, override this method to forward this activity to the
    current dialog.'
  signature: 'on_token_response_event(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: 'When the <xref:botbuilder.core.activity_handler.ActivityHandler.on_event>
    method receives an event with an activity name of

    *tokens/response*, it calls this method. If your bot uses an *oauth_prompt*, forward
    the incoming

    activity to the current dialog.

    '
- uid: botbuilder.core.activity_handler.ActivityHandler.on_turn
  name: on_turn
  summary: 'Called by the adapter (for example, <xref:botbuilder.core.activity_handler.BotFrameworkAdapter.yml>)
    at runtime

    in order to process an inbound <xref:botbuilder.schema.Activity.yml>.'
  signature: 'on_turn(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: 'It calls other methods in this class based on the type of the activity
    to

    process, which allows a derived class to provide type-specific logic in a controlled
    way.

    In a derived class, override this method to add logic that applies to all activity
    types.

    Also

    - Add logic to apply before the type-specific logic and before calling <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn>.

    - Add logic to apply after the type-specific logic after calling <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn>.

    '
- uid: botbuilder.core.activity_handler.ActivityHandler.on_typing_activity
  name: on_typing_activity
  summary: 'Override this in a derived class to provide logic specific to

    ActivityTypes.typing activities, such as the conversational logic.'
  signature: 'on_typing_activity(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
- uid: botbuilder.core.activity_handler.ActivityHandler.on_unrecognized_activity_type
  name: on_unrecognized_activity_type
  summary: 'Invoked when an activity other than a message, conversation update, or
    event is received when the base

    behavior of <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn> is
    used.

    If overridden, this method could potentially respond to any of the other activity
    types.'
  signature: 'on_unrecognized_activity_type(turn_context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: turn_context
    description: The context object for this turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: A task that represents the work queued to execute
  remarks: 'When the <xref:botbuilder.core.activity_handler.ActivityHandler.on_turn>
    method receives an activity that is not a message,

    conversation update, message reaction, or event activity, it calls this method.

    '
