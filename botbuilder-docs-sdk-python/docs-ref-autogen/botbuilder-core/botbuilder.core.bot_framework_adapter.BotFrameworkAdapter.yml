### YamlMime:PythonClass
uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter
name: BotFrameworkAdapter
fullName: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter
module: botbuilder.core.bot_framework_adapter
inheritances:
- botbuilder.core.bot_adapter.BotAdapter
- botbuilder.core.oauth.extended_user_token_provider.ExtendedUserTokenProvider
- botbuilder.core.oauth.connector_client_builder.ConnectorClientBuilder
summary: Defines an adapter to connect a bot to a service endpoint.
constructor:
  syntax: 'BotFrameworkAdapter(settings: BotFrameworkAdapterSettings)'
  parameters:
  - name: settings
remarks: 'The bot adapter encapsulates authentication processes and sends activities
  to and

  receives activities from the Bot Connector Service. When your bot receives an activity,

  the adapter creates a context object, passes it to your bot''s application logic,
  and

  sends responses back to the user''s channel.

  The adapter processes and directs incoming activities in through the bot middleware

  pipeline to your bot''s logic and then back out again.

  As each activity flows in and out of the bot, each piece of middleware can inspect
  or act

  upon the activity, both before and after the bot logic runs.

  '
methods:
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.can_process_outgoing_activity
  name: can_process_outgoing_activity
  signature: 'can_process_outgoing_activity(activity: Activity) -> bool'
  parameters:
  - name: activity
    isRequired: true
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.continue_conversation
  name: continue_conversation
  summary: 'Continues a conversation with a user.


    and is generally found in the *MicrosoftAppId* parameter in *config.py*.

    :type bot_id: <xref:typing.str>

    :param claims_identity: The bot claims identity

    :type claims_identity: <xref:botframework.connector.auth.ClaimsIdentity>

    :param audience:

    :type audience: <xref:typing.str>'
  signature: 'async continue_conversation(reference: ConversationReference, callback:
    Callable, bot_id: str | None = None, claims_identity: ClaimsIdentity | None =
    None, audience: str | None = None)'
  parameters:
  - name: reference
    isRequired: true
  - name: callback
    isRequired: true
  - name: bot_id
    defaultValue: None
  - name: claims_identity
    defaultValue: None
  - name: audience
    defaultValue: None
  return:
    description: A task that represents the work queued to execute.
  exceptions:
  - type: It raises an argument null exception.
  remarks: 'This is often referred to as the bots *proactive messaging* flow as it
    lets the bot proactively

    send messages to a conversation or user that are already in a communication.

    Scenarios such as sending notifications or coupons to a user are enabled by this
    function.

    '
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.create_connector_client
  name: create_connector_client
  summary: Implementation of ConnectorClientProvider.create_connector_client.
  signature: 'async create_connector_client(service_url: str, identity: ClaimsIdentity
    | None = None, audience: str | None = None) -> ConnectorClient'
  parameters:
  - name: service_url
    description: The service URL
    isRequired: true
  - name: identity
    description: The claims identity
    defaultValue: None
  - name: audience
    defaultValue: None
  return:
    description: An instance of the <xref:botbuilder.core.bot_framework_adapter.ConnectorClient>
      class
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.create_conversation
  name: create_conversation
  summary: Starts a new conversation with a user. Used to direct message to a member
    of a group.
  signature: 'async create_conversation(reference: ConversationReference, logic: Callable[[TurnContext],
    Awaitable] | None = None, conversation_parameters: ConversationParameters | None
    = None, channel_id: str | None = None, service_url: str | None = None, credentials:
    AppCredentials | None = None)'
  parameters:
  - name: reference
    description: The conversation reference that contains the tenant
    isRequired: true
    types:
    - <xref:botbuilder.schema.ConversationReference>
  - name: logic
    description: The logic to use for the creation of the conversation
    defaultValue: None
    types:
    - <xref:typing.Callable>
  - name: conversation_parameters
    description: The information to use to create the conversation
    defaultValue: None
  - name: channel_id
    description: The ID for the channel.
    defaultValue: None
    types:
    - <xref:typing.str>
  - name: service_url
    description: The channel's service URL endpoint.
    defaultValue: None
    types:
    - <xref:typing.str>
  - name: credentials
    description: The application credentials for the bot.
    defaultValue: None
    types:
    - <xref:botframework.connector.auth.AppCredentials>
  return:
    description: A task representing the work queued to execute.
  exceptions:
  - type: It raises a generic exception error.
  remarks: 'To start a conversation, your bot must know its account information and
    the user''s

    account information on that channel.

    Most channels only support initiating a direct message (non-group) conversation.

    The adapter attempts to create a new conversation on the channel, and

    then sends a conversation update activity through its middleware pipeline

    to the the callback method.

    If the conversation is established with the specified users, the ID of the activity

    will contain the ID of the new conversation.

    '
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.delete_activity
  name: delete_activity
  summary: 'Deletes an activity that was previously sent to a channel. It should be
    noted that not all

    channels support this feature.


    > [!NOTE]

    > The activity_id of the <xref:botbuilder.schema.ConversationReference> identifies
    the activity to delete.

    >'
  signature: 'async delete_activity(context: TurnContext, reference: ConversationReference)'
  parameters:
  - name: context
    description: The context object for the turn
    isRequired: true
    types:
    - <xref:<xref::class:>>`<<TurnContext'>>
  - name: reference
    description: Conversation reference for the activity to delete
    isRequired: true
    types:
    - <xref:botbuilder.schema.ConversationReference>
  return:
    description: A task that represents the work queued to execute
  exceptions:
  - type: A exception error
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.delete_conversation_member
  name: delete_conversation_member
  summary: Deletes a member from the current conversation.
  signature: 'async delete_conversation_member(context: TurnContext, member_id: str)
    -> None'
  parameters:
  - name: context
    description: The context object for the turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: member_id
    description: The ID of the member to remove from the conversation
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A task that represents the work queued to execute.</returns
  exceptions:
  - type: A exception error
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.exchange_token
  name: exchange_token
  summary: Performs a token exchange operation such as for single sign-on.
  signature: 'async exchange_token(turn_context: TurnContext, connection_name: str,
    user_id: str, exchange_request: TokenExchangeRequest) -> TokenResponse'
  parameters:
  - name: turn_context
    description: Context for the current turn of conversation with the user.
    isRequired: true
  - name: connection_name
    description: Name of the auth connection to use.
    isRequired: true
  - name: user_id
    description: The user id associated with the token..
    isRequired: true
  - name: exchange_request
    description: The exchange request details, either a token to exchange or a uri
      to exchange.
    isRequired: true
  return:
    description: If the task completes, the exchanged token is returned.
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.exchange_token_from_credentials
  name: exchange_token_from_credentials
  summary: Performs a token exchange operation such as for single sign-on.
  signature: 'async exchange_token_from_credentials(turn_context: TurnContext, oauth_app_credentials:
    AppCredentials, connection_name: str, user_id: str, exchange_request: TokenExchangeRequest)
    -> TokenResponse'
  parameters:
  - name: turn_context
    description: Context for the current turn of conversation with the user.
    isRequired: true
  - name: oauth_app_credentials
    description: AppCredentials for OAuth.
    isRequired: true
  - name: connection_name
    description: Name of the auth connection to use.
    isRequired: true
  - name: user_id
    description: The user id associated with the token..
    isRequired: true
  - name: exchange_request
    description: The exchange request details, either a token to exchange or a uri
      to exchange.
    isRequired: true
  return:
    description: If the task completes, the exchanged token is returned.
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_aad_tokens
  name: get_aad_tokens
  summary: 'Retrieves Azure Active Directory tokens for particular resources on a
    configured connection.


    from the Activity in the TurnContext.

    :type user_id: str

    :param oauth_app_credentials: (Optional) AppCredentials for OAuth.

    :type oauth_app_credentials: <xref:botframework.connector.auth.AppCredential>'
  signature: 'async get_aad_tokens(context: TurnContext, connection_name: str, resource_urls:
    List[str], user_id: str | None = None, oauth_app_credentials: AppCredentials |
    None = None) -> Dict[str, TokenResponse]'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: resource_urls
    isRequired: true
  - name: user_id
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
  return:
    description: Dictionary of resource Urls to the corresponding :class:'botbuilder.schema.TokenResponse`
    types:
    - <xref:typing.Dict>
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_activity_members
  name: get_activity_members
  summary: 'Lists the members of a given activity.


    If not specified the current activities ID will be used.'
  signature: 'async get_activity_members(context: TurnContext, activity_id: str)'
  parameters:
  - name: context
    isRequired: true
  - name: activity_id
    isRequired: true
  return:
    description: List of Members of the activity
  exceptions:
  - type: An exception error
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_conversation_member
  name: get_conversation_member
  summary: Retrieve a member of a current conversation.
  signature: 'async get_conversation_member(context: TurnContext, member_id: str)
    -> ChannelAccount'
  parameters:
  - name: context
    description: The context object for the turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: member_id
    description: The member Id
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A member of the current conversation
  exceptions:
  - type: <xref:A TypeError if missing member_id>, <xref:service_url>, <xref:or conversation.id>
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_conversation_members
  name: get_conversation_members
  summary: Lists the members of a current conversation.
  signature: 'async get_conversation_members(context: TurnContext)'
  parameters:
  - name: context
    description: The context object for the turn
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  return:
    description: List of members of the current conversation
  exceptions:
  - type: TypeError if missing service_url or conversation.id
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_conversations
  name: get_conversations
  summary: 'Lists the Conversations in which this bot has participated for a given
    channel server.


    *context.activity.serviceUrl*

    :type service_url: str'
  signature: 'async get_conversations(service_url: str, credentials: AppCredentials,
    continuation_token: str | None = None)'
  parameters:
  - name: continuation_token
    description: The continuation token from the previous page of results
    defaultValue: None
    types:
    - <xref:str>
  - name: service_url
    isRequired: true
  - name: credentials
    isRequired: true
  return:
    description: A task that represents the work queued to execute
  exceptions:
  - type: A generic exception error
  remarks: 'The channel server returns results in pages and each page will include
    a *continuationToken* that

    can be used to fetch the next page of results from the server.

    If the task completes successfully, the result contains a page of the members
    of the current conversation.

    This overload may be called from outside the context of a conversation, as only
    the bot''s service URL and

    credentials are required.

    '
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_oauth_sign_in_link
  name: get_oauth_sign_in_link
  summary: Gets the raw sign-in link to be sent to the user for sign-in for a connection
    name.
  signature: 'async get_oauth_sign_in_link(context: TurnContext, connection_name:
    str, final_redirect: str | None = None, oauth_app_credentials: AppCredentials
    | None = None) -> str'
  parameters:
  - name: context
    description: Context for the current turn of conversation with the user
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: connection_name
    description: Name of the auth connection to use
    isRequired: true
    types:
    - <xref:str>
  - name: final_redirect
    description: The final URL that the OAuth flow will redirect to.
    defaultValue: None
  - name: oauth_app_credentials
    description: (Optional) AppCredentials for OAuth.
    defaultValue: None
    types:
    - <xref:botframework.connector.auth.AppCredential>
  return:
    description: If the task completes successfully, the result contains the raw sign-in
      link
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_sign_in_resource_from_user
  name: get_sign_in_resource_from_user
  summary: Get the raw signin link to be sent to the user for signin for a connection
    name.
  signature: 'async get_sign_in_resource_from_user(turn_context: TurnContext, connection_name:
    str, user_id: str, final_redirect: str | None = None) -> SignInUrlResponse'
  parameters:
  - name: turn_context
    description: Context for the current turn of conversation with the user.
    isRequired: true
  - name: connection_name
    description: Name of the auth connection to use.
    isRequired: true
  - name: user_id
    description: The user id that will be associated with the token.
    isRequired: true
  - name: final_redirect
    description: The final URL that the OAuth flow will redirect to.
    defaultValue: None
  return:
    description: A task that represents the work queued to execute.
  remarks: 'If the task completes successfully, the result contains the raw signin
    link.

    '
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_sign_in_resource_from_user_and_credentials
  name: get_sign_in_resource_from_user_and_credentials
  summary: Get the raw signin link to be sent to the user for signin for a connection
    name.
  signature: 'async get_sign_in_resource_from_user_and_credentials(turn_context: TurnContext,
    oauth_app_credentials: AppCredentials, connection_name: str, user_id: str, final_redirect:
    str | None = None) -> SignInUrlResponse'
  parameters:
  - name: turn_context
    description: Context for the current turn of conversation with the user.
    isRequired: true
  - name: oauth_app_credentials
    description: Credentials for OAuth.
    isRequired: true
  - name: connection_name
    description: Name of the auth connection to use.
    isRequired: true
  - name: user_id
    description: The user id that will be associated with the token.
    isRequired: true
  - name: final_redirect
    description: The final URL that the OAuth flow will redirect to.
    defaultValue: None
  return:
    description: A task that represents the work queued to execute.
  remarks: 'If the task completes successfully, the result contains the raw signin
    link.

    '
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_token_status
  name: get_token_status
  summary: 'Retrieves the token status for each configured connection for the given
    user.


    Blank will return token status for all configured connections.

    :type include_filter: str

    :param oauth_app_credentials: (Optional) AppCredentials for OAuth.

    :type oauth_app_credentials: <xref:botframework.connector.auth.AppCredential>'
  signature: 'async get_token_status(context: TurnContext, connection_name: str |
    None = None, user_id: str | None = None, include_filter: str | None = None, oauth_app_credentials:
    AppCredentials | None = None) -> List[TokenStatus]'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    defaultValue: None
  - name: user_id
    defaultValue: None
  - name: include_filter
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
  return:
    description: Array of <xref:botframework.connector.token_api.modelsTokenStatus>
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.get_user_token
  name: get_user_token
  summary: 'Attempts to retrieve the token for a user that''s in a login flow.


    :param magic_code" (Optional) user entered code to validate

    :str magic_code" str

    :param oauth_app_credentials: (Optional) AppCredentials for OAuth.

    :type oauth_app_credentials: <xref:botframework.connector.auth.AppCredential>'
  signature: 'async get_user_token(context: TurnContext, connection_name: str, magic_code:
    str | None = None, oauth_app_credentials: AppCredentials | None = None) -> TokenResponse'
  parameters:
  - name: context
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: magic_code
    defaultValue: None
  - name: oauth_app_credentials
    defaultValue: None
  return:
    description: Token Response
    types:
    - <xref:<xref::class:'botbuilder.schema.TokenResponse`>>
  exceptions:
  - type: An exception error
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.key_for_app_credentials
  name: key_for_app_credentials
  signature: 'static key_for_app_credentials(app_id: str, scope: str)'
  parameters:
  - name: app_id
    isRequired: true
  - name: scope
    isRequired: true
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.key_for_connector_client
  name: key_for_connector_client
  signature: 'static key_for_connector_client(service_url: str, app_id: str, scope:
    str)'
  parameters:
  - name: service_url
    isRequired: true
  - name: app_id
    isRequired: true
  - name: scope
    isRequired: true
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.parse_request
  name: parse_request
  summary: 'Parses and validates request

    :param req:

    :return:'
  signature: async static parse_request(req)
  parameters:
  - name: req
    isRequired: true
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.process_activity
  name: process_activity
  summary: Creates a turn context and runs the middleware pipeline for an incoming
    activity.
  signature: 'async process_activity(req, auth_header: str, logic: Callable)'
  parameters:
  - name: req
    description: The incoming activity
    isRequired: true
    types:
    - <xref:typing.str>
  - name: auth_header
    description: The HTTP authentication header of the request
    isRequired: true
    types:
    - <xref:typing.str>
  - name: logic
    description: The logic to execute at the end of the adapter's middleware pipeline.
    isRequired: true
    types:
    - <xref:typing.Callable>
  return:
    description: A task that represents the work queued to execute.
  remarks: 'This class processes an activity received by the bots web server. This
    includes any messages

    sent from a user and is the method that drives what''s often referred to as the

    bots *reactive messaging* flow.

    Call this method to reactively send a message to a conversation.

    If the task completes successfully, then an <xref:botbuilder.core.bot_framework_adapter.InvokeResponse>
    is returned;

    otherwise. *null* is returned.

    '
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.process_activity_with_identity
  name: process_activity_with_identity
  signature: 'async process_activity_with_identity(activity: Activity, identity: ClaimsIdentity,
    logic: Callable)'
  parameters:
  - name: activity
    isRequired: true
  - name: identity
    isRequired: true
  - name: logic
    isRequired: true
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.process_outgoing_activity
  name: process_outgoing_activity
  signature: 'async process_outgoing_activity(turn_context: TurnContext, activity:
    Activity) -> ResourceResponse'
  parameters:
  - name: turn_context
    isRequired: true
  - name: activity
    isRequired: true
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.send_activities
  name: send_activities
  summary: Sends a set of activities to the user. An array of responses from the server
    will be returned.
  signature: 'async send_activities(context: TurnContext, activities: List[Activity])
    -> List[ResourceResponse]'
  parameters:
  - name: context
    description: The context object for the turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.bot_framework_adapter.TurnContext>
  - name: activities
    description: The activities to send.
    isRequired: true
    types:
    - <xref:typing.List>[<xref:Activity>]
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.sign_out_user
  name: sign_out_user
  summary: Signs the user out with the token server.
  signature: 'async sign_out_user(context: TurnContext, connection_name: str | None
    = None, user_id: str | None = None, oauth_app_credentials: AppCredentials | None
    = None)'
  parameters:
  - name: context
    description: Context for the current turn of conversation with the user
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: connection_name
    description: Name of the auth connection to use
    defaultValue: None
    types:
    - <xref:str>
  - name: user_id
    description: User id of user to sign out
    defaultValue: None
    types:
    - <xref:str>
  - name: oauth_app_credentials
    description: (Optional) AppCredentials for OAuth.
    defaultValue: None
    types:
    - <xref:botframework.connector.auth.AppCredential>
- uid: botbuilder.core.bot_framework_adapter.BotFrameworkAdapter.update_activity
  name: update_activity
  summary: 'Replaces an activity that was previously sent to a channel. It should
    be noted that not all

    channels support this feature.'
  signature: 'async update_activity(context: TurnContext, activity: Activity)'
  parameters:
  - name: context
    description: The context object for the turn
    isRequired: true
    types:
    - <xref:<xref::class:>>`<<TurnContext'>>
  - name: activity
    description: New replacement activity
    isRequired: true
    types:
    - <xref:botbuilder.schema.Activity>
  return:
    description: A task that represents the work queued to execute
  exceptions:
  - type: A generic exception error
  remarks: 'If the activity is successfully sent, the task result contains

    a <xref:botbuilder.schema.ResourceResponse> object containing the ID that

    the receiving channel assigned to the activity.

    Before calling this function, set the ID of the replacement activity to the ID

    of the activity to replace.

    '
