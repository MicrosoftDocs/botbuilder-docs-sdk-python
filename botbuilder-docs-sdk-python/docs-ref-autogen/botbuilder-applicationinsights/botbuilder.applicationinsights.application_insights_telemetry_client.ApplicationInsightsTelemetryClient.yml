### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.flush
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_dependency
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_event
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_exception
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_metric
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_pageview
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_request
  - botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_trace
  class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.core.bot_telemetry_client.BotTelemetryClient
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: ApplicationInsightsTelemetryClient
  summary: Application Insights Telemetry Client.
  syntax:
    content: 'ApplicationInsightsTelemetryClient(instrumentation_key: str, telemetry_client:
      applicationinsights.TelemetryClient.TelemetryClient = None, telemetry_processor:
      typing.Callable[[object, object], bool] = None)'
  type: class
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.flush
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: flush()
  namewithoutparameters: flush
  summary: 'Flushes data in the queue. Data in the queue will be sent either immediately
    irrespective of what sender is

    being used.'
  syntax:
    content: flush()
    parameters: []
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.flush
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_dependency
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: 'track_dependency(name: str, data: str, type_name: str = None, target: str
    = None, duration: int = None, success: bool = None, result_code: str = None, properties:
    typing.Dict[str, object] = None, measurements: typing.Dict[str, object] = None,
    dependency_id: str = None)'
  namewithoutparameters: track_dependency
  summary: "Sends a single dependency telemetry that was captured for the application.\n\
    :param name: the name of the command initiated with this dependency call. Low\
    \ cardinality value.\n\n\n   Examples are stored procedure name and URL path template."
  syntax:
    content: 'track_dependency(name: str, data: str, type_name: str = None, target:
      str = None, duration: int = None, success: bool = None, result_code: str = None,
      properties: typing.Dict[str, object] = None, measurements: typing.Dict[str,
      object] = None, dependency_id: str = None)'
    parameters:
    - description: 'the command initiated by this dependency call.

        Examples are SQL statement and HTTP URL with all query parameters.'
      id: data
      isRequired: true
    - description: "the dependency type name. Low cardinality value for logical grouping\
        \ of dependencies and\ninterpretation of other fields like commandName and\
        \ resultCode. Examples are SQL, Azure table, and HTTP.\n\n   (default to:\
        \ None)"
      id: type_name
      isRequired: true
    - description: 'the target site of a dependency call. Examples are server name,
        host address.

        (default to: None)'
      id: target
      isRequired: true
    - description: 'the number of milliseconds that this dependency call lasted.

        (defaults to: None)'
      id: duration
      isRequired: true
    - description: 'true if the dependency call ended in success, false otherwise.

        (defaults to: None)'
      id: success
      isRequired: true
    - description: 'the result code of a dependency call. Examples are SQL error code
        and HTTP status code.

        (defaults to: None)'
      id: result_code
      isRequired: true
    - description: 'the set of custom properties the client wants attached to this
        data item. (defaults to: None)'
      id: properties
      isRequired: true
    - description: 'the set of custom measurements the client wants to attach to this
        data item.

        (defaults to: None)'
      id: measurements
      isRequired: true
    - description: 'the id for this dependency call. If None, a new uuid will be generated.
        (defaults to: None)'
      id: id
      isRequired: true
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_dependency
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_event
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: 'track_event(name: str, properties: typing.Dict[str, object] = None, measurements:
    typing.Dict[str, object] = None) -> None'
  namewithoutparameters: track_event
  summary: "Send information about a single event that has occurred in the context\
    \ of the application.\n:param name: the data to associate to this event.\n:param\
    \ properties: the set of custom properties the client wants attached to this data\
    \ item.\n\n\n   (defaults to: None)"
  syntax:
    content: 'track_event(name: str, properties: typing.Dict[str, object] = None,
      measurements: typing.Dict[str, object] = None) -> None'
    parameters:
    - description: 'the set of custom measurements the client wants to attach to this
        data item.

        (defaults to: None)'
      id: measurements
      isRequired: true
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_event
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_exception
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: track_exception
  namewithoutparameters: track_exception
  summary: "Send information about a single exception that occurred in the application.\n\
    :param exception_type: the type of the exception that was thrown.\n:param value:\
    \ the exception that the client wants to send.\n:param trace: the traceback information\
    \ as returned by <xref:sys.exc_info>.\n:param properties: the set of custom properties\
    \ the client wants attached to this data item.\n\n\n   (defaults to: None)"
  syntax:
    parameters:
    - description: 'the set of custom measurements the client wants to attach to this
        data item.

        (defaults to: None)'
      id: measurements
      isRequired: true
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_exception
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_metric
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: 'track_metric(name: str, value: float, tel_type: botbuilder.core.bot_telemetry_client.TelemetryDataPointType
    = None, count: int = None, min_val: float = None, max_val: float = None, std_dev:
    float = None, properties: typing.Dict[str, object] = None) -> NotImplemented'
  namewithoutparameters: track_metric
  summary: "Send information about a single metric data point that was captured for\
    \ the application.\n:param name: The name of the metric that was captured.\n:param\
    \ value: The value of the metric that was captured.\n:param tel_type: The type\
    \ of the metric. (defaults to: TelemetryDataPointType.aggregation`)\n:param count:\
    \ the number of metrics that were aggregated into this data point. (defaults to:\
    \ None)\n:param min_val: the minimum of all metrics collected that were aggregated\
    \ into this data point.\n\n\n   (defaults to: None)"
  syntax:
    content: 'track_metric(name: str, value: float, tel_type: botbuilder.core.bot_telemetry_client.TelemetryDataPointType
      = None, count: int = None, min_val: float = None, max_val: float = None, std_dev:
      float = None, properties: typing.Dict[str, object] = None) -> NotImplemented'
    parameters:
    - description: 'the maximum of all metrics collected that were aggregated into
        this data point.

        (defaults to: None)'
      id: max_val
      isRequired: true
    - description: 'the standard deviation of all metrics collected that were aggregated
        into this data point.

        (defaults to: None)'
      id: std_dev
      isRequired: true
    - description: 'the set of custom properties the client wants attached to this
        data item.

        (defaults to: None)'
      id: properties
      isRequired: true
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_metric
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_pageview
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: 'track_pageview(name: str, url: str, duration: int = 0, properties: typing.Dict[str,
    object] = None, measurements: typing.Dict[str, object] = None) -> None'
  namewithoutparameters: track_pageview
  summary: "Send information about the page viewed in the application (a web page\
    \ for instance).\n:param name: the name of the page that was viewed.\n:param url:\
    \ the URL of the page that was viewed.\n:param duration: the duration of the page\
    \ view in milliseconds. (defaults to: 0)\n:param properties: the set of custom\
    \ properties the client wants attached to this data item.\n\n\n   (defaults to:\
    \ None)"
  syntax:
    content: 'track_pageview(name: str, url: str, duration: int = 0, properties: typing.Dict[str,
      object] = None, measurements: typing.Dict[str, object] = None) -> None'
    parameters:
    - description: 'the set of custom measurements the client wants to attach to this
        data item.

        (defaults to: None)'
      id: measurements
      isRequired: true
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_pageview
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_request
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: 'track_request(name: str, url: str, success: bool, start_time: str = None,
    duration: int = None, response_code: str = None, http_method: str = None, properties:
    typing.Dict[str, object] = None, measurements: typing.Dict[str, object] = None,
    request_id: str = None)'
  namewithoutparameters: track_request
  summary: "Sends a single request that was captured for the application.\n:param\
    \ name: The name for this request. All requests with the same name will be grouped\
    \ together.\n:param url: The actual URL for this request (to show in individual\
    \ request instances).\n:param success: True if the request ended in success, False\
    \ otherwise.\n:param start_time: the start time of the request. The value should\
    \ look the same as the one returned by\n\n\n   <xref:datetime.isoformat> (defaults\
    \ to: None)"
  syntax:
    content: 'track_request(name: str, url: str, success: bool, start_time: str =
      None, duration: int = None, response_code: str = None, http_method: str = None,
      properties: typing.Dict[str, object] = None, measurements: typing.Dict[str,
      object] = None, request_id: str = None)'
    parameters:
    - description: 'the number of milliseconds that this request lasted. (defaults
        to: None)'
      id: duration
      isRequired: true
    - description: 'the response code that this request returned. (defaults to: None)'
      id: response_code
      isRequired: true
    - description: 'the HTTP method that triggered this request. (defaults to: None)'
      id: http_method
      isRequired: true
    - description: 'the set of custom properties the client wants attached to this
        data item.

        (defaults to: None)'
      id: properties
      isRequired: true
    - description: 'the set of custom measurements the client wants to attach to this
        data item.

        (defaults to: None)'
      id: measurements
      isRequired: true
    - description: 'the id for this request. If None, a new uuid will be generated.
        (defaults to: None)'
      id: request_id
      isRequired: true
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_request
- class: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_trace
  langs:
  - python
  module: botbuilder.applicationinsights.application_insights_telemetry_client
  name: 'track_trace(name: str, properties: typing.Dict[str, object] = None, severity:
    botbuilder.core.bot_telemetry_client.Severity = None)'
  namewithoutparameters: track_trace
  summary: 'Sends a single trace statement.

    :param name: the trace statement.

    :param properties: the set of custom properties the client wants attached to this
    data item. (defaults to: None)

    :param severity: the severity level of this trace, one of DEBUG, INFO, WARNING,
    ERROR, CRITICAL'
  syntax:
    content: 'track_trace(name: str, properties: typing.Dict[str, object] = None,
      severity: botbuilder.core.bot_telemetry_client.Severity = None)'
  type: method
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_trace
references:
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.flush
  isExternal: false
  name: flush()
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.flush
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_dependency
  isExternal: false
  name: 'track_dependency(name: str, data: str, type_name: str = None, target: str
    = None, duration: int = None, success: bool = None, result_code: str = None, properties:
    typing.Dict[str, object] = None, measurements: typing.Dict[str, object] = None,
    dependency_id: str = None)'
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_dependency
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_event
  isExternal: false
  name: 'track_event(name: str, properties: typing.Dict[str, object] = None, measurements:
    typing.Dict[str, object] = None) -> None'
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_event
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_exception
  isExternal: false
  name: track_exception
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_exception
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_metric
  isExternal: false
  name: 'track_metric(name: str, value: float, tel_type: botbuilder.core.bot_telemetry_client.TelemetryDataPointType
    = None, count: int = None, min_val: float = None, max_val: float = None, std_dev:
    float = None, properties: typing.Dict[str, object] = None) -> NotImplemented'
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_metric
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_pageview
  isExternal: false
  name: 'track_pageview(name: str, url: str, duration: int = 0, properties: typing.Dict[str,
    object] = None, measurements: typing.Dict[str, object] = None) -> None'
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_pageview
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_request
  isExternal: false
  name: 'track_request(name: str, url: str, success: bool, start_time: str = None,
    duration: int = None, response_code: str = None, http_method: str = None, properties:
    typing.Dict[str, object] = None, measurements: typing.Dict[str, object] = None,
    request_id: str = None)'
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_request
- fullName: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_trace
  isExternal: false
  name: 'track_trace(name: str, properties: typing.Dict[str, object] = None, severity:
    botbuilder.core.bot_telemetry_client.Severity = None)'
  parent: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient
  uid: botbuilder.applicationinsights.application_insights_telemetry_client.ApplicationInsightsTelemetryClient.track_trace
