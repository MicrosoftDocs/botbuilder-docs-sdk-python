### YamlMime:PythonClass
uid: botbuilder.dialogs.prompts.OAuthPrompt
name: OAuthPrompt
fullName: botbuilder.dialogs.prompts.OAuthPrompt
module: botbuilder.dialogs.prompts
inheritances:
- botbuilder.dialogs.dialog.Dialog
constructor:
  syntax: 'OAuthPrompt(dialog_id: str, settings: botbuilder.dialogs.prompts.oauth_prompt_settings.OAuthPromptSettings,
    validator: Optional[Callable[botbuilder.dialogs.prompts.prompt_validator_context.PromptValidatorContext,
    Awaitable[bool]]] = None)'
methods:
- uid: botbuilder.dialogs.prompts.OAuthPrompt.begin_dialog
  name: begin_dialog
  summary: 'Starts an authentication prompt dialog. Called when an authentication
    prompt dialog is pushed onto the

    dialog stack and is being activated.'
  signature: 'begin_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
    options: Optional[botbuilder.dialogs.prompts.prompt_options.PromptOptions] = None)'
  parameters:
  - name: dialog_context
    description: The dialog context for the current turn of the conversation
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.prompts.DialogContext>
  - name: options
    description: Optional, additional information to pass to the prompt being started
    defaultValue: None
    types:
    - <xref:botbuilder.dialogs.prompts.PromptOptions>
  return:
    description: Dialog turn result
    types:
    - :class`:*DialogTurnResult*
  remarks: 'If the task is successful, the result indicates whether the prompt is
    still active after the turn

    has been processed.

    '
- uid: botbuilder.dialogs.prompts.OAuthPrompt.continue_dialog
  name: continue_dialog
  summary: Continues a dialog. Called when a prompt dialog is the active dialog and
    the user replied with a new activity.
  signature: 'continue_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext)'
  parameters:
  - name: dialog_context
    description: The dialog context for the current turn of the conversation
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.prompts.DialogContext>
  return:
    description: Dialog turn result
    types:
    - <xref:botbuilder.dialogs.prompts.DialogTurnResult>
  remarks: "If the task is successful, the result indicates whether the dialog is\
    \ still\nactive after the turn has been processed by the dialog.\nThe prompt generally\
    \ continues to receive the user\u2019s replies until it accepts the\nuser\u2019\
    s reply as valid input for the prompt.\n"
- uid: botbuilder.dialogs.prompts.OAuthPrompt.get_user_token
  name: get_user_token
  summary: "Gets the user\u2019s tokeN."
  signature: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, code:
    Optional[str] = None)'
  parameters:
  - name: context
    description: Context for the current turn of conversation with the user
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.prompts.TurnContext>
  - name: code
    description: (Optional) Optional user entered code to validate.
    defaultValue: None
    types:
    - '[str](https://docs.python.org/3.6/library/stdtypes.html#str)'
  return:
    description: "A response that includes the user\u2019s token"
    types:
    - <xref:botbuilder.dialogs.prompts.TokenResponse>
  remarks: "If the task is successful and the user already has a token or the user\
    \ successfully signs in,\nthe result contains the user\u2019s token.\n"
- uid: botbuilder.dialogs.prompts.OAuthPrompt.sign_out_user
  name: sign_out_user
  summary: Signs out the user
  signature: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext)'
  parameters:
  - name: context
    description: Context for the current turn of conversation with the user
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.prompts.TurnContext>
  return:
    description: A task representing the work queued to execute
  remarks: "If the task is successful and the user already has a token or the user\
    \ successfully signs in,\nthe result contains the user\u2019s token.\n"
attributes:
- uid: botbuilder.dialogs.prompts.OAuthPrompt.PERSISTED_CALLER
  name: PERSISTED_CALLER
  summary: Creates a new prompt that asks the user to sign in, using the Bot Framework
    Single Sign On (SSO) service.
  signature: PERSISTED_CALLER = 'caller'
  remarks: "The prompt will attempt to retrieve the users current token and if the\
    \ user isn\u2019t signed in, it\nwill send them an *OAuthCard* containing a button\
    \ they can press to sign in. Depending on the channel,\nthe user will be sent\
    \ through one of two possible sign-in flows:\n- The automatic sign-in flow where\
    \ once the user signs in, the SSO service will forward\nthe bot the users access\
    \ token using either an *event* or *invoke* activity.\n- The \u201Cmagic code\u201D\
    \ flow where once the user signs in, they will be prompted by the SSO service\n\
    to send the bot a six digit code confirming their identity. This code will be\
    \ sent as a\nstandard *message* activity.\nBoth flows are automatically supported\
    \ by the *OAuthPrompt* and they only thing you need to be careful of\nis that\
    \ you don\u2019t block the *event* and *invoke* activities that the prompt might\
    \ be waiting on.\n\nYou should avoid persisting the access token with your bots\
    \ other state. The Bot Frameworks SSO service\nwill securely store the token on\
    \ your behalf. If you store it in your bots state,\nit could expire or be revoked\
    \ in between turns.\nWhen calling the prompt from within a waterfall step, you\
    \ should use the token within the step\nfollowing the prompt and then let the\
    \ token go out of scope at the end of your function.\n\nWhen used with your bots\
    \ <xref:botbuilder.dialogs.prompts.DialogSet>, you can simply add a new instance\
    \ of the prompt as a named\ndialog using :meth`DialogSet.add()`.\nYou can then\
    \ start the prompt from a waterfall step using either <xref:DialogContext.begin>\
    \ or\n<xref:DialogContext.prompt>.\nThe user will be prompted to sign in as needed\
    \ and their access token will be passed as an argument to\nthe callers next waterfall\
    \ step.\n"
- uid: botbuilder.dialogs.prompts.OAuthPrompt.PERSISTED_EXPIRES
  name: PERSISTED_EXPIRES
  signature: PERSISTED_EXPIRES = 'expires'
- uid: botbuilder.dialogs.prompts.OAuthPrompt.PERSISTED_OPTIONS
  name: PERSISTED_OPTIONS
  signature: PERSISTED_OPTIONS = 'options'
- uid: botbuilder.dialogs.prompts.OAuthPrompt.PERSISTED_STATE
  name: PERSISTED_STATE
  signature: PERSISTED_STATE = 'state'
