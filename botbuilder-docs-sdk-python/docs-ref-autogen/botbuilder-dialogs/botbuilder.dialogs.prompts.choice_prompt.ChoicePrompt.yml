### YamlMime:PythonClass
uid: botbuilder.dialogs.prompts.choice_prompt.ChoicePrompt
name: ChoicePrompt
fullName: botbuilder.dialogs.prompts.choice_prompt.ChoicePrompt
module: botbuilder.dialogs.prompts.choice_prompt
summary: "Prompts a user to select from a list of choices.\n\nBy default the prompt\
  \ will return to the calling dialog a *FoundChoice* object containing the choice\
  \ that\n   was selected."
constructor:
  syntax: 'ChoicePrompt(dialog_id: str, validator: Callable[[PromptValidatorContext],
    bool] = None, default_locale: str = None, choice_defaults: Dict[str, ChoiceFactoryOptions]
    = None)'
  parameters:
  - name: dialog_id
    description: Unique ID of the dialog within its parent *DialogSet*.
    isRequired: true
  - name: validator
    description: '(Optional) validator that will be called each time the user responds
      to the prompt.

      If the validator replies with a message no additional retry prompt will be sent.'
    defaultValue: None
  - name: default_locale
    description: '(Optional) locale to use if *dc.context.activity.locale* not specified.

      Defaults to a value of *en-us*.'
    defaultValue: None
  - name: choice_defaults
    description: '(Optional) Overrides the dictionary of

      Bot Framework SDK-supported _default_choice_options.

      As type Dict[str, ChoiceFactoryOptions], the key is a string of the locale,
      such as "en-us".

      *  Must be passed in to each ConfirmPrompt that needs the custom choice defaults.'
    defaultValue: None
methods:
- uid: botbuilder.dialogs.prompts.choice_prompt.ChoicePrompt.on_prompt
  name: on_prompt
  signature: 'async on_prompt(turn_context: TurnContext, state: Dict[str, object],
    options: PromptOptions, is_retry: bool)'
  parameters:
  - name: turn_context
    isRequired: true
  - name: state
    isRequired: true
  - name: options
    isRequired: true
  - name: is_retry
    isRequired: true
- uid: botbuilder.dialogs.prompts.choice_prompt.ChoicePrompt.on_recognize
  name: on_recognize
  signature: 'async on_recognize(turn_context: TurnContext, state: Dict[str, object],
    options: PromptOptions) -> PromptRecognizerResult'
  parameters:
  - name: turn_context
    isRequired: true
  - name: state
    isRequired: true
  - name: options
    isRequired: true
