### YamlMime:PythonClass
uid: botbuilder.dialogs.memory.scopes.turn_memory_scope.CaseInsensitiveDict
name: CaseInsensitiveDict
fullName: botbuilder.dialogs.memory.scopes.turn_memory_scope.CaseInsensitiveDict
module: botbuilder.dialogs.memory.scopes.turn_memory_scope
inheritances:
- builtins.dict
constructor:
  syntax: CaseInsensitiveDict(*args, **kwargs)
methods:
- uid: botbuilder.dialogs.memory.scopes.turn_memory_scope.CaseInsensitiveDict.get
  name: get
  summary: Return the value for key if key is in the dictionary, else default.
  signature: get(key, *args, **kwargs)
  parameters:
  - name: key
    isRequired: true
- uid: botbuilder.dialogs.memory.scopes.turn_memory_scope.CaseInsensitiveDict.pop
  name: pop
  summary: If key is not found, d is returned if given, otherwise KeyError is raised
  signature: pop(k[,d]) -> v, remove specified key and return the corresponding value.
  parameters:
  - name: key
    isRequired: true
- uid: botbuilder.dialogs.memory.scopes.turn_memory_scope.CaseInsensitiveDict.setdefault
  name: setdefault
  summary: 'Insert key with a value of default if key is not in the dictionary.


    Return the value for key if key is in the dictionary, else default.'
  signature: setdefault(key, *args, **kwargs)
  parameters:
  - name: key
    isRequired: true
- uid: botbuilder.dialogs.memory.scopes.turn_memory_scope.CaseInsensitiveDict.update
  name: update
  summary: 'If E is present and has a .keys() method, then does:  for k in E: D[k]
    = E[k]

    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] =
    v

    In either case, this is followed by: for k in F:  D[k] = F[k]'
  signature: update([E, ]**F) -> None.  Update D from dict/iterable E and F.
  parameters:
  - name: e
    defaultValue: None
