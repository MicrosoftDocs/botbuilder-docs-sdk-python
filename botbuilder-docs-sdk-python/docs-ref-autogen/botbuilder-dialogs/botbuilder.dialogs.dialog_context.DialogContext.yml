### YamlMime:PythonClass
uid: botbuilder.dialogs.dialog_context.DialogContext
name: DialogContext
fullName: botbuilder.dialogs.dialog_context.DialogContext
module: botbuilder.dialogs.dialog_context
inheritances:
- builtins.object
constructor:
  syntax: 'DialogContext(dialog_set: botbuilder.dialogs.dialog_set.DialogSet, turn_context:
    botbuilder.core.turn_context.TurnContext, state: botbuilder.dialogs.dialog_state.DialogState)
    -> None'
methods:
- uid: botbuilder.dialogs.dialog_context.DialogContext.begin_dialog
  name: begin_dialog
  summary: 'Pushes a new dialog onto the dialog stack.

    :param dialog_id: ID of the dialog to start

    :param options: (Optional) additional argument(s) to pass to the dialog being
    started.'
  signature: 'begin_dialog(dialog_id: str, options: object = None) -> None'
  parameters:
  - name: dialog_id
    isRequired: true
  - name: options
    defaultValue: None
- uid: botbuilder.dialogs.dialog_context.DialogContext.cancel_all_dialogs
  name: cancel_all_dialogs
  summary: 'Deletes any existing dialog stack thus cancelling all dialogs on the stack.

    :param cancel_parents:

    :param event_name:

    :param event_value:

    :return:'
  signature: 'cancel_all_dialogs(cancel_parents: bool = None, event_name: str = None,
    event_value: object = None) -> None'
  parameters:
  - name: cancel_parents
    defaultValue: None
  - name: event_name
    defaultValue: None
  - name: event_value
    defaultValue: None
- uid: botbuilder.dialogs.dialog_context.DialogContext.continue_dialog
  name: continue_dialog
  summary: 'Continues execution of the active dialog, if there is one, by passing
    the context object to

    its *Dialog.continue_dialog()* method. You can check *turn_context.responded*
    after the call completes

    to determine if a dialog was run and a reply was sent to the user.

    :return:'
  signature: continue_dialog() -> None
- uid: botbuilder.dialogs.dialog_context.DialogContext.emit_event
  name: emit_event
  summary: 'Searches for a dialog with a given ID.

    Emits a named event for the current dialog, or someone who started it, to handle.

    :param name: Name of the event to raise.

    :param value: Value to send along with the event.

    :param bubble: Flag to control whether the event should be bubbled to its parent
    if not handled locally.

    Defaults to a value of *True*.

    :param from_leaf: Whether the event is emitted from a leaf node.

    :param cancellationToken: The cancellation token.

    :return: True if the event was handled.'
  signature: 'emit_event(name: str, value: object = None, bubble: bool = True, from_leaf:
    bool = False) -> bool'
  parameters:
  - name: name
    isRequired: true
  - name: value
    defaultValue: None
  - name: bubble
    defaultValue: 'True'
  - name: from_leaf
    defaultValue: 'False'
- uid: botbuilder.dialogs.dialog_context.DialogContext.end_active_dialog
  name: end_active_dialog
  signature: 'end_active_dialog(reason: botbuilder.dialogs.dialog_reason.DialogReason)
    -> None'
  parameters:
  - name: reason
    isRequired: true
- uid: botbuilder.dialogs.dialog_context.DialogContext.end_dialog
  name: end_dialog
  summary: 'Ends a dialog by popping it off the stack and returns an optional result
    to the dialog''s

    parent. The parent dialog is the dialog that started the dialog being ended via
    a call to

    either "begin_dialog" or "prompt".

    The parent dialog will have its *Dialog.resume_dialog()* method invoked with any
    returned

    result. If the parent dialog hasn''t implemented a *resume_dialog()* method then
    it will be

    automatically ended as well and the result passed to its parent. If there are
    no more

    parent dialogs on the stack then processing of the turn will end.

    :param result: (Optional) result to pass to the parent dialogs.

    :return:'
  signature: 'end_dialog(result: object = None) -> None'
  parameters:
  - name: result
    defaultValue: None
- uid: botbuilder.dialogs.dialog_context.DialogContext.find_dialog
  name: find_dialog
  summary: 'If the dialog cannot be found within the current *DialogSet*, the parent
    *DialogContext*

    will be searched if there is one.

    :param dialog_id: ID of the dialog to search for.

    :return:'
  signature: 'find_dialog(dialog_id: str) -> botbuilder.dialogs.dialog.Dialog'
  parameters:
  - name: dialog_id
    isRequired: true
- uid: botbuilder.dialogs.dialog_context.DialogContext.find_dialog_sync
  name: find_dialog_sync
  summary: 'If the dialog cannot be found within the current *DialogSet*, the parent
    *DialogContext*

    will be searched if there is one.

    :param dialog_id: ID of the dialog to search for.

    :return:'
  signature: 'find_dialog_sync(dialog_id: str) -> botbuilder.dialogs.dialog.Dialog'
  parameters:
  - name: dialog_id
    isRequired: true
- uid: botbuilder.dialogs.dialog_context.DialogContext.prompt
  name: prompt
  summary: 'Helper function to simplify formatting the options for calling a prompt
    dialog. This helper will

    take a *PromptOptions* argument and then call.

    :param dialog_id: ID of the prompt to start.

    :param options: Contains a Prompt, potentially a RetryPrompt and if using ChoicePrompt,
    Choices.

    :return:'
  signature: 'prompt(dialog_id: str, options) -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  parameters:
  - name: dialog_id
    isRequired: true
  - name: options
    isRequired: true
- uid: botbuilder.dialogs.dialog_context.DialogContext.replace_dialog
  name: replace_dialog
  summary: 'Ends the active dialog and starts a new dialog in its place. This is particularly
    useful

    for creating loops or redirecting to another dialog.

    :param dialog_id: ID of the dialog to search for.

    :param options: (Optional) additional argument(s) to pass to the new dialog.

    :return:'
  signature: 'replace_dialog(dialog_id: str, options: object = None) -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  parameters:
  - name: dialog_id
    isRequired: true
  - name: options
    defaultValue: None
- uid: botbuilder.dialogs.dialog_context.DialogContext.reprompt_dialog
  name: reprompt_dialog
  summary: 'Calls reprompt on the currently active dialog, if there is one. Used with
    Prompts that have a reprompt behavior.

    :return:'
  signature: reprompt_dialog() -> None
attributes:
- uid: botbuilder.dialogs.dialog_context.DialogContext.active_dialog
  name: active_dialog
  summary: Return the container link in the database.
- uid: botbuilder.dialogs.dialog_context.DialogContext.child
  name: child
  summary: Return the container link in the database.
- uid: botbuilder.dialogs.dialog_context.DialogContext.context
  name: context
  summary: Gets the context for the current turn of conversation.
- uid: botbuilder.dialogs.dialog_context.DialogContext.dialogs
  name: dialogs
  summary: Gets the set of dialogs that can be called from this context.
- uid: botbuilder.dialogs.dialog_context.DialogContext.stack
  name: stack
  summary: Gets the current dialog stack.
