### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers.recognize_choices
  class: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers
  fullName: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: botbuilder.dialogs.choices.choice_recognizers
  name: ChoiceRecognizers
  source:
    id: ChoiceRecognizers
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\choices\choice_recognizers.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\choices\choice_recognizers.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 16
  summary: Contains methods for matching user input against a list of choices.
  syntax: {}
  type: class
  uid: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers
- class: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers
  fullName: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers.recognize_choices
  langs:
  - python
  module: botbuilder.dialogs.choices.choice_recognizers
  name: 'recognize_choices(utterance: str, choices: typing.List[typing.Union[str,
    botbuilder.dialogs.choices.choice.Choice]], options: botbuilder.dialogs.choices.find_choices_options.FindChoicesOptions
    = None) -> typing.List[botbuilder.dialogs.choices.model_result.ModelResult]'
  namewithoutparameters: recognize_choices
  source:
    id: recognize_choices
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\choices\choice_recognizers.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\choices\choice_recognizers.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 19
  summary: "Matches user input against a list of choices.\n\nThis is layered above\
    \ the *Find.find_choices()* function, and adds logic to let the user specify\n\
    their choice by index (they can say \"one\" to pick *choice[0]*) or ordinal position\n\
    \n\n   (they can say \"the second one\" to pick *choice[1]*.)\n\n\nThe user's\
    \ utterance is recognized in the following order:\n\n* By name using *find_choices()*\
    \ \n\n* By 1's based ordinal position. \n\n* By 1's based index position. \n\n\
    \nutterance: The input.\n\nchoices: The list of choices.\n\noptions: (Optional)\
    \ Options to control the recognition strategy.\n\n\nA list of found choices, sorted\
    \ by most relevant first."
  syntax:
    content: 'recognize_choices(utterance: str, choices: typing.List[typing.Union[str,
      botbuilder.dialogs.choices.choice.Choice]], options: botbuilder.dialogs.choices.find_choices_options.FindChoicesOptions
      = None) -> typing.List[botbuilder.dialogs.choices.model_result.ModelResult]'
  type: method
  uid: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers.recognize_choices
references:
- fullName: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers.recognize_choices
  isExternal: false
  name: 'recognize_choices(utterance: str, choices: typing.List[typing.Union[str,
    botbuilder.dialogs.choices.choice.Choice]], options: botbuilder.dialogs.choices.find_choices_options.FindChoicesOptions
    = None) -> typing.List[botbuilder.dialogs.choices.model_result.ModelResult]'
  parent: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers
  uid: botbuilder.dialogs.choices.choice_recognizers.ChoiceRecognizers.recognize_choices
