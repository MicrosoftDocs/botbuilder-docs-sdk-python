### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.dialogs.OAuthPrompt.begin_dialog
  - botbuilder.dialogs.OAuthPrompt.continue_dialog
  - botbuilder.dialogs.OAuthPrompt.get_user_token
  - botbuilder.dialogs.OAuthPrompt.sign_out_user
  class: botbuilder.dialogs.OAuthPrompt
  fullName: botbuilder.dialogs.OAuthPrompt
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.dialogs.dialog.Dialog
  langs:
  - python
  module: botbuilder.dialogs
  name: OAuthPrompt
  summary: "Creates a new prompt that asks the user to sign in using the Bot Framework\
    \ Single Sign On (SSO) service.\nThe prompt will attempt to retrieve the users\
    \ current token and if the user isn't signed in, it\nwill send them an *OAuthCard*\
    \ containing a button they can press to sign in. Depending on the channel,\nthe\
    \ user will be sent through one of two possible sign-in flows:\n- The automatic\
    \ sign-in flow where once the user signs in, the SSO service will forward\nthe\
    \ bot the users access token using either an *event* or *invoke* activity.\n-\
    \ The \"magic code\" flow where once the user signs in, they will be prompted\
    \ by the SSO service\nto send the bot a six digit code confirming their identity.\
    \ This code will be sent as a\nstandard *message* activity.\nBoth flows are automatically\
    \ supported by the *OAuthPrompt* and they only thing you need to be careful of\n\
    is that you don't block the *event* and *invoke* activities that the prompt might\
    \ be waiting on.\nNote:\nYou should avaoid persisting the access token with your\
    \ bots other state. The Bot Frameworks SSO service\nwill securely store the token\
    \ on your behalf. If you store it in your bots state,\nit could expire or be revoked\
    \ in between turns.\nWhen calling the prompt from within a waterfall step, you\
    \ should use the token within the step\nfollowing the prompt and then let the\
    \ token go out of scope at the end of your function\nPrompt Usage\nWhen used with\
    \ your bots *DialogSet*, you can simply add a new instance of the prompt as a\
    \ named dialog using\n\n\n   *DialogSet.add()*.\n\n\nYou can then start the prompt\
    \ from a waterfall step using either\n   *DialogContext.begin()* or *DialogContext.prompt()*.\n\
    \nThe user will be prompted to sign in as needed and their access token will be\
    \ passed as an argument to the callers\n   next waterfall step."
  syntax:
    content: 'OAuthPrompt(dialog_id: str, settings: botbuilder.dialogs.prompts.oauth_prompt_settings.OAuthPromptSettings,
      validator: typing.Callable[botbuilder.dialogs.prompts.prompt_validator_context.PromptValidatorContext,
      typing.Awaitable[bool]] = None)'
  type: class
  uid: botbuilder.dialogs.OAuthPrompt
- class: botbuilder.dialogs.OAuthPrompt
  fullName: botbuilder.dialogs.OAuthPrompt.begin_dialog
  langs:
  - python
  module: botbuilder.dialogs
  name: 'begin_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
    options: botbuilder.dialogs.prompts.prompt_options.PromptOptions = None) -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  syntax:
    content: 'begin_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
      options: botbuilder.dialogs.prompts.prompt_options.PromptOptions = None) ->
      botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  type: method
  uid: botbuilder.dialogs.OAuthPrompt.begin_dialog
- class: botbuilder.dialogs.OAuthPrompt
  fullName: botbuilder.dialogs.OAuthPrompt.continue_dialog
  langs:
  - python
  module: botbuilder.dialogs
  name: 'continue_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext)
    -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  syntax:
    content: 'continue_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext)
      -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  type: method
  uid: botbuilder.dialogs.OAuthPrompt.continue_dialog
- class: botbuilder.dialogs.OAuthPrompt
  fullName: botbuilder.dialogs.OAuthPrompt.get_user_token
  langs:
  - python
  module: botbuilder.dialogs
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, code: str
    = None) -> botbuilder.schema._models_py3.TokenResponse'
  syntax:
    content: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, code:
      str = None) -> botbuilder.schema._models_py3.TokenResponse'
  type: method
  uid: botbuilder.dialogs.OAuthPrompt.get_user_token
- class: botbuilder.dialogs.OAuthPrompt
  fullName: botbuilder.dialogs.OAuthPrompt.sign_out_user
  langs:
  - python
  module: botbuilder.dialogs
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext)'
  syntax:
    content: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext)'
  type: method
  uid: botbuilder.dialogs.OAuthPrompt.sign_out_user
references:
- fullName: botbuilder.dialogs.OAuthPrompt.begin_dialog
  isExternal: false
  name: 'begin_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
    options: botbuilder.dialogs.prompts.prompt_options.PromptOptions = None) -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  parent: botbuilder.dialogs.OAuthPrompt
  uid: botbuilder.dialogs.OAuthPrompt.begin_dialog
- fullName: botbuilder.dialogs.OAuthPrompt.continue_dialog
  isExternal: false
  name: 'continue_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext)
    -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  parent: botbuilder.dialogs.OAuthPrompt
  uid: botbuilder.dialogs.OAuthPrompt.continue_dialog
- fullName: botbuilder.dialogs.OAuthPrompt.get_user_token
  isExternal: false
  name: 'get_user_token(context: botbuilder.core.turn_context.TurnContext, code: str
    = None) -> botbuilder.schema._models_py3.TokenResponse'
  parent: botbuilder.dialogs.OAuthPrompt
  uid: botbuilder.dialogs.OAuthPrompt.get_user_token
- fullName: botbuilder.dialogs.OAuthPrompt.sign_out_user
  isExternal: false
  name: 'sign_out_user(context: botbuilder.core.turn_context.TurnContext)'
  parent: botbuilder.dialogs.OAuthPrompt
  uid: botbuilder.dialogs.OAuthPrompt.sign_out_user
