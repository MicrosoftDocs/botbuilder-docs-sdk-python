### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botbuilder.dialogs.prompts.ActivityPrompt.begin_dialog
  - botbuilder.dialogs.prompts.ActivityPrompt.continue_dialog
  - botbuilder.dialogs.prompts.ActivityPrompt.on_prompt
  - botbuilder.dialogs.prompts.ActivityPrompt.on_recognize
  - botbuilder.dialogs.prompts.ActivityPrompt.reprompt_dialog
  - botbuilder.dialogs.prompts.ActivityPrompt.resume_dialog
  - botbuilder.dialogs.prompts.ActivityPrompt.persisted_options
  - botbuilder.dialogs.prompts.ActivityPrompt.persisted_state
  class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: botbuilder.dialogs.dialog.Dialog
  - inheritance:
    - type: builtins.object
    type: abc.ABC
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: ActivityPrompt
  source:
    id: ActivityPrompt
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 23
  summary: "Waits for an activity to be received.\n\n   This prompt requires a validator\
    \ be passed in and is useful when waiting for non-message\n   activities like\
    \ an event to be received. The validator can ignore received events until the\n\
    \   expected activity is received."
  syntax:
    content: 'ActivityPrompt(dialog_id: str, validator: typing.Callable[botbuilder.dialogs.prompts.prompt_validator_context.PromptValidatorContext,
      bool])'
    variables:
    - description: ''
      id: persisted_options
    - description: ''
      id: persisted_state
      type:
      - str
  type: class
  uid: botbuilder.dialogs.prompts.ActivityPrompt
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.begin_dialog
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: 'begin_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
    options: botbuilder.dialogs.prompts.prompt_options.PromptOptions = None) -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  source:
    id: begin_dialog
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 58
  summary: Called when a prompt dialog is pushed onto the dialog stack and is being
    activated.
  syntax:
    content: 'begin_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
      options: botbuilder.dialogs.prompts.prompt_options.PromptOptions = None) ->
      botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
    parameters:
    - description: The dialog context for the current turn of the conversation.
      id: dialog_context
      type:
      - botbuilder.dialogs.prompts.DialogContext
    - description: Optional, additional information to pass to the prompt being started.
      id: options
      type:
      - botbuilder.dialogs.prompts.PromptOptions
  type: method
  uid: botbuilder.dialogs.prompts.ActivityPrompt.begin_dialog
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.continue_dialog
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: 'continue_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext)
    -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  source:
    id: continue_dialog
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 100
  summary: Called when a prompt dialog is the active dialog and the user replied with
    a new activity.
  syntax:
    content: 'continue_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext)
      -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
    parameters:
    - description: The dialog context for the current turn of the conversation.
      id: dialog_context
      type:
      - botbuilder.dialogs.prompts.DialogContext
  type: method
  uid: botbuilder.dialogs.prompts.ActivityPrompt.continue_dialog
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.on_prompt
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: 'on_prompt(context: botbuilder.core.turn_context.TurnContext, state: typing.Dict[str,
    dict], options: botbuilder.dialogs.prompts.prompt_options.PromptOptions, is_retry:
    bool = False)'
  source:
    id: on_prompt
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 182
  summary: Called anytime the derived class should send the user a prompt.
  syntax:
    content: 'on_prompt(context: botbuilder.core.turn_context.TurnContext, state:
      typing.Dict[str, dict], options: botbuilder.dialogs.prompts.prompt_options.PromptOptions,
      is_retry: bool = False)'
    parameters:
    - description: The dialog context for the current turn of the conversation
      id: dialog_context
      type:
      - botbuilder.dialogs.prompts.DialogContext
    - description: Additional state being persisted for the prompt.
      id: state
      type:
      - typing.Dict[str, dict]
    - description: Options that the prompt started with in the call to <xref:DialogContext.prompt>.
      id: options
      type:
      - botbuilder.dialogs.prompts.PromptOptions
    - description: If *true* the users response wasn't recognized and the re-prompt
        should be sent.
      id: isRetry
      type:
      - bool
  type: method
  uid: botbuilder.dialogs.prompts.ActivityPrompt.on_prompt
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.on_recognize
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: 'on_recognize(context: botbuilder.core.turn_context.TurnContext, state: typing.Dict[str,
    object], options: botbuilder.dialogs.prompts.prompt_options.PromptOptions) ->
    botbuilder.dialogs.prompts.prompt_recognizer_result.PromptRecognizerResult'
  source:
    id: on_recognize
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 208
  summary: When overridden in a derived class, attempts to recognize the incoming
    activity.
  syntax:
    content: 'on_recognize(context: botbuilder.core.turn_context.TurnContext, state:
      typing.Dict[str, object], options: botbuilder.dialogs.prompts.prompt_options.PromptOptions)
      -> botbuilder.dialogs.prompts.prompt_recognizer_result.PromptRecognizerResult'
    parameters:
    - description: Context for the current turn of conversation with the user.
      id: context
      type:
      - botbuilder.core.TurnContext
    - description: Contains state for the current instance of the prompt on the dialog
        stack.
      id: state
      type:
      - typing.Dict[str, dict]
    - description: A prompt options object
      id: options
      type:
      - botbuilder.dialogs.prompts.PromptOptions
  type: method
  uid: botbuilder.dialogs.prompts.ActivityPrompt.on_recognize
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.reprompt_dialog
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: 'reprompt_dialog(context: botbuilder.core.turn_context.TurnContext, instance:
    botbuilder.dialogs.dialog_instance.DialogInstance)'
  source:
    id: reprompt_dialog
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 177
  syntax:
    content: 'reprompt_dialog(context: botbuilder.core.turn_context.TurnContext, instance:
      botbuilder.dialogs.dialog_instance.DialogInstance)'
  type: method
  uid: botbuilder.dialogs.prompts.ActivityPrompt.reprompt_dialog
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.resume_dialog
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: 'resume_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
    reason: botbuilder.dialogs.dialog_reason.DialogReason, result: object = None)'
  remarks: 'Prompts are typically leaf nodes on the stack but the dev is free to push
    other dialogs

    on top of the stack which will result in the prompt receiving an unexpected call
    to

    <xref:botbuilder.dialogs.prompts.ActivityPrompt.resume_dialog> when the pushed
    on dialog ends.

    To avoid the prompt prematurely ending, we need to implement this method and

    simply re-prompt the user.

    '
  source:
    id: resume_dialog
    path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
    remote:
      branch: master
      path: ./libraries/botbuilder-dialogs\botbuilder\dialogs\prompts\activity_prompt.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 152
  summary: 'Called when a prompt dialog resumes being the active dialog on the dialog
    stack, such

    as when the previous active dialog on the stack completes.'
  syntax:
    content: 'resume_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
      reason: botbuilder.dialogs.dialog_reason.DialogReason, result: object = None)'
    parameters:
    - description: The dialog context for the current turn of the conversation
      id: dialog_context
      type:
      - botbuilder.dialogs.prompts.DialogContext
    - description: An enum indicating why the dialog resumed.
      id: reason
      type:
      - botbuilder.dialogs.prompts.DialogReason
    - description: Optional, value returned from the previous dialog on the stack.
      id: result
      type:
      - object
  type: method
  uid: botbuilder.dialogs.prompts.ActivityPrompt.resume_dialog
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.persisted_options
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: persisted_options
  syntax:
    content: persisted_options = 'options'
  type: attribute
  uid: botbuilder.dialogs.prompts.ActivityPrompt.persisted_options
- class: botbuilder.dialogs.prompts.ActivityPrompt
  fullName: botbuilder.dialogs.prompts.ActivityPrompt.persisted_state
  langs:
  - python
  module: botbuilder.dialogs.prompts
  name: persisted_state
  syntax:
    content: persisted_state = 'state'
  type: attribute
  uid: botbuilder.dialogs.prompts.ActivityPrompt.persisted_state
references:
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.begin_dialog
  isExternal: false
  name: 'begin_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
    options: botbuilder.dialogs.prompts.prompt_options.PromptOptions = None) -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.begin_dialog
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.continue_dialog
  isExternal: false
  name: 'continue_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext)
    -> botbuilder.dialogs.dialog_turn_result.DialogTurnResult'
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.continue_dialog
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.on_prompt
  isExternal: false
  name: 'on_prompt(context: botbuilder.core.turn_context.TurnContext, state: typing.Dict[str,
    dict], options: botbuilder.dialogs.prompts.prompt_options.PromptOptions, is_retry:
    bool = False)'
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.on_prompt
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.on_recognize
  isExternal: false
  name: 'on_recognize(context: botbuilder.core.turn_context.TurnContext, state: typing.Dict[str,
    object], options: botbuilder.dialogs.prompts.prompt_options.PromptOptions) ->
    botbuilder.dialogs.prompts.prompt_recognizer_result.PromptRecognizerResult'
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.on_recognize
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.reprompt_dialog
  isExternal: false
  name: 'reprompt_dialog(context: botbuilder.core.turn_context.TurnContext, instance:
    botbuilder.dialogs.dialog_instance.DialogInstance)'
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.reprompt_dialog
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.resume_dialog
  isExternal: false
  name: 'resume_dialog(dialog_context: botbuilder.dialogs.dialog_context.DialogContext,
    reason: botbuilder.dialogs.dialog_reason.DialogReason, result: object = None)'
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.resume_dialog
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.persisted_options
  isExternal: false
  name: persisted_options
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.persisted_options
- fullName: botbuilder.dialogs.prompts.ActivityPrompt.persisted_state
  isExternal: false
  name: persisted_state
  parent: botbuilder.dialogs.prompts.ActivityPrompt
  uid: botbuilder.dialogs.prompts.ActivityPrompt.persisted_state
- fullName: typing.Dict[str, dict]
  name: Dict[str, dict]
  spec.python:
  - fullName: typing.Dict
    name: Dict
    uid: typing.Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ']'
    name: ']'
  uid: typing.Dict[str, dict]
