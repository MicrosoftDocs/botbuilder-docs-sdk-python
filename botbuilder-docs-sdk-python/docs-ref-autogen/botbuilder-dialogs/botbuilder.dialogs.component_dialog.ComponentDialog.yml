### YamlMime:PythonClass
uid: botbuilder.dialogs.component_dialog.ComponentDialog
name: ComponentDialog
fullName: botbuilder.dialogs.component_dialog.ComponentDialog
module: botbuilder.dialogs.component_dialog
inheritances:
- botbuilder.dialogs.dialog.Dialog
summary: A <xref:botbuilder.dialogs.Dialog> that is composed of other dialogs
constructor:
  syntax: 'ComponentDialog(dialog_id: str)'
  parameters:
  - name: dialog_id
variables:
- name: state
  types:
  - <xref:persisted_dialog>
methods:
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.add_dialog
  name: add_dialog
  summary: Adds a <xref:botbuilder.dialogs.component_dialog.Dialog> to the component
    dialog and returns the updated component.
  signature: 'add_dialog(dialog: Dialog) -> object'
  parameters:
  - name: dialog
    description: The dialog to add.
    isRequired: true
  return:
    description: The updated <xref:botbuilder.dialogs.component_dialog.ComponentDialog>.
    types:
    - <xref:botbuilder.dialogs.component_dialog.ComponentDialog>
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.begin_dialog
  name: begin_dialog
  summary: 'Called when the dialog is started and pushed onto the parent''s dialog
    stack.


    If the task is successful, the result indicates whether the dialog is still

    active after the turn has been processed by the dialog.'
  signature: 'async begin_dialog(dialog_context: DialogContext, options: object |
    None = None) -> DialogTurnResult'
  parameters:
  - name: dialog_context
    description: The <xref:botbuilder.dialogs.DialogContext> for the current turn
      of the conversation.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogContext>
  - name: options
    description: Optional, initial information to pass to the dialog.
    defaultValue: None
    types:
    - <xref:object>
  return:
    description: Signals the end of the turn
    types:
    - <xref:botbuilder.dialogs.Dialog.end_of_turn>
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.continue_dialog
  name: continue_dialog
  summary: 'Called when the dialog is continued, where it is the active dialog and
    the

    user replies with a new activity.'
  signature: 'async continue_dialog(dialog_context: DialogContext) -> DialogTurnResult'
  parameters:
  - name: dialog_context
    description: The parent dialog context for the current turn of the conversation.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogContext>
  return:
    description: Signals the end of the turn
    types:
    - <xref:botbuilder.dialogs.Dialog.end_of_turn>
  remarks: 'If the task is successful, the result indicates whether the dialog is
    still

    active after the turn has been processed by the dialog. The result may also

    contain a return value.


    If this method is *not* overriden the component dialog calls the

    <xref:botbuilder.dialogs.DialogContext.continue_dialog> method on it''s inner
    dialog

    context. If the inner dialog stack is empty, the component dialog ends,

    and if a <xref:botbuilder.dialogs.DialogTurnResult.result> is available, the component
    dialog

    uses that as it''s return value.

    '
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.end_component
  name: end_component
  summary: Ends the component dialog in its parent's context.
  signature: 'async end_component(outer_dc: DialogContext, result: object) -> DialogTurnResult'
  parameters:
  - name: outer_dc
    description: The parent dialog context for the current turn of conversation.
    isRequired: true
    types:
    - <xref:<xref:class:botbuilder.dialogs.DialogContext>>
  - name: result
    description: Optional, value to return from the dialog component to the parent
      context.
    isRequired: true
    types:
    - <xref:object>
  return:
    description: Value to return.
    types:
    - <xref:botbuilder.dialogs.DialogTurnResult.result>
  remarks: 'If the task is successful, the result indicates that the dialog ended
    after the

    turn was processed by the dialog.

    '
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.end_dialog
  name: end_dialog
  summary: Called when the dialog is ending.
  signature: 'async end_dialog(context: TurnContext, instance: DialogInstance, reason:
    DialogReason) -> None'
  parameters:
  - name: context
    description: The context object for this turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: instance
    description: State information associated with the instance of this component
      dialog.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogInstance>
  - name: reason
    description: Reason why the dialog ended.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogReason>
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.find_dialog
  name: find_dialog
  summary: Finds a dialog by ID.
  signature: 'async find_dialog(dialog_id: str) -> Dialog'
  parameters:
  - name: dialog_id
    description: The dialog to add.
    isRequired: true
  return:
    description: The dialog; or None if there is not a match for the ID.
    types:
    - <xref:botbuilder.dialogs.Dialog>
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.on_begin_dialog
  name: on_begin_dialog
  summary: Called when the dialog is started and pushed onto the parent's dialog stack.
  signature: 'async on_begin_dialog(inner_dc: DialogContext, options: object) -> DialogTurnResult'
  parameters:
  - name: inner_dc
    description: The inner dialog context for the current turn of conversation.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogContext>
  - name: options
    description: Optional, initial information to pass to the dialog.
    isRequired: true
    types:
    - <xref:object>
  remarks: 'If the task is successful, the result indicates whether the dialog is
    still

    active after the turn has been processed by the dialog.


    By default, this calls the <xref:botbuilder.dialogs.Dialog.begin_dialog>

    method of the component dialog''s initial dialog.


    Override this method in a derived class to implement interrupt logic.

    '
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.on_continue_dialog
  name: on_continue_dialog
  summary: Called when the dialog is continued, where it is the active dialog and
    the user replies with a new activity.
  signature: 'async on_continue_dialog(inner_dc: DialogContext) -> DialogTurnResult'
  parameters:
  - name: inner_dc
    description: The inner dialog context for the current turn of conversation.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogContext>
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.on_end_dialog
  name: on_end_dialog
  summary: Ends the component dialog in its parent's context.
  signature: 'async on_end_dialog(context: TurnContext, instance: DialogInstance,
    reason: DialogReason) -> None'
  parameters:
  - name: turn_context
    description: The <xref:botbuilder.core.TurnContext> for the current turn of the
      conversation.
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: instance
    description: State information associated with the inner dialog stack of this
      component dialog.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogInstance>
  - name: reason
    description: Reason why the dialog ended.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogReason>
  - name: context
    isRequired: true
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.on_reprompt_dialog
  name: on_reprompt_dialog
  signature: 'async on_reprompt_dialog(turn_context: TurnContext, instance: DialogInstance)
    -> None'
  parameters:
  - name: turn_context
    description: The <xref:botbuilder.core.TurnContext> for the current turn of the
      conversation.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogInstance>
  - name: instance
    description: State information associated with the inner dialog stack of this
      component dialog.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogInstance>
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.reprompt_dialog
  name: reprompt_dialog
  summary: Called when the dialog should re-prompt the user for input.
  signature: 'async reprompt_dialog(context: TurnContext, instance: DialogInstance)
    -> None'
  parameters:
  - name: context
    description: The context object for this turn.
    isRequired: true
    types:
    - <xref:botbuilder.core.TurnContext>
  - name: instance
    description: State information for this dialog.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogInstance>
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.resume_dialog
  name: resume_dialog
  summary: 'Called when a child dialog on the parent''s dialog stack completed this
    turn, returning

    control to this dialog component.'
  signature: 'async resume_dialog(dialog_context: DialogContext, reason: DialogReason,
    result: object | None = None) -> DialogTurnResult'
  parameters:
  - name: dialog_context
    description: The dialog context for the current turn of the conversation.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogContext>
  - name: reason
    description: Reason why the dialog resumed.
    isRequired: true
    types:
    - <xref:botbuilder.dialogs.DialogReason>
  - name: result
    description: Optional, value returned from the dialog that was called.
    defaultValue: None
    types:
    - <xref:object>
  return:
    description: Signals the end of the turn
    types:
    - <xref:botbuilder.dialogs.Dialog.end_of_turn>
  remarks: 'Containers are typically leaf nodes on the stack but the dev is free to
    push other dialogs

    on top of the stack which will result in the container receiving an unexpected
    call to

    <xref:botbuilder.dialogs.component_dialog.ComponentDialog.resume_dialog> when
    the pushed on dialog ends.

    To avoid the container prematurely ending we need to implement this method and
    simply

    ask our inner dialog stack to re-prompt.

    '
attributes:
- uid: botbuilder.dialogs.component_dialog.ComponentDialog.persisted_dialog_state
  name: persisted_dialog_state
  signature: persisted_dialog_state = 'dialogs'
