### YamlMime:PythonClass
uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication
name: ConfigurationBotFrameworkAuthentication
fullName: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication
module: botbuilder.integration.aiohttp.configuration_bot_framework_authentication
inheritances:
- botframework.connector.auth.bot_framework_authentication.BotFrameworkAuthentication
constructor:
  syntax: 'ConfigurationBotFrameworkAuthentication(configuration: Any, *, credentials_factory:
    Optional[botframework.connector.auth.service_client_credentials_factory.ServiceClientCredentialsFactory]
    = None, auth_configuration: Optional[botframework.connector.auth.authentication_configuration.AuthenticationConfiguration]
    = None, http_client_factory: Optional[botframework.connector.http_client_factory.HttpClientFactory]
    = None, logger: Optional[logging.Logger] = None)'
  parameters:
  - name: configuration
methods:
- uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication.authenticate_channel_request
  name: authenticate_channel_request
  summary: Authenticate Bot Framework Protocol request to Skills.
  signature: 'async authenticate_channel_request(auth_header: str) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parameters:
  - name: auth_header
    description: The HTTP auth header in the skill request.
    isRequired: true
  return:
    description: A ClaimsIdentity.
- uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication.authenticate_request
  name: authenticate_request
  summary: Validate Bot Framework Protocol requests.
  signature: 'async authenticate_request(activity: botbuilder.schema._models_py3.Activity,
    auth_header: str) -> botframework.connector.auth.authenticate_request_result.AuthenticateRequestResult'
  parameters:
  - name: activity
    description: The inbound Activity.
    isRequired: true
  - name: auth_header
    description: The HTTP auth header.
    isRequired: true
  return:
    description: An AuthenticateRequestResult.
- uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication.authenticate_streaming_request
  name: authenticate_streaming_request
  summary: Validate Bot Framework Protocol requests.
  signature: 'async authenticate_streaming_request(auth_header: str, channel_id_header:
    str) -> botframework.connector.auth.authenticate_request_result.AuthenticateRequestResult'
  parameters:
  - name: auth_header
    description: The HTTP auth header.
    isRequired: true
  - name: channel_id_header
    description: The channel ID HTTP header.
    isRequired: true
  return:
    description: An AuthenticateRequestResult.
- uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication.create_bot_framework_client
  name: create_bot_framework_client
  summary: Creates a BotFrameworkClient for calling Skills.
  signature: create_bot_framework_client() -> botframework.connector.skills.bot_framework_client.BotFrameworkClient
  return:
    description: A BotFrameworkClient.
- uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication.create_connector_factory
  name: create_connector_factory
  summary: 'Creates a ConnectorFactory that can be used to create ConnectorClients
    that can use credentials

    from this particular Cloud Environment.'
  signature: 'create_connector_factory(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity)
    -> botframework.connector.auth.connector_factory.ConnectorFactory'
  parameters:
  - name: claims_identity
    description: The inbound Activity's ClaimsIdentity.
    isRequired: true
  return:
    description: A ConnectorFactory.
- uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication.create_user_token_client
  name: create_user_token_client
  summary: Creates the appropriate UserTokenClient instance.
  signature: 'async create_user_token_client(claims_identity: botframework.connector.auth.claims_identity.ClaimsIdentity)
    -> botframework.connector.auth.user_token_client.UserTokenClient'
  parameters:
  - name: claims_identity
    description: The inbound Activity's ClaimsIdentity.
    isRequired: true
  return:
    description: An UserTokenClient.
- uid: botbuilder.integration.aiohttp.configuration_bot_framework_authentication.ConfigurationBotFrameworkAuthentication.get_originating_audience
  name: get_originating_audience
  summary: Gets the originating audience from Bot OAuth scope.
  signature: get_originating_audience() -> str
  return:
    description: The originating audience.
