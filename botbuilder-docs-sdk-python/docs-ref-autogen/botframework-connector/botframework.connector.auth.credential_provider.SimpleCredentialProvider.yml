### YamlMime:PythonClass
uid: botframework.connector.auth.credential_provider.SimpleCredentialProvider
name: SimpleCredentialProvider
fullName: botframework.connector.auth.credential_provider.SimpleCredentialProvider
module: botframework.connector.auth.credential_provider
inheritances:
- botframework.connector.auth.credential_provider.CredentialProvider
constructor:
  syntax: 'SimpleCredentialProvider(app_id: str, password: str)'
methods:
- uid: botframework.connector.auth.credential_provider.SimpleCredentialProvider.get_app_password
  name: get_app_password
  summary: 'Get the app password for a given bot appId, if it is not a valid appId,
    return Null


    This method is async to enable custom implementations

    that may need to call out to serviced to validate the appId / password pair.'
  signature: 'get_app_password(app_id: str) -> str'
  parameters:
  - name: app_id
    description: bot appid
    isRequired: true
  return:
    description: password or null for invalid appid
- uid: botframework.connector.auth.credential_provider.SimpleCredentialProvider.is_authentication_disabled
  name: is_authentication_disabled
  summary: 'Checks if bot authentication is disabled.


    Return true if bot authentication is disabled.

    This method is async to enable custom implementations

    that may need to call out to serviced to validate the appId / password pair.'
  signature: is_authentication_disabled() -> bool
  return:
    description: true if bot authentication is disabled.
- uid: botframework.connector.auth.credential_provider.SimpleCredentialProvider.is_valid_appid
  name: is_valid_appid
  summary: 'Validate AppId.


    This method is async to enable custom implementations

    that may need to call out to serviced to validate the appId / password pair.'
  signature: 'is_valid_appid(app_id: str) -> bool'
  parameters:
  - name: app_id
    description: bot appid
    isRequired: true
  return:
    description: true if it is a valid AppId
