### YamlMime:PythonClass
uid: botframework.connector.auth.jwt_token_extractor.JwtTokenExtractor
name: JwtTokenExtractor
fullName: botframework.connector.auth.jwt_token_extractor.JwtTokenExtractor
module: botframework.connector.auth.jwt_token_extractor
inheritances:
- builtins.object
constructor:
  syntax: 'JwtTokenExtractor(validation_params: VerifyOptions, metadata_url: str,
    allowed_algorithms: list)'
  parameters:
  - name: validation_params
  - name: metadata_url
  - name: allowed_algorithms
methods:
- uid: botframework.connector.auth.jwt_token_extractor.JwtTokenExtractor.get_identity
  name: get_identity
  signature: 'async get_identity(schema: str, parameter: str, channel_id: str, required_endorsements:
    List[str] = None) -> ClaimsIdentity'
  parameters:
  - name: schema
    isRequired: true
  - name: parameter
    isRequired: true
  - name: channel_id
    isRequired: true
  - name: required_endorsements
    defaultValue: None
- uid: botframework.connector.auth.jwt_token_extractor.JwtTokenExtractor.get_identity_from_auth_header
  name: get_identity_from_auth_header
  signature: 'async get_identity_from_auth_header(auth_header: str, channel_id: str,
    required_endorsements: List[str] = None) -> ClaimsIdentity'
  parameters:
  - name: auth_header
    isRequired: true
  - name: channel_id
    isRequired: true
  - name: required_endorsements
    defaultValue: None
- uid: botframework.connector.auth.jwt_token_extractor.JwtTokenExtractor.get_open_id_metadata
  name: get_open_id_metadata
  signature: 'static get_open_id_metadata(metadata_url: str)'
  parameters:
  - name: metadata_url
    isRequired: true
attributes:
- uid: botframework.connector.auth.jwt_token_extractor.JwtTokenExtractor.metadataCache
  name: metadataCache
  signature: metadataCache = {}
