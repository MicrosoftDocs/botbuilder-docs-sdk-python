### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botframework.connector.aio.operations_async.ConversationsOperations.create_conversation
  - botframework.connector.aio.operations_async.ConversationsOperations.delete_activity
  - botframework.connector.aio.operations_async.ConversationsOperations.delete_conversation_member
  - botframework.connector.aio.operations_async.ConversationsOperations.get_activity_members
  - botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_members
  - botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_paged_members
  - botframework.connector.aio.operations_async.ConversationsOperations.get_conversations
  - botframework.connector.aio.operations_async.ConversationsOperations.reply_to_activity
  - botframework.connector.aio.operations_async.ConversationsOperations.send_conversation_history
  - botframework.connector.aio.operations_async.ConversationsOperations.send_to_conversation
  - botframework.connector.aio.operations_async.ConversationsOperations.update_activity
  - botframework.connector.aio.operations_async.ConversationsOperations.upload_attachment
  - botframework.connector.aio.operations_async.ConversationsOperations.models
  class: botframework.connector.aio.operations_async.ConversationsOperations
  fullName: botframework.connector.aio.operations_async.ConversationsOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: ConversationsOperations
  summary: "ConversationsOperations async operations.\n\nYou should not instantiate\
    \ directly this class, but create a Client instance that will create it for you\
    \ and attach\n   it as attribute."
  syntax:
    content: ConversationsOperations(client, config, serializer, deserializer) ->
      None
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
    variables:
    - description: 'The API version to use for the request. Constant value: "v3".'
      id: api_version
  type: class
  uid: botframework.connector.aio.operations_async.ConversationsOperations
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.create_conversation
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: create_conversation(parameters, *, custom_headers=None, raw=False, **operation_config)
  summary: 'CreateConversation.


    Create a new Conversation.

    POST to this method with a

    * Bot being the bot creating the conversation

    * IsGroup set to true if this is not a direct message (default is

    false)

    * Array containing the members to include in the conversation

    The return value is a ResourceResponse which contains a conversation id

    which is suitable for use

    in the message payload and REST API uris.

    Most channels only support the semantics of bots initiating a direct

    message conversation.  An example of how to do that would be:

    ``

    var resource = await connector.conversations.CreateConversation(new

    ConversationParameters(){ Bot = bot, members = new ChannelAccount[] {

    new ChannelAccount("user1") } );

    await connect.Conversations.SendToConversationAsync(resource.Id, new

    Activity() ... ) ;

    ``.'
  syntax:
    content: create_conversation(parameters, *, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: Parameters to create the conversation from
      id: parameters
      type:
      - botframework.connector.models.ConversationParameters
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: ConversationResourceResponse or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.ConversationResourceResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.create_conversation
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.delete_activity
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: delete_activity(conversation_id, activity_id, *, custom_headers=None, raw=False,
    **operation_config)
  summary: 'DeleteActivity.


    Delete an existing activity.

    Some channels allow you to delete an existing activity, and if

    successful this method will remove the specified activity.'
  syntax:
    content: delete_activity(conversation_id, activity_id, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: activityId to delete
      id: activity_id
      type:
      - str
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.delete_activity
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.delete_conversation_member
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: delete_conversation_member(conversation_id, member_id, *, custom_headers=None,
    raw=False, **operation_config)
  summary: 'DeleteConversationMember.


    Deletes a member from a conversation.

    This REST API takes a ConversationId and a memberId (of type string)

    and removes that member from the conversation. If that member was the

    last member

    of the conversation, the conversation will also be deleted.'
  syntax:
    content: delete_conversation_member(conversation_id, member_id, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: ID of the member to delete from this conversation
      id: member_id
      type:
      - str
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.delete_conversation_member
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_activity_members
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: get_activity_members(conversation_id, activity_id, *, custom_headers=None,
    raw=False, **operation_config)
  summary: 'GetActivityMembers.


    Enumerate the members of an activity.

    This REST API takes a ConversationId and a ActivityId, returning an

    array of ChannelAccount objects representing the members of the

    particular activity in the conversation.'
  syntax:
    content: get_activity_members(conversation_id, activity_id, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: Activity ID
      id: activity_id
      type:
      - str
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: list or ClientRawResponse if raw=true
      type:
      - list[botframework.connector.models.ChannelAccount]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_activity_members
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_members
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: get_conversation_members(conversation_id, *, custom_headers=None, raw=False,
    **operation_config)
  summary: 'GetConversationMembers.


    Enumerate the members of a conversation.

    This REST API takes a ConversationId and returns an array of

    ChannelAccount objects representing the members of the conversation.'
  syntax:
    content: get_conversation_members(conversation_id, *, custom_headers=None, raw=False,
      **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: list or ClientRawResponse if raw=true
      type:
      - list[botframework.connector.models.ChannelAccount]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_members
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: msrest.exceptions.HttpOperationError
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_paged_members
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: get_conversation_paged_members(conversation_id, page_size=None, continuation_token=None,
    *, custom_headers=None, raw=False, **operation_config)
  summary: 'GetConversationPagedMembers.


    Enumerate the members of a conversation one page at a time.

    This REST API takes a ConversationId. Optionally a pageSize and/or

    continuationToken can be provided. It returns a PagedMembersResult,

    which contains an array

    of ChannelAccounts representing the members of the conversation and a

    continuation token that can be used to get more values.

    One page of ChannelAccounts records are returned with each call. The

    number of records in a page may vary between channels and calls. The

    pageSize parameter can be used as

    a suggestion. If there are no additional results the response will not

    contain a continuation token. If there are no members in the

    conversation the Members will be empty or not present in the response.

    A response to a request that has a continuation token from a prior

    request may rarely return members from a previous request.'
  syntax:
    content: get_conversation_paged_members(conversation_id, page_size=None, continuation_token=None,
      *, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: Suggested page size
      id: page_size
      type:
      - int
    - description: Continuation Token
      id: continuation_token
      type:
      - str
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: PagedMembersResult or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.PagedMembersResult
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_paged_members
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_conversations
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: get_conversations(continuation_token=None, *, custom_headers=None, raw=False,
    **operation_config)
  summary: 'GetConversations.


    List the Conversations in which this bot has participated.

    GET from this method with a skip token

    The return value is a ConversationsResult, which contains an array of

    ConversationMembers and a skip token.  If the skip token is not empty,

    then

    there are further values to be returned. Call this method again with

    the returned token to get more values.

    Each ConversationMembers object contains the ID of the conversation and

    an array of ChannelAccounts that describe the members of the

    conversation.'
  syntax:
    content: get_conversations(continuation_token=None, *, custom_headers=None, raw=False,
      **operation_config)
    parameters:
    - description: skip or continuation token
      id: continuation_token
      type:
      - str
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: ConversationsResult or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.ConversationsResult
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_conversations
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.reply_to_activity
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: reply_to_activity(conversation_id, activity_id, activity, *, custom_headers=None,
    raw=False, **operation_config)
  summary: 'ReplyToActivity.


    This method allows you to reply to an activity.

    This is slightly different from SendToConversation().

    * SendToConversation(conversationId) - will append the activity to the

    end of the conversation according to the timestamp or semantics of the

    channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a

    reply to another activity, if the channel supports it. If the channel

    does not support nested replies, ReplyToActivity falls back to

    SendToConversation.

    Use ReplyToActivity when replying to a specific activity in the

    conversation.

    Use SendToConversation in all other cases.'
  syntax:
    content: reply_to_activity(conversation_id, activity_id, activity, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: activityId the reply is to (OPTIONAL)
      id: activity_id
      type:
      - str
    - description: Activity to send
      id: activity
      type:
      - botframework.connector.models.Activity
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: ResourceResponse or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.ResourceResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.reply_to_activity
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.send_conversation_history
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: send_conversation_history(conversation_id, activities=None, *, custom_headers=None,
    raw=False, **operation_config)
  summary: 'SendConversationHistory.


    This method allows you to upload the historic activities to the

    conversation.

    Sender must ensure that the historic activities have unique ids and

    appropriate timestamps. The ids are used by the client to deal with

    duplicate activities and the timestamps are used by the client to

    render the activities in the right order.'
  syntax:
    content: send_conversation_history(conversation_id, activities=None, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: 'A collection of Activities that conforms to the

        Transcript schema.'
      id: activities
      type:
      - list[botframework.connector.models.Activity]
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: ResourceResponse or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.ResourceResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.send_conversation_history
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.send_to_conversation
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: send_to_conversation(conversation_id, activity, *, custom_headers=None, raw=False,
    **operation_config)
  summary: 'SendToConversation.


    This method allows you to send an activity to the end of a

    conversation.

    This is slightly different from ReplyToActivity().

    * SendToConversation(conversationId) - will append the activity to the

    end of the conversation according to the timestamp or semantics of the

    channel.

    * ReplyToActivity(conversationId,ActivityId) - adds the activity as a

    reply to another activity, if the channel supports it. If the channel

    does not support nested replies, ReplyToActivity falls back to

    SendToConversation.

    Use ReplyToActivity when replying to a specific activity in the

    conversation.

    Use SendToConversation in all other cases.'
  syntax:
    content: send_to_conversation(conversation_id, activity, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: Activity to send
      id: activity
      type:
      - botframework.connector.models.Activity
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: ResourceResponse or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.ResourceResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.send_to_conversation
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.update_activity
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: update_activity(conversation_id, activity_id, activity, *, custom_headers=None,
    raw=False, **operation_config)
  summary: 'UpdateActivity.


    Edit an existing activity.

    Some channels allow you to edit an existing activity to reflect the new

    state of a bot conversation.

    For example, you can remove buttons after someone has clicked "Approve"

    button.'
  syntax:
    content: update_activity(conversation_id, activity_id, activity, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: activityId to update
      id: activity_id
      type:
      - str
    - description: replacement Activity
      id: activity
      type:
      - botframework.connector.models.Activity
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: ResourceResponse or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.ResourceResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.update_activity
- class: botframework.connector.aio.operations_async.ConversationsOperations
  exceptions:
  - type: botframework.connector.models.ErrorResponseException
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.upload_attachment
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: upload_attachment(conversation_id, attachment_upload, *, custom_headers=None,
    raw=False, **operation_config)
  summary: 'UploadAttachment.


    Upload an attachment directly into a channel''s blob storage.

    This is useful because it allows you to store data in a compliant store

    when dealing with enterprises.

    The response is a ResourceResponse which contains an AttachmentId which

    is suitable for using with the attachments API.'
  syntax:
    content: upload_attachment(conversation_id, attachment_upload, *, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Conversation ID
      id: conversation_id
      type:
      - str
    - description: Attachment data
      id: attachment_upload
      type:
      - botframework.connector.models.AttachmentData
    - description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
    return:
      description: ResourceResponse or ClientRawResponse if raw=true
      type:
      - botframework.connector.models.ResourceResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: botframework.connector.aio.operations_async.ConversationsOperations.upload_attachment
- class: botframework.connector.aio.operations_async.ConversationsOperations
  fullName: botframework.connector.aio.operations_async.ConversationsOperations.models
  langs:
  - python
  module: botframework.connector.aio.operations_async
  name: models
  syntax:
    content: models = <module 'botframework.connector.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\botframework\\connector\\models\\__init__.py'>
  type: attribute
  uid: botframework.connector.aio.operations_async.ConversationsOperations.models
references:
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.create_conversation
  isExternal: false
  name: create_conversation(parameters, *, custom_headers=None, raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.create_conversation
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.delete_activity
  isExternal: false
  name: delete_activity(conversation_id, activity_id, *, custom_headers=None, raw=False,
    **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.delete_activity
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.delete_conversation_member
  isExternal: false
  name: delete_conversation_member(conversation_id, member_id, *, custom_headers=None,
    raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.delete_conversation_member
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_activity_members
  isExternal: false
  name: get_activity_members(conversation_id, activity_id, *, custom_headers=None,
    raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_activity_members
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_members
  isExternal: false
  name: get_conversation_members(conversation_id, *, custom_headers=None, raw=False,
    **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_members
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_paged_members
  isExternal: false
  name: get_conversation_paged_members(conversation_id, page_size=None, continuation_token=None,
    *, custom_headers=None, raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_conversation_paged_members
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.get_conversations
  isExternal: false
  name: get_conversations(continuation_token=None, *, custom_headers=None, raw=False,
    **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.get_conversations
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.reply_to_activity
  isExternal: false
  name: reply_to_activity(conversation_id, activity_id, activity, *, custom_headers=None,
    raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.reply_to_activity
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.send_conversation_history
  isExternal: false
  name: send_conversation_history(conversation_id, activities=None, *, custom_headers=None,
    raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.send_conversation_history
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.send_to_conversation
  isExternal: false
  name: send_to_conversation(conversation_id, activity, *, custom_headers=None, raw=False,
    **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.send_to_conversation
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.update_activity
  isExternal: false
  name: update_activity(conversation_id, activity_id, activity, *, custom_headers=None,
    raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.update_activity
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.upload_attachment
  isExternal: false
  name: upload_attachment(conversation_id, attachment_upload, *, custom_headers=None,
    raw=False, **operation_config)
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.upload_attachment
- fullName: botframework.connector.aio.operations_async.ConversationsOperations.models
  isExternal: false
  name: models
  parent: botframework.connector.aio.operations_async.ConversationsOperations
  uid: botframework.connector.aio.operations_async.ConversationsOperations.models
- fullName: list[botframework.connector.models.ChannelAccount]
  name: list[ChannelAccount]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: botframework.connector.models.ChannelAccount
    name: ChannelAccount
    uid: botframework.connector.models.ChannelAccount
  - fullName: ']'
    name: ']'
  uid: list[botframework.connector.models.ChannelAccount]
- fullName: list[botframework.connector.models.Activity]
  name: list[Activity]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: botframework.connector.models.Activity
    name: Activity
    uid: botframework.connector.models.Activity
  - fullName: ']'
    name: ']'
  uid: list[botframework.connector.models.Activity]
