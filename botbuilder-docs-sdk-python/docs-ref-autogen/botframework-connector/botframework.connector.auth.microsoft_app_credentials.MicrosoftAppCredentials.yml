### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.get_access_token
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.is_trusted_service
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.refresh_token
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.signed_session
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trust_service_url
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.cache
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.schema
  - botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trustedHostNames
  class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.authentication.Authentication
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: MicrosoftAppCredentials
  summary: MicrosoftAppCredentials auth implementation and cache.
  syntax:
    content: 'MicrosoftAppCredentials(app_id: str, password: str, channel_auth_tenant:
      str = None, oauth_scope: str = None)'
  type: class
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.get_access_token
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: 'get_access_token(force_refresh: bool = False) -> str'
  summary: "Gets an OAuth access token.\n:param force_refresh: True to force a refresh\
    \ of the token; or false to get\n\n\n   a cached token if it exists."
  syntax:
    content: 'get_access_token(force_refresh: bool = False) -> str'
    return:
      description: Access token string
  type: method
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.get_access_token
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.is_trusted_service
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: 'is_trusted_service(service_url: str) -> bool'
  summary: 'Checks if the service url is for a trusted host or not.

    :param service_url: The service url.

    :returns: True if the host of the service url is trusted; False otherwise.'
  syntax:
    content: 'is_trusted_service(service_url: str) -> bool'
  type: method
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.is_trusted_service
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.refresh_token
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: refresh_token() -> botframework.connector.auth.microsoft_app_credentials._OAuthResponse
  summary: 'returns: _OAuthResponse'
  syntax:
    content: refresh_token() -> botframework.connector.auth.microsoft_app_credentials._OAuthResponse
  type: method
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.refresh_token
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.signed_session
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: 'signed_session(session: requests.sessions.Session = None) -> requests.sessions.Session'
  summary: 'Gets the signed session.

    :returns: Signed requests.Session object'
  syntax:
    content: 'signed_session(session: requests.sessions.Session = None) -> requests.sessions.Session'
  type: method
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.signed_session
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trust_service_url
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: 'trust_service_url(service_url: str, expiration=None)'
  summary: 'Checks if the service url is for a trusted host or not.

    :param service_url: The service url.

    :param expiration: The expiration time after which this service url is not trusted
    anymore.

    :returns: True if the host of the service url is trusted; False otherwise.'
  syntax:
    content: 'trust_service_url(service_url: str, expiration=None)'
  type: method
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trust_service_url
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.cache
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: cache
  syntax:
    content: cache = {}
  type: attribute
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.cache
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.schema
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: schema
  syntax:
    content: schema = 'Bearer'
  type: attribute
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.schema
- class: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trustedHostNames
  langs:
  - python
  module: botframework.connector.auth.microsoft_app_credentials
  name: trustedHostNames
  syntax:
    content: 'trustedHostNames = {''state.botframework.com'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''api.botframework.com'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''token.botframework.com'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''state.botframework.azure.us'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''api.botframework.azure.us'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''token.botframework.azure.us'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999)}'
  type: attribute
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trustedHostNames
references:
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.get_access_token
  isExternal: false
  name: 'get_access_token(force_refresh: bool = False) -> str'
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.get_access_token
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.is_trusted_service
  isExternal: false
  name: 'is_trusted_service(service_url: str) -> bool'
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.is_trusted_service
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.refresh_token
  isExternal: false
  name: refresh_token() -> botframework.connector.auth.microsoft_app_credentials._OAuthResponse
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.refresh_token
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.signed_session
  isExternal: false
  name: 'signed_session(session: requests.sessions.Session = None) -> requests.sessions.Session'
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.signed_session
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trust_service_url
  isExternal: false
  name: 'trust_service_url(service_url: str, expiration=None)'
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trust_service_url
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.cache
  isExternal: false
  name: cache
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.cache
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.schema
  isExternal: false
  name: schema
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.schema
- fullName: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trustedHostNames
  isExternal: false
  name: trustedHostNames
  parent: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials
  uid: botframework.connector.auth.microsoft_app_credentials.MicrosoftAppCredentials.trustedHostNames
