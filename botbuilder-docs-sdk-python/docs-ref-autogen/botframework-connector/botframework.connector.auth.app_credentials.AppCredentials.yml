### YamlMime:PythonClass
uid: botframework.connector.auth.app_credentials.AppCredentials
name: AppCredentials
fullName: botframework.connector.auth.app_credentials.AppCredentials
module: botframework.connector.auth.app_credentials
inheritances:
- msrest.authentication.Authentication
summary: 'Base class for token retrieval.  Subclasses MUST override get_access_token
  in

  order to supply a valid token for the specific credentials.'
constructor:
  syntax: 'AppCredentials(app_id: str = None, channel_auth_tenant: str = None, oauth_scope:
    str = None)'
methods:
- uid: botframework.connector.auth.app_credentials.AppCredentials.get_access_token
  name: get_access_token
  summary: 'Returns a token for the current AppCredentials.

    :return: The token'
  signature: 'get_access_token(force_refresh: bool = False) -> str'
  parameters:
  - name: force_refresh
    defaultValue: 'False'
- uid: botframework.connector.auth.app_credentials.AppCredentials.is_trusted_service
  name: is_trusted_service
  summary: 'Checks if the service url is for a trusted host or not.

    :param service_url: The service url.

    :returns: True if the host of the service url is trusted; False otherwise.'
  signature: 'is_trusted_service(service_url: str) -> bool'
  parameters:
  - name: service_url
    isRequired: true
- uid: botframework.connector.auth.app_credentials.AppCredentials.signed_session
  name: signed_session
  summary: 'Gets the signed session.  This is called by the msrest package

    :returns: Signed requests.Session object'
  signature: 'signed_session(session: requests.sessions.Session = None) -> requests.sessions.Session'
  parameters:
  - name: session
    defaultValue: None
- uid: botframework.connector.auth.app_credentials.AppCredentials.trust_service_url
  name: trust_service_url
  summary: 'Checks if the service url is for a trusted host or not.

    :param service_url: The service url.

    :param expiration: The expiration time after which this service url is not trusted
    anymore.

    :returns: True if the host of the service url is trusted; False otherwise.'
  signature: 'trust_service_url(service_url: str, expiration=None)'
  parameters:
  - name: service_url
    isRequired: true
  - name: expiration
    defaultValue: None
attributes:
- uid: botframework.connector.auth.app_credentials.AppCredentials.cache
  name: cache
  signature: cache = {}
- uid: botframework.connector.auth.app_credentials.AppCredentials.schema
  name: schema
  signature: schema = 'Bearer'
- uid: botframework.connector.auth.app_credentials.AppCredentials.trustedHostNames
  name: trustedHostNames
  signature: 'trustedHostNames = {''api.botframework.azure.us'': datetime.datetime(9999,
    12, 31, 23, 59, 59, 999999), ''api.botframework.com'': datetime.datetime(9999,
    12, 31, 23, 59, 59, 999999), ''token.botframework.azure.us'': datetime.datetime(9999,
    12, 31, 23, 59, 59, 999999), ''token.botframework.com'': datetime.datetime(9999,
    12, 31, 23, 59, 59, 999999)}'
