### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botframework.connector.auth.app_credentials.AppCredentials.get_access_token
  - botframework.connector.auth.app_credentials.AppCredentials.is_trusted_service
  - botframework.connector.auth.app_credentials.AppCredentials.signed_session
  - botframework.connector.auth.app_credentials.AppCredentials.trust_service_url
  - botframework.connector.auth.app_credentials.AppCredentials.cache
  - botframework.connector.auth.app_credentials.AppCredentials.schema
  - botframework.connector.auth.app_credentials.AppCredentials.trustedHostNames
  class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.authentication.Authentication
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: AppCredentials
  summary: 'Base class for token retrieval.  Subclasses MUST override get_access_token
    in

    order to supply a valid token for the specific credentials.'
  syntax:
    content: 'AppCredentials(app_id: str = None, channel_auth_tenant: str = None,
      oauth_scope: str = None)'
  type: class
  uid: botframework.connector.auth.app_credentials.AppCredentials
- class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials.get_access_token
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: 'get_access_token(force_refresh: bool = False) -> str'
  namewithoutparameters: get_access_token
  summary: 'Returns a token for the current AppCredentials.

    :return: The token'
  syntax:
    content: 'get_access_token(force_refresh: bool = False) -> str'
  type: method
  uid: botframework.connector.auth.app_credentials.AppCredentials.get_access_token
- class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials.is_trusted_service
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: 'is_trusted_service(service_url: str) -> bool'
  namewithoutparameters: is_trusted_service
  summary: 'Checks if the service url is for a trusted host or not.

    :param service_url: The service url.

    :returns: True if the host of the service url is trusted; False otherwise.'
  syntax:
    content: 'is_trusted_service(service_url: str) -> bool'
  type: method
  uid: botframework.connector.auth.app_credentials.AppCredentials.is_trusted_service
- class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials.signed_session
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: 'signed_session(session: requests.sessions.Session = None) -> requests.sessions.Session'
  namewithoutparameters: signed_session
  summary: 'Gets the signed session.  This is called by the msrest package

    :returns: Signed requests.Session object'
  syntax:
    content: 'signed_session(session: requests.sessions.Session = None) -> requests.sessions.Session'
  type: method
  uid: botframework.connector.auth.app_credentials.AppCredentials.signed_session
- class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials.trust_service_url
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: 'trust_service_url(service_url: str, expiration=None)'
  namewithoutparameters: trust_service_url
  summary: 'Checks if the service url is for a trusted host or not.

    :param service_url: The service url.

    :param expiration: The expiration time after which this service url is not trusted
    anymore.

    :returns: True if the host of the service url is trusted; False otherwise.'
  syntax:
    content: 'trust_service_url(service_url: str, expiration=None)'
  type: method
  uid: botframework.connector.auth.app_credentials.AppCredentials.trust_service_url
- class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials.cache
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: cache
  syntax:
    content: cache = {}
  type: attribute
  uid: botframework.connector.auth.app_credentials.AppCredentials.cache
- class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials.schema
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: schema
  syntax:
    content: schema = 'Bearer'
  type: attribute
  uid: botframework.connector.auth.app_credentials.AppCredentials.schema
- class: botframework.connector.auth.app_credentials.AppCredentials
  fullName: botframework.connector.auth.app_credentials.AppCredentials.trustedHostNames
  langs:
  - python
  module: botframework.connector.auth.app_credentials
  name: trustedHostNames
  syntax:
    content: 'trustedHostNames = {''api.botframework.com'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''token.botframework.com'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''api.botframework.azure.us'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999), ''token.botframework.azure.us'': datetime.datetime(9999,
      12, 31, 23, 59, 59, 999999)}'
  type: attribute
  uid: botframework.connector.auth.app_credentials.AppCredentials.trustedHostNames
references:
- fullName: botframework.connector.auth.app_credentials.AppCredentials.get_access_token
  isExternal: false
  name: 'get_access_token(force_refresh: bool = False) -> str'
  parent: botframework.connector.auth.app_credentials.AppCredentials
  uid: botframework.connector.auth.app_credentials.AppCredentials.get_access_token
- fullName: botframework.connector.auth.app_credentials.AppCredentials.is_trusted_service
  isExternal: false
  name: 'is_trusted_service(service_url: str) -> bool'
  parent: botframework.connector.auth.app_credentials.AppCredentials
  uid: botframework.connector.auth.app_credentials.AppCredentials.is_trusted_service
- fullName: botframework.connector.auth.app_credentials.AppCredentials.signed_session
  isExternal: false
  name: 'signed_session(session: requests.sessions.Session = None) -> requests.sessions.Session'
  parent: botframework.connector.auth.app_credentials.AppCredentials
  uid: botframework.connector.auth.app_credentials.AppCredentials.signed_session
- fullName: botframework.connector.auth.app_credentials.AppCredentials.trust_service_url
  isExternal: false
  name: 'trust_service_url(service_url: str, expiration=None)'
  parent: botframework.connector.auth.app_credentials.AppCredentials
  uid: botframework.connector.auth.app_credentials.AppCredentials.trust_service_url
- fullName: botframework.connector.auth.app_credentials.AppCredentials.cache
  isExternal: false
  name: cache
  parent: botframework.connector.auth.app_credentials.AppCredentials
  uid: botframework.connector.auth.app_credentials.AppCredentials.cache
- fullName: botframework.connector.auth.app_credentials.AppCredentials.schema
  isExternal: false
  name: schema
  parent: botframework.connector.auth.app_credentials.AppCredentials
  uid: botframework.connector.auth.app_credentials.AppCredentials.schema
- fullName: botframework.connector.auth.app_credentials.AppCredentials.trustedHostNames
  isExternal: false
  name: trustedHostNames
  parent: botframework.connector.auth.app_credentials.AppCredentials
  uid: botframework.connector.auth.app_credentials.AppCredentials.trustedHostNames
