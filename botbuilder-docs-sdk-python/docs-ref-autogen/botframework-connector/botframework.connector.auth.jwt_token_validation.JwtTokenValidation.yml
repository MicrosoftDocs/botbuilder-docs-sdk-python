### YamlMime:PythonClass
uid: botframework.connector.auth.jwt_token_validation.JwtTokenValidation
name: JwtTokenValidation
fullName: botframework.connector.auth.jwt_token_validation.JwtTokenValidation
module: botframework.connector.auth.jwt_token_validation
inheritances:
- builtins.object
constructor:
  syntax: JwtTokenValidation()
methods:
- uid: botframework.connector.auth.jwt_token_validation.JwtTokenValidation.authenticate_request
  name: authenticate_request
  summary: 'Authenticates the request and sets the service url in the set of trusted
    urls.

    :param activity: The incoming Activity from the Bot Framework or the Emulator

    :type activity: ~botframework.connector.models.Activity

    :param auth_header: The Bearer token included as part of the request

    :type auth_header: str

    :param credentials: The set of valid credentials, such as the Bot Application
    ID

    :param channel_service_or_provider: String for the channel service

    :param auth_configuration: Authentication configuration

    :type credentials: CredentialProvider'
  signature: 'authenticate_request(activity: botbuilder.schema._models_py3.Activity,
    auth_header: str, credentials: botframework.connector.auth.credential_provider.CredentialProvider,
    channel_service_or_provider: Union[str, botframework.connector.auth.channel_provider.ChannelProvider]
    = '''', auth_configuration: Optional[botframework.connector.auth.authentication_configuration.AuthenticationConfiguration]
    = None)'
  parameters:
  - name: activity
    isRequired: true
  - name: auth_header
    isRequired: true
  - name: credentials
    isRequired: true
  - name: channel_service_or_provider
  - name: auth_configuration
    defaultValue: None
- uid: botframework.connector.auth.jwt_token_validation.JwtTokenValidation.get_app_id_from_claims
  name: get_app_id_from_claims
  signature: 'get_app_id_from_claims(claims: Dict[str, object])'
  parameters:
  - name: claims
    isRequired: true
- uid: botframework.connector.auth.jwt_token_validation.JwtTokenValidation.is_government
  name: is_government
  signature: 'is_government(channel_service: str)'
  parameters:
  - name: channel_service
    isRequired: true
- uid: botframework.connector.auth.jwt_token_validation.JwtTokenValidation.is_valid_token_format
  name: is_valid_token_format
  signature: 'is_valid_token_format(auth_header: str)'
  parameters:
  - name: auth_header
    isRequired: true
- uid: botframework.connector.auth.jwt_token_validation.JwtTokenValidation.validate_auth_header
  name: validate_auth_header
  signature: 'validate_auth_header(auth_header: str, credentials: botframework.connector.auth.credential_provider.CredentialProvider,
    channel_service_or_provider: Union[str, botframework.connector.auth.channel_provider.ChannelProvider],
    channel_id: str, service_url: Optional[str] = None, auth_configuration: Optional[botframework.connector.auth.authentication_configuration.AuthenticationConfiguration]
    = None)'
  parameters:
  - name: auth_header
    isRequired: true
  - name: credentials
    isRequired: true
  - name: channel_service_or_provider
    isRequired: true
  - name: channel_id
    isRequired: true
  - name: service_url
    defaultValue: None
  - name: auth_configuration
    defaultValue: None
- uid: botframework.connector.auth.jwt_token_validation.JwtTokenValidation.validate_claims
  name: validate_claims
  signature: 'validate_claims(auth_config: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration,
    claims: List[Dict])'
  parameters:
  - name: auth_config
    isRequired: true
  - name: claims
    isRequired: true
