### YamlMime:PythonClass
uid: botframework.connector.auth.skill_validation.SkillValidation
name: SkillValidation
fullName: botframework.connector.auth.skill_validation.SkillValidation
module: botframework.connector.auth.skill_validation
inheritances:
- builtins.object
summary: Validates JWT tokens sent to and from a Skill.
constructor:
  syntax: SkillValidation()
methods:
- uid: botframework.connector.auth.skill_validation.SkillValidation.authenticate_channel_token
  name: authenticate_channel_token
  signature: 'authenticate_channel_token(auth_header: str, credentials: botframework.connector.auth.credential_provider.CredentialProvider,
    channel_service_or_provider: typing.Union[str, botframework.connector.auth.channel_provider.ChannelProvider],
    channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration)
    -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parameters:
  - name: auth_header
    isRequired: true
  - name: credentials
    isRequired: true
  - name: channel_service_or_provider
    isRequired: true
  - name: channel_id
    isRequired: true
  - name: auth_configuration
    isRequired: true
- uid: botframework.connector.auth.skill_validation.SkillValidation.create_anonymous_skill_claim
  name: create_anonymous_skill_claim
  summary: 'Creates a ClaimsIdentity for an anonymous (unauthenticated) skill.

    :return ClaimsIdentity:'
  signature: create_anonymous_skill_claim()
- uid: botframework.connector.auth.skill_validation.SkillValidation.is_skill_claim
  name: is_skill_claim
  summary: 'Checks if the given list of claims represents a skill.

    :param claims: A dict of claims.

    :return bool:'
  signature: 'is_skill_claim(claims: typing.Dict[str, object]) -> bool'
  parameters:
  - name: claims
    isRequired: true
- uid: botframework.connector.auth.skill_validation.SkillValidation.is_skill_token
  name: is_skill_token
  summary: 'Determines if a given Auth header is from from a skill to bot or bot to
    skill request.

    :param auth_header: Bearer Token, in the "Bearer [Long String]" Format.

    :return bool:'
  signature: 'is_skill_token(auth_header: str) -> bool'
  parameters:
  - name: auth_header
    isRequired: true
