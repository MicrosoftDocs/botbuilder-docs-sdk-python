### YamlMime:PythonClass
uid: botframework.connector.auth.password_service_client_credential_factory.PasswordServiceClientCredentialFactory
name: PasswordServiceClientCredentialFactory
fullName: botframework.connector.auth.password_service_client_credential_factory.PasswordServiceClientCredentialFactory
module: botframework.connector.auth.password_service_client_credential_factory
inheritances:
- botframework.connector.auth.service_client_credentials_factory.ServiceClientCredentialsFactory
constructor:
  syntax: 'PasswordServiceClientCredentialFactory(app_id: str = None, password: str
    = None, tenant_id: str = None, *, logger: Logger = None)'
  parameters:
  - name: app_id
    defaultValue: None
  - name: password
    defaultValue: None
  - name: tenant_id
    defaultValue: None
  keywordOnlyParameters:
  - name: logger
    isRequired: true
methods:
- uid: botframework.connector.auth.password_service_client_credential_factory.PasswordServiceClientCredentialFactory.create_credentials
  name: create_credentials
  signature: 'async create_credentials(app_id: str, oauth_scope: str, login_endpoint:
    str, validate_authority: bool) -> Authentication'
  parameters:
  - name: app_id
    isRequired: true
  - name: oauth_scope
    isRequired: true
  - name: login_endpoint
    isRequired: true
  - name: validate_authority
    isRequired: true
- uid: botframework.connector.auth.password_service_client_credential_factory.PasswordServiceClientCredentialFactory.is_authentication_disabled
  name: is_authentication_disabled
  signature: async is_authentication_disabled() -> bool
- uid: botframework.connector.auth.password_service_client_credential_factory.PasswordServiceClientCredentialFactory.is_valid_app_id
  name: is_valid_app_id
  signature: 'async is_valid_app_id(app_id: str) -> bool'
  parameters:
  - name: app_id
    isRequired: true
