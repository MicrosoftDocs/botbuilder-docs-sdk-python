### YamlMime:PythonClass
uid: botframework.connector.auth.channel_validation.ChannelValidation
name: ChannelValidation
fullName: botframework.connector.auth.channel_validation.ChannelValidation
module: botframework.connector.auth.channel_validation
inheritances:
- builtins.object
constructor:
  syntax: ChannelValidation()
methods:
- uid: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token
  name: authenticate_channel_token
  summary: 'Validate the incoming Auth Header


    Validate the incoming Auth Header as a token sent from the Bot Framework Service.

    A token issued by the Bot Framework emulator will FAIL this check.'
  signature: 'authenticate_channel_token(auth_header: str, credentials: botframework.connector.auth.credential_provider.CredentialProvider,
    channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
    = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parameters:
  - name: auth_header
    description: 'The raw HTTP header in the format: ''Bearer [longString]'''
    isRequired: true
    types:
    - <xref:str>
  - name: credentials
    description: The user defined set of valid credentials, such as the AppId.
    isRequired: true
    types:
    - <xref:botframework.connector.auth.credential_provider.CredentialProvider>
  - name: channel_id
    isRequired: true
  - name: auth_configuration
    defaultValue: None
  return:
    description: A valid ClaimsIdentity.
  exceptions:
  - type: Exception
    description: ''
- uid: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token_with_service_url
  name: authenticate_channel_token_with_service_url
  summary: 'Validate the incoming Auth Header


    Validate the incoming Auth Header as a token sent from the Bot Framework Service.

    A token issued by the Bot Framework emulator will FAIL this check.'
  signature: 'authenticate_channel_token_with_service_url(auth_header: str, credentials:
    botframework.connector.auth.credential_provider.CredentialProvider, service_url:
    str, channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
    = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parameters:
  - name: auth_header
    description: 'The raw HTTP header in the format: ''Bearer [longString]'''
    isRequired: true
    types:
    - <xref:str>
  - name: credentials
    description: The user defined set of valid credentials, such as the AppId.
    isRequired: true
    types:
    - <xref:botframework.connector.auth.credential_provider.CredentialProvider>
  - name: service_url
    description: Claim value that must match in the identity.
    isRequired: true
    types:
    - <xref:str>
  - name: channel_id
    isRequired: true
  - name: auth_configuration
    defaultValue: None
  return:
    description: A valid ClaimsIdentity.
  exceptions:
  - type: Exception
    description: ''
- uid: botframework.connector.auth.channel_validation.ChannelValidation.validate_identity
  name: validate_identity
  signature: 'validate_identity(identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    credentials: botframework.connector.auth.credential_provider.CredentialProvider)
    -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parameters:
  - name: identity
    isRequired: true
  - name: credentials
    isRequired: true
attributes:
- uid: botframework.connector.auth.channel_validation.ChannelValidation.SERVICE_URL_CLAIM
  name: SERVICE_URL_CLAIM
  signature: SERVICE_URL_CLAIM = 'serviceurl'
- uid: botframework.connector.auth.channel_validation.ChannelValidation.TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
  name: TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
  signature: TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS = <botframework.connector.auth.verify_options.VerifyOptions
    object>
- uid: botframework.connector.auth.channel_validation.ChannelValidation.open_id_metadata_endpoint
  name: open_id_metadata_endpoint
  signature: 'open_id_metadata_endpoint: str = None'
