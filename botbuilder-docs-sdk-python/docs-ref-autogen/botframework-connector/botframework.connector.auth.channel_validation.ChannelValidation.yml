### YamlMime:UniversalReference
api_name: []
items:
- children:
  - botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token
  - botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token_with_service_url
  - botframework.connector.auth.channel_validation.ChannelValidation.validate_identity
  - botframework.connector.auth.channel_validation.ChannelValidation.SERVICE_URL_CLAIM
  - botframework.connector.auth.channel_validation.ChannelValidation.TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
  - botframework.connector.auth.channel_validation.ChannelValidation.open_id_metadata_endpoint
  class: botframework.connector.auth.channel_validation.ChannelValidation
  fullName: botframework.connector.auth.channel_validation.ChannelValidation
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: botframework.connector.auth.channel_validation
  name: ChannelValidation
  source:
    id: ChannelValidation
    path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
    remote:
      branch: master
      path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 11
  summary: ''
  syntax: {}
  type: class
  uid: botframework.connector.auth.channel_validation.ChannelValidation
- class: botframework.connector.auth.channel_validation.ChannelValidation
  exceptions:
  - description: ''
    type: Exception
  fullName: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token
  langs:
  - python
  module: botframework.connector.auth.channel_validation
  name: 'authenticate_channel_token(auth_header: str, credentials: botframework.connector.auth.credential_provider.CredentialProvider,
    channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
    = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  namewithoutparameters: authenticate_channel_token
  source:
    id: authenticate_channel_token
    path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
    remote:
      branch: master
      path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 64
  summary: 'Validate the incoming Auth Header


    Validate the incoming Auth Header as a token sent from the Bot Framework Service.

    A token issued by the Bot Framework emulator will FAIL this check.'
  syntax:
    content: 'authenticate_channel_token(auth_header: str, credentials: botframework.connector.auth.credential_provider.CredentialProvider,
      channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
      = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
    parameters:
    - description: 'The raw HTTP header in the format: ''Bearer [longString]'''
      id: auth_header
      isRequired: true
      type:
      - str
    - description: The user defined set of valid credentials, such as the AppId.
      id: credentials
      isRequired: true
      type:
      - CredentialProvider
    return:
      description: A valid ClaimsIdentity.
  type: method
  uid: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token
- class: botframework.connector.auth.channel_validation.ChannelValidation
  exceptions:
  - description: ''
    type: Exception
  fullName: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token_with_service_url
  langs:
  - python
  module: botframework.connector.auth.channel_validation
  name: 'authenticate_channel_token_with_service_url(auth_header: str, credentials:
    botframework.connector.auth.credential_provider.CredentialProvider, service_url:
    str, channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
    = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  namewithoutparameters: authenticate_channel_token_with_service_url
  source:
    id: authenticate_channel_token_with_service_url
    path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
    remote:
      branch: master
      path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 28
  summary: 'Validate the incoming Auth Header


    Validate the incoming Auth Header as a token sent from the Bot Framework Service.

    A token issued by the Bot Framework emulator will FAIL this check.'
  syntax:
    content: 'authenticate_channel_token_with_service_url(auth_header: str, credentials:
      botframework.connector.auth.credential_provider.CredentialProvider, service_url:
      str, channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
      = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
    parameters:
    - description: 'The raw HTTP header in the format: ''Bearer [longString]'''
      id: auth_header
      isRequired: true
      type:
      - str
    - description: The user defined set of valid credentials, such as the AppId.
      id: credentials
      isRequired: true
      type:
      - CredentialProvider
    - description: Claim value that must match in the identity.
      id: service_url
      isRequired: true
      type:
      - str
    return:
      description: A valid ClaimsIdentity.
  type: method
  uid: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token_with_service_url
- class: botframework.connector.auth.channel_validation.ChannelValidation
  fullName: botframework.connector.auth.channel_validation.ChannelValidation.validate_identity
  langs:
  - python
  module: botframework.connector.auth.channel_validation
  name: 'validate_identity(identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    credentials: botframework.connector.auth.credential_provider.CredentialProvider)
    -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  namewithoutparameters: validate_identity
  source:
    id: validate_identity
    path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
    remote:
      branch: master
      path: ./libraries/botframework-connector\botframework\connector\auth\channel_validation.py
      repo: https://github.com/microsoft/botbuilder-python
    startLine: 103
  syntax:
    content: 'validate_identity(identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
      credentials: botframework.connector.auth.credential_provider.CredentialProvider)
      -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  type: method
  uid: botframework.connector.auth.channel_validation.ChannelValidation.validate_identity
- class: botframework.connector.auth.channel_validation.ChannelValidation
  fullName: botframework.connector.auth.channel_validation.ChannelValidation.SERVICE_URL_CLAIM
  langs:
  - python
  module: botframework.connector.auth.channel_validation
  name: SERVICE_URL_CLAIM
  syntax:
    content: SERVICE_URL_CLAIM = 'serviceurl'
  type: attribute
  uid: botframework.connector.auth.channel_validation.ChannelValidation.SERVICE_URL_CLAIM
- class: botframework.connector.auth.channel_validation.ChannelValidation
  fullName: botframework.connector.auth.channel_validation.ChannelValidation.TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
  langs:
  - python
  module: botframework.connector.auth.channel_validation
  name: TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
  syntax:
    content: TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS = <botframework.connector.auth.verify_options.VerifyOptions
      object>
  type: attribute
  uid: botframework.connector.auth.channel_validation.ChannelValidation.TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
- class: botframework.connector.auth.channel_validation.ChannelValidation
  fullName: botframework.connector.auth.channel_validation.ChannelValidation.open_id_metadata_endpoint
  langs:
  - python
  module: botframework.connector.auth.channel_validation
  name: open_id_metadata_endpoint
  syntax:
    content: open_id_metadata_endpoint = None
  type: attribute
  uid: botframework.connector.auth.channel_validation.ChannelValidation.open_id_metadata_endpoint
references:
- fullName: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token
  isExternal: false
  name: 'authenticate_channel_token(auth_header: str, credentials: botframework.connector.auth.credential_provider.CredentialProvider,
    channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
    = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parent: botframework.connector.auth.channel_validation.ChannelValidation
  uid: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token
- fullName: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token_with_service_url
  isExternal: false
  name: 'authenticate_channel_token_with_service_url(auth_header: str, credentials:
    botframework.connector.auth.credential_provider.CredentialProvider, service_url:
    str, channel_id: str, auth_configuration: botframework.connector.auth.authentication_configuration.AuthenticationConfiguration
    = None) -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parent: botframework.connector.auth.channel_validation.ChannelValidation
  uid: botframework.connector.auth.channel_validation.ChannelValidation.authenticate_channel_token_with_service_url
- fullName: botframework.connector.auth.channel_validation.ChannelValidation.validate_identity
  isExternal: false
  name: 'validate_identity(identity: botframework.connector.auth.claims_identity.ClaimsIdentity,
    credentials: botframework.connector.auth.credential_provider.CredentialProvider)
    -> botframework.connector.auth.claims_identity.ClaimsIdentity'
  parent: botframework.connector.auth.channel_validation.ChannelValidation
  uid: botframework.connector.auth.channel_validation.ChannelValidation.validate_identity
- fullName: botframework.connector.auth.channel_validation.ChannelValidation.SERVICE_URL_CLAIM
  isExternal: false
  name: SERVICE_URL_CLAIM
  parent: botframework.connector.auth.channel_validation.ChannelValidation
  uid: botframework.connector.auth.channel_validation.ChannelValidation.SERVICE_URL_CLAIM
- fullName: botframework.connector.auth.channel_validation.ChannelValidation.TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
  isExternal: false
  name: TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
  parent: botframework.connector.auth.channel_validation.ChannelValidation
  uid: botframework.connector.auth.channel_validation.ChannelValidation.TO_BOT_FROM_CHANNEL_TOKEN_VALIDATION_PARAMETERS
- fullName: botframework.connector.auth.channel_validation.ChannelValidation.open_id_metadata_endpoint
  isExternal: false
  name: open_id_metadata_endpoint
  parent: botframework.connector.auth.channel_validation.ChannelValidation
  uid: botframework.connector.auth.channel_validation.ChannelValidation.open_id_metadata_endpoint
